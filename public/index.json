[{"categories":null,"content":"About me Hi there I’m 4rkal. I created this blog as free alternative to my medium blog I generaly post random stuff I stumble upon. Mostly about linux, privacy , cryptos and programming. I also post random thoughts on the thoughts part of this blog If you like my blog Ill happily accept donations Socials Heres how you can reach me: Session:053a1d66ce897ff32b87a4ab4232529f47b734971308d61984fc84b16fec87a519 Matrix: 4rkal:matrix.org Twitter: 4rkal_ Email: 4rkal@proton.me Email (cock.li): 4rkal@horsefucker.org ","date":"2023-02-25","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"In this article I will show you how I securely connect to my remote machines without having to configure port forwarding. ","date":"2023-10-04","objectID":"/posts/onionssh/:0:0","tags":null,"title":"SSH Remote Access NO Port-Forwarding NO Cloudflare","uri":"/posts/onionssh/"},{"categories":null,"content":"Requirements: A computer “server” (running linux) A internet connection Another computer to connect to your server (running linux) ","date":"2023-10-04","objectID":"/posts/onionssh/:1:0","tags":null,"title":"SSH Remote Access NO Port-Forwarding NO Cloudflare","uri":"/posts/onionssh/"},{"categories":null,"content":"Why? If you want to access your server without portforwarding in a extremely secure fashion you will want to follow this tutorial. You will be connecting to the server via tor which will make it harder for anyone to find the url of the server and ill show you how to setup keybased auth for even more security! ","date":"2023-10-04","objectID":"/posts/onionssh/:2:0","tags":null,"title":"SSH Remote Access NO Port-Forwarding NO Cloudflare","uri":"/posts/onionssh/"},{"categories":null,"content":"Setup You will have to install the following packages (ssh, tor) On debian sudo apt install openssh-client On arch sudo pacman -S openssh After that enable the ssh service Debian: sudo systemctl enable ssh Arch: sudo systemctl enable sshd If you want to check if this worked just use another computer and run ssh USER@IP for example I run ssh arkal@192.168.1.69 After this you can enable KeyBased authentication for more security Here is my article how to enable that : Enable keybased authentication After you have done that you want to edit your torrc file. Using your favorite text editor sudo vim /etc/tor/torrc Now you will want to navigate to the part that says HiddenService. And paste the following HiddenServiceDir /var/lib/tor/ssh/ HiddenServicePort 22 127.0.0.1:22 Save your file and exit the editor (for nano cntrl s, cntrl x) Now you want will have to restart the tor service sudo systemctl restart tor After that run the following: sudo cat /var/lib/tor/ssh/hostname You should see a string of letters and characters ending in .onion Now on your other machine: ","date":"2023-10-04","objectID":"/posts/onionssh/:3:0","tags":null,"title":"SSH Remote Access NO Port-Forwarding NO Cloudflare","uri":"/posts/onionssh/"},{"categories":null,"content":"Connecting to the server On your main machine you will have to do the following: Have ssh, tor, and socat installed After you have installed them you will have to edit the ssh config vim .ssh/config And paste the following Host NAME Hostname URL.onion User USER Port 22 Proxycommand socat - SOCKS4A:127.0.0.1:%h:%p,socksport=9050 You will have to change the NAME, URL and USER. The user is the user you want to connect as to your server and the url is the url you that ends in .onion from above. Now save the file and exit. Now edit the torrc file. Using your favorite text editor: vim /etc/tor/torrc Find the line that says SOCKSPort and uncomment it SOCKSPort 9050 Restart the tor service systemctl restart tor To connect to the server run the following command: torify ssh NAME With NAME being the name that you gave to the server in the config file. If this article helped you out consider supporting me ","date":"2023-10-04","objectID":"/posts/onionssh/:4:0","tags":null,"title":"SSH Remote Access NO Port-Forwarding NO Cloudflare","uri":"/posts/onionssh/"},{"categories":null,"content":"In this article I’ll show you how I setup this blog completely for free. I’ll show you how to use hugo to write your blog, Cloudflare and eu.org for your domain and ssl, Render and github for the hosting and even how to get your blog on google. What is hugo? Hugo is a fast and popular open-source static site generator used for creating static websites without requiring a database or dynamic components. Hugo setup Download and install hugo On debian type sudo apt install hugo On arch type sudo pacman -S hugo On fedora type sudo dnf install hugo On windows: Navigate to https://github.com/gohugoio/hugo/releases/latest Find the windows version and download it. Unzip the file to your desired directory Add this directory to the PATH environment variable Read more: Read more: https://gohugo.io/installation/windows/ Creating the hugo site Open up a terminal and type: hugo new site my_website And then cd into that directory cd my_website After that we will have to install a theme. I will be using the LoveIt theme but you can use any other theme All hugo themes: https://themes.gohugo.io/ For the LoveIt theme: The first thing we will have to do is type git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt You will have to have git installed if you don’t, follow the instructions on the page to download it. Now we will have to create some basic configuration. Every theme has its own so you should first check your themes documentation. Some basic settings work for all themes. Here is an example of the most basic settings for the LoveIt theme. (it has to be saved in config.toml) baseURL = \"http://example.org/\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" # website title title = \"My New Hugo Site\" # language code [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"en\" # language name [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"English\" # Author config [author] name = \"xxxx\" email = \"\" link = \"\" # Menu config [menu] [[menu.main]] weight = 1 identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false You can find my configuration here You can view your page live by running hugo serve Let’s move on to the next step. Adding articles to our blog The first thing we will have to do is create a new file with any name ending in .md inside of our content folder. I like to separate my posts from other sections so I will create another folder inside of the content one called posts. You can run this command to add the file hugo new posts/first_post.md Now open the file that was just created using your favorite text editor. You should see something like this: --- title: \"Epic title\" date: 2023-03-23T18:13:03+03:00 draft: true --- If you want the post to be publicly visible on your blog delete the draft line. or set it to false. Now if we want to add some content we will have to write it in markdown. Heres a great guide on some basic markdown syntax https://hugoloveit.com/basic-markdown-syntax/ Heres an example of some content --- title: \"My First Post\" date: 2023-03-23T18:13:03+03:00 draft: false --- # Welcome to my blog! This is my first post. Here's a picture of my cat: ![My cat](/images/cat.jpg) Using the above steps you can add all of your articles to the blog. Now th","date":"2023-03-23","objectID":"/posts/thisblog/:0:0","tags":null,"title":"How I setup this blog for free (domain, hosting, ssl) Complete Guide","uri":"/posts/thisblog/"},{"categories":null,"content":"Why you should use Python. Going over the basics of Python. In this course/article I will be talking about why someone should use Python. Later on, I will be tackling the basics of Python. But let’s start by explaining what coding is. ","date":"2023-03-06","objectID":"/posts/python/:0:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"What is coding? Coding means writing instructions for computers and a finished set of instructions is known as a program. Computer programs control everything from smartphones to space rockets. ","date":"2023-03-06","objectID":"/posts/python/:1:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"What is Python? Python is a text-based computer language which means it’s made up of words and symbols (such as * and = ). Its language elements and object-oriented approach are meant to assist programmers in writing clear, logical code for both small and large-scale projects. ","date":"2023-03-06","objectID":"/posts/python/:2:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Why Python? Python is one of the most popular computer languages and it’s very concise — that is, you don’t need to type much in order to create programs that do a lot. ","date":"2023-03-06","objectID":"/posts/python/:3:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Advantages of python Simple to read, learn, and write Python is a high-level programming language with a syntax that is similar to English. This makes the code easier to read and comprehend. Python is really simple to pick up and understand, which is why many people suggest it to newcomers. When compared to other prominent languages like C/C++ and Java, you require fewer lines of code to accomplish the same purpose. Improved Productivity Python is an extremely useful programming language. Python’s simplicity allows developers to concentrate on solving the problem. They don’t need to spend a lot of time learning the programming language’s syntax or behaviour. You write less code and accomplish more. Free and Open-Source Python comes under the OSI-approved open-source license. As a result, it is both free to use and distribute. You can get the source code, change it, and even share your own Python version. Portability In many languages like C/C++, you need to change your code to run the program on different platforms. With Python, however, this is not the case. You only have to write it once and it may be used wherever. ","date":"2023-03-06","objectID":"/posts/python/:4:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Downloading Python On Linux You probably already know how to install it but I’m gonna show it anyways. Open your terminal and type python or python3; if it does not work then run: (depending on your distro) sudo apt install python3 Windows 10 1 . First check if you already have Python installed. Go to the ‘Start’ menu and click on the ‘All programs’. If you see the word “Python” it means that you already have it installed. If you don’t already have it installed go to https://python.org, download the correct version for your computer and then install it. Python comes in different versions. This course uses version 3 and upwards. I recommend always installing the latest version. ","date":"2023-03-06","objectID":"/posts/python/:5:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"What is an IDE? IDE stands for the integrated development environment (IDE) and is software for building applications that combine common developer tools into a single Graphical User Interface (GUI). The IDE that we will be using in this series is called VS Code. ","date":"2023-03-06","objectID":"/posts/python/:6:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Downloading VS Code Go to https://code.visualstudio.com/ and download the version that you want. Vs Code is available for Windows, Mac, and Linux. Follow the instructions on the website for installation. ","date":"2023-03-06","objectID":"/posts/python/:7:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Starting in Python It’s traditional in the programming world to make the computer say ‘Hello World’ with your very first piece of code. In Python, this is very simple. Open Vs Code and click on File \u003e New File and name your file helloworld.py. The .py tells the computer that this is a Python program. In your project, in VS Code type : print(\"Hello World!\") Save your project and click on the run button at the top of your screen If you have done everything correctly you should see a Hello World message in your terminal. If it didn’t work you should get a red error message something like this: SyntaxError: invalid syntax If that happens make sure that you have copied it exactly like above. ","date":"2023-03-06","objectID":"/posts/python/:8:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Playing With numbers in Python Python makes it easy to do maths. You just type in a question and get the answer Adding Up Open an empty project and type: print(2+2) You should see the answer: 4 Subtracting(and more) If you want to subtract, use the ‘-’ symbol like this: print(2 - 2) To multiply use the ‘*’ symbol: print(2 * 2) To divide, use the ‘/’ symbol print(2 / 2) ","date":"2023-03-06","objectID":"/posts/python/:9:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Variables A variable is like a labelled box that stores information. You can change this information but the label stays the same. ","date":"2023-03-06","objectID":"/posts/python/:10:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Creating a variable: To tell the computer what you want your variable to be, you use the = sign. This is called assigning a value to a variable. It’s very simple, here’s an example using fish. Open a new VS Code project and type: fish = 5 Imagine a cat gets hungry and eats two fish. To create another variable for the amount eaten, write the following: fishEaten = 2 Press enter and then type: print(fish - fishEaten) Save and run your code and you should get the answer: 3 ","date":"2023-03-06","objectID":"/posts/python/:11:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Input in Python You can use the input() function to ask for information from the user. Open a new VS Code project and type: name = input(\"What is your name? \") Run the program and you should get the following message: What is your name? 3. Now let’s try printing your name. Add the following to your program: print(name) You have successfully created an input field! This can be very useful in creating decision games. ","date":"2023-03-06","objectID":"/posts/python/:12:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Making Decisions To write a program that allows you to make decisions the computer needs to react differently to different answers. For this, you need conditions to compare pieces of information, and conditionals to create different paths through the program. ","date":"2023-03-06","objectID":"/posts/python/:13:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"What are Conditions? A condition is a bit of code that compares two pieces of information. Conditions use operators to make these comparisons. For example, the operator == checks if two pieces of information are the same. Open a new Vs Code project and type: age = 10 if age == 12: print(\"True\") else: print(\"False\") Save and run and you should get False That is because ‘age’ is set to 10 and not 12 ","date":"2023-03-06","objectID":"/posts/python/:14:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"What are conditionals To use a condition in your code you need a command called a condition. Conditionals use conditions. Conditions show if something is True or False. ","date":"2023-03-06","objectID":"/posts/python/:15:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"IF One important condition is known as an if statement which tests whether a condition is true. If it is, the computer will follow the instructions after the if statement. If not, the computer will just skip it. In Python, if is a keyword. Dont use it as a variable name because the computer will think that it’s an if statement and get confused. ","date":"2023-03-06","objectID":"/posts/python/:16:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Implementing the if condition Create a new VS Code project and type the following: user_reply = (\"Do you like python? (Type yes or no) \") Then we will implement the if condition by typing the following: if user_reply == \"yes\" print(\"Python likes you to ! \") ","date":"2023-03-06","objectID":"/posts/python/:17:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"ELIF elif is short for else if. If the conditions of the if code isn’t met it “sweeps up” whatever is left. Now type the following: elif user_reply == \"maybe\": print(\"Make up your mind!\") ","date":"2023-03-06","objectID":"/posts/python/:18:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"ELSE When conditions for the if and elif code arent met, else goes into action and “sweeps up” whatever is left. Let’s implement that: 4. Now type the following: else: print(\"Well python doesn't like you either\") The complete code should look something like this: user_reply = (\"Do you like python? (Type yes or no) \") if user_reply == \"yes\" print(\"Python likes you to ! \") elif user_reply == \"maybe\": print(\"Make up your mind!\") else: print(\"Well python doesn't like you either\") Don’t forget to press the tab after if statements. ","date":"2023-03-06","objectID":"/posts/python/:19:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Randomness in python In python we can use the random function in order to generate random numbers. This can be extremely useful in a variety of things. The first thing we will have to do is import the random function import random After that we can print out a random number with the following print(random.randint(1,10)) This will output a random number from 1–10 randint stands for random integer. Here is the full code. import random print(random.randint(1,10)) ","date":"2023-03-06","objectID":"/posts/python/:20:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Loops in python There are two types of loops in python While loop For loop While loops only stop when something changes. If it doesn’t change they could go on forever. With for loops on the other hand you can define exactly when you want them to stop The most popular example of a while loop is while True: Which will run forever eg while True: print(\"hi\") This will run forever. With while loops on the other hand you can define exactly how many times you want the loop to run. for x in range(0,10): print(\"Hi\") This will print Hi exactly 10 times ","date":"2023-03-06","objectID":"/posts/python/:21:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"Guessing game Now lets combine what learned from above and from our previous articles to create a game The computer will select a random number from 1–10 and you will have to guess it. The first thing we will have to do is import random After that we will create a variable called number number = random.randint(1,10) After that we will create another variable called your_guess your_guess = int(input(\"Im thinking of a number from 1 to 10, can you guess which one?\")) We are using int as you will have to enter a number Now we will create a while loop that will keep the game running until you guess the number while your_guess != number: The code so far is import random number = random.randint(1,10) your_guess = int(input(\"Im thinking of a number from 1 to 10, can you guess which one?\")) while your_guess != number: if your_guess \u003c number: print(\"Your number was too low\") else: print(\"You number was to high\") And the following print(\"GG you found it\") You code should now look like this import random number = random.randint(1,10) your_guess = int(input(\"Im thinking of a number from 1 to 10, can you guess which one?\")) while your_guess != number: if your_guess \u003c number: print(\"Your number was too low\") else: print(\"You number was to high\") your_guess = int(input(\"Please try again... \")) print(\"GG you found it\") Thats it for now Stay tuned for more If you enjoyed this article consider supporting me ","date":"2023-03-06","objectID":"/posts/python/:22:0","tags":["python"],"title":"Python for Complete Beginners","uri":"/posts/python/"},{"categories":null,"content":"What is PocketBase PocketBase is an open source backend made in go consisting of embedded database (SQLite) with realtime subscriptions, built-in auth management, convenient dashboard UI and simple REST-ish API. Install PocketBase The first thing that you will have to do is head to https://pocketbase.io and select the file for your operating system. Since I am using linux I will show how to set this up on linux but it should be pretty similar for any other os. Unzip the file and open up a terminal to the path that you extracted the file to and type: ./pocketbase serve If you want to serve some static content you can create a new directory called pb_public mkdir pb_public Then paste any content into that directory eg. \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eEpic Website\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eMy epic website\u003c/h1\u003e \u003c/body\u003e \u003c/html\u003e And save that as index.html inside of the pb_public folder Now if you head to http://127.0.0.1:8090/ you should see the website that we entered above. If you go to http://127.0.0.1:8090/_/ it will take you to an admin portal. There you should create a account. After you have setted up your account you should see something like this. Here you can add and create users And also create custom collections eg If you click on the settings icon you can see that you will be able to add applications, mail settings, file storage (s3) , export/import collections, add or remove auth providers, token options and add/remove admins. That’s it for now if you want to learn more check out https://pocketbase.io/docs/ If you enjoyed this article consider supporting me ","date":"2023-03-06","objectID":"/posts/pocketbase/:0:0","tags":["selfhosting","privacy"],"title":"PocketBase self-hosted Firebase alternative","uri":"/posts/pocketbase/"},{"categories":null,"content":"In this article I will tell you why monero fits my views of what a cryptocurrency should look like. What is monero? Monero is a decentralized cryptocurrency. It uses a public distributed ledger with privacy-enhancing technologies that obfuscate transactions to achieve anonymity and fungibility. Observers cannot decipher addresses trading monero, transaction amounts, address balances, or transaction histories. Monero works like any other currency but with some privacy and decentralization innovations. Monero uses stealth addresses. Alongside with ring signatures and ring ct's to “hide” the transaction and transaction amounts. To enhance transaction privacy. In order to decentralize the network further monero uses the RandomX algorithm in order to further discourage use of asics. The main problems with bitcoin and other cryptos Bitcoin may seem like a perfect currency. However under the hood bitcoin has many flaws. One of the main problems with bitcoin is that it isn’t actually censorship resistant. A central bank or government can blacklist your address and block exchanges from accepting it. While there are ways to get around that it isn’t easy. Monero on the other hand is censorship resistant as it doesn’t display transaction amounts or receivers. Another problem with bitcoin and other PoW currencies is that they are actually controlled by a small amount of people since they are really hard to mine among with many other factors. Monero is a relatively easy currency to mine and is ASIC resistant which makes it even more decentralized as anyone with a computer and an internet connection can start contributing to the network. Bitcoin has a block size limit which results in more expensive transactions and longer waiting time. Monero uses a dynamic block size Also bitcoin has a high block time which means that transactions take longer to be confirmed and executed. Bitcoins block time is ~10 minutes while monero's block time is ~2 minutes With bitcoin and many other cryptos halving occurs approximately every 4 years. This however is a double edged sword because not halving the rewards will result in constant inflation and infinity supply. On the other hand by halving rewards miners are less motivated to secure the network. Monero has chosen to keep the block rewards at a constant 0.6 xmr reward, thus securing that miners will keep on mining. This inflation however is very easily predicted. Like any other technology, right now monero is being used for illegal activity. Mostly because of its privacy additions. This haslead to a ~600k bounty by the irs (https://www.forbes.com/sites/kellyphillipserb/2020/09/14/irs-will-pay-up-to-625000-if-you-can-crack-monero-other-privacy-coins/) All of this activity is ofcourse free advertising for he project. Conclusion Monero is basicly what people think bitcoin is. Heres a great vid about it (https://www.youtube.com/watch?v=ak5TFr26BaE). Disclaimer Tech has nothing to do with price. This article reviews the tech of this project and thus not financial advice. Please DYOR when investing. Support me If you enjoyed this article consider supporting me: Monero: 8AztDJtwb7iKaqP4KXRG39VibAacCY1mMfH3bNsVjhYMYbohtT5LKoTSRP6vJGtjeBSPEpFdHZx3ZL3iVowYdkqeQwPAG2o ","date":"2023-03-06","objectID":"/posts/whymonero/:0:0","tags":["crypto","monero"],"title":"Why Monero is the ultimate form of a cryptocurrency","uri":"/posts/whymonero/"},{"categories":null,"content":"With ventoy, you don’t need to format the disk over and over, you just need to copy the ISO files to the USB drive and boot them directly. Whats ventoy? Ventoy is a free and open-source utility used for writing image files such as .iso, .wim, .img, .vhd(x), and .efi files onto storage media to create bootable USB flash drives. Once Ventoy is installed onto a USB drive, there is no need to reformat the disk to update it with new installation files; it is enough to copy the .iso to the USB drive and boot from them directly. Ventoy will present the user with a boot menu to select one of these files. Requirements a computer a internet connection (pretty hard without one) a usb (min 8gb) Installation Ventoy is available on both linux and windows. The first thing you will have to do is head to ventoy.net . On the download page select your operating system and click on download. On linux After you have extracted the file open the folder and click on the VentoyGUI . Depending on your processor type select the file ending in either aarch64 i386 mips64el or x86_64. (It will most probably be x86_64). After that you should see something like this: Select your device from the devices tab Then click on install. On windows Download the file and unzip it Then click on the file called Ventoy2Disk.exe You should see something like this Select your usb device from the drop down and click on install. Using ventoy To use ventoy all you have to do is paste your iso files inside of the usb. No formatting etc. GG you have now installed ventoy If you enjoyed this article consider supporting me ","date":"2023-03-06","objectID":"/posts/ventoy/:0:0","tags":null,"title":"Create a MultiBoot USB using ventoy","uri":"/posts/ventoy/"},{"categories":null,"content":"Whether you want to scan your network for vulnerabilities or just want to see which ports you have open, nmap can be extremely useful. What is nmap Nmap (Network Mapper) is a network scanner created by Gordon Lyon . Nmap sends packets and examines the answers to find hosts and services on a computer network. For probing computer networks, Nmap offers a variety of functionalities, including host discovery, service detection, and operating system detection. Scripts that offer more sophisticated service discovery, vulnerability detection, and other features can extend these features. During a scan, Nmap can adjust to changing network conditions, such as latency and congestion. Installation Nmap is available for linux, windows , mac os and even bsd If you are using linux you can install it using your package manager. On apt sudo apt install nmap On dnf sudo dnf install nmap With pacman sudo pacman -S nmap On windows you have to download the executable from the nmap website. https://nmap.org/download.html The same goes for mac and any other os Getting Started The first thing I will show you how to do is find all the ip addresses connected to your local network. The first thing you will have to do is find your inet ip On Linux type ip a On windows ipconfig You should see a lot of information, try to find inet. It should look something like this inet 192.168.1.28/24 and copy the ip Now type nmap -sn IP Instead of ip type the ip we found from above Now you should see a large list of all the ips connected to your network. -sn Flag -sn flag stands for no port scan Now we can also get all the ports open on all the ips on your local network To do that type nmap IP Instead of ip type the ip we found from above Now if you have any computers on your local networks with open ports you should see them now Eg. I have a ssh port open on one of my machines so I can see PORT STATE SERVICE 22/tcp open ssh If you are running a web server ports 80 and 443 should be open. Now lets say that you want to find out what operating system a specified device on your network is running. To do that type sudo nmap -O IP Sudo will not work on windows On windows run your terminal as administrator Eg. sudo nmap -O 192.168.1.16 In my case my device is running linux and you can even find out what kernel version your device is running PORT STATE SERVICE 22/tcp open ssh Device type: general purpose Running: Linux 2.6.X OS CPE: cpe:/o:linux:linux_kernel:2.6.32 OS details: Linux 2.6.32 Tip You can press enter while running a scan to see how much time is left Lets say that you dont want anyone monitoring a network be able to trace back the scan to you. For that we can use decoy mode To use decoy mode add -D followed by any random ip to any nmap command. eg sudo nmap -D 192.168.1.11 192.168.1.16 This will make it so that it looks like both your ip and 192.168.1.11 are performing a port scan on 192.168.1.16 You can also add multiple ips by adding commas eg sudo nmap -D 192.168.1.11,192.168.1.12 192.168.1.16 Thats all for now GG You have now learnt the basics of nmap If you enjoyed this article consider supporting me ","date":"2023-03-05","objectID":"/posts/nmap/:0:0","tags":["nmap","networking"],"title":"Nmap(Network Mapper) For Beginners","uri":"/posts/nmap/"},{"categories":null,"content":"Microsoft purchased GitHub in 2018, something many users are not aware of. After Microsoft’s acquisition of GitHub there have been many controversies like blocking private repositories and access to GitHub pages in certain countries and of course, GitHub Copilot. What is Github Copilot GitHub Copilot is an artificial intelligence tool developed by GitHub and OpenAI to assist users of Visual Studio Code, Visual Studio, Neovim, and JetBrains integrated development environments (IDEs) by autocompleting code. Currently available by subscription to individual developers, the tool was first announced by GitHub on 29 June 2021, and works best for users coding in Python, JavaScript, TypeScript, Ruby, and Go. How does copilot work? GitHub Copilot is powered by the OpenAI Codex, an artificial intelligence model created by OpenAI. The Generative Pre-trained Transformer 3 (GPT-3) language model, which uses deep learning to create text that resembles human speech, is improved and used in production as the OpenAI Codex. Github copilot was trained on a selection of the English language, public GitHub repositories, including 59 gigabytes of Python code sourced from 54 million public GitHub repositories. There still is a lot of controversy about whether GitHub should be allowed to do so, as most open source licences obviously don’t contain anything against analyzing your code with AI and selling it. Also, as AI is analyzing the code base it is not classified as derivative work which seems to be legal. However, it seems quite unethical by Microsoft as Copilot is a paid service that relies on analyzing other people’s code. Read more https://www.theverge.com/2021/7/7/22561180/github-copilot-legal-copyright-fair-use-public-code If copilot was free to use it would make a lot more sense as it utilizes FOSS(Free and open sourced software) in order to work. However with Microsoft’s decision to make copilot payed they are monetizing most off GitHub’s code base which is an illegal grey zone. Analyzing a huge amount of code without any security features has led to many problems like GitHub leaking phone numbers (I even encountered it while testing copilot out). https://github.com/community/community/discussions/9584?sort=top?sort=top #GitHubCopilot Recomending phone numbers#Github #coding pic.twitter.com/ssaA8GMQDq — 4rkal (@4rkal_) May 24, 2022 And other random things Congrats @davidcelis, you get a shout out if #GitHubCopilot tries to generate an \"About me page\" pic.twitter.com/cWBsPgjiuu — kyle 🦚 is inactive (@kylpeacock) July 1, 2021 Last but not least by using GitHub copilot you agree to the ToS which clearly states GitHub Copilot gives you certain choices about how it uses the data it collects. User engagement data, including pseudonymous identifiers and general usage data, is required for the use of GitHub Copilot and will continue to be collected, processed, and shared with Microsoft and OpenAI as you use GitHub Copilot. You can choose whether your code snippets are collected and retained by GitHub and further processed and shared with Microsoft and OpenAI by adjusting your user settings. Conclusion I personally don’t use or will ever use GitHub Copilot or recommend it to anyone for the following reasons: Doesn’t help you learn. Instead does the opposite. Recommends other peoples’ phone numbers, emails and even aws keys. No features have been implemented to stop this as far as I know. Tracks your usage and collects a lot of data. Like Source code that you are editing, related files and other files open in the same IDE or editor, URLs of repositories and files paths. Is paid and proprietary. (You pay to be tracked) Monetizes Open Source Software in an unethical way. Github CoPilot generates vulnerable code 40% of the time PS if you don’t want GitHub to legally index your code, you could try one of these licenses. They might work If you enjoyed this article consider supporting me ","date":"2023-03-05","objectID":"/posts/githubmon/:0:0","tags":null,"title":"How Microsoft is monetizing the GitHub code base","uri":"/posts/githubmon/"},{"categories":null,"content":"There are numerous benefits to running your own git server as opposed to Github . Your code cannot be used for profit . Additionally, nobody can delete your code base . Requirements A computer for your server (running linux preferably debian) An internet connection (pretty hard without one) A second computer with git installed Setup The first thing you will have to do is install git via your package manager If you are using apt sudo apt install git On dnf sudo dnf install git pacman sudo pacman -S git After that create a user called git sudo useradd git You will have to enter some information, you can leave everything except the password blank. Now login to your git user su git Now to make our server more secure we are going to use ssh keys. mkdir .ssh chmod 700 .ssh/ touch .ssh/authorized_keys chmod 600 .ssh/authorized_keys Now on the computer which you want to commit from you will have to generate a ssh key On your main machine type. My article on keybased auth ssh-keygen After that you will have to copy your ssh public key to the authorized_keys ssh-copy-id user@ip (To find out your ip you can type ifconfig) Now if you try to connect to your server you should be able to login without a password. ssh git@ip Now you will have to create the folder where all your git repos will be saved. I will save mine in ~/git , but you can save them wherever you want mkdir ~/git Now we have to give the ownership of the git folder to the git user chown git:git git Now for every repository you will have to create a folder. eg. mkdir ~/git/my_cool_project.git Now run cd ~/git/my_cool_project.git And initiate the git repository git init --bare Now you can create a couple of files inside of your project (to test it out). touch stuff.txt Now you can test if your repository is working by cloning the files from another machine running git. git clone git@ip:~/git/my_cool_project.git You will probably get warning: You appear to have cloned an empty repository. That is because you haven’t committed anything. git add . git commit -m \"first commit\" Now if you test that again it should work. GG you did it, you have now successfully set up your own git server If you enjoyed this article consider supporting me ","date":"2023-03-05","objectID":"/posts/git/:0:0","tags":["selfhosting"],"title":"Setup your own git server","uri":"/posts/git/"},{"categories":null,"content":"We rely on google more and more, but it’s interesting to know how much data Google is now handling. Alphabet aka Google describes its extensive data collection practices in its privacy policy. The company stores an astounding quantity of data. An estimated 15 exabytes of YOUR data are stored by Google. Google is tracking your every move. What is searX? Searx is a free and open-source metasearch engine, available under the GNU Affero General Public License version 3, with the aim of protecting the privacy of its users. In order to do this, Searx does not provide the search engines from which it receives results with users’ IP addresses or search histories. Tracking cookies served by the search engines are blocked, preventing user-profiling-based results modification. Users can run private instances of Searx on their own computer, but there are also many public, user-run, Searx instances. In this article i will show you how to run your own searX instance. What is a metasearch engine? A web search engine’s data is used by a metasearch engine, an online information retrieval tool, to create its own results. Metasearch engines automatically query search engines eg Google after receiving user input. The users are shown sufficient data that has been gathered, sorted, and presented. Requirements An computer (preferably running linux). Check out my article on how to install linux here https://4rkal.medium.com/install-a-debian-server-54add9133eec an internet connection Installing on windows To install on windows you will have to install wsl and follow the setup guide for linux bellow To see how to install wsl head to https://docs.microsoft.com/en-us/windows/wsl/install Installing on Linux (debian) First update your system sudo apt-get update \u0026\u0026 sudo apt-get upgrade Now install required packages sudo apt install -y python3-dev python3-babel python3-venv uwsgi uwsgi-plugin-python3 git build-essential libxslt-dev zlib1g-dev libffi-dev libssl-dev Now you will have to create a new user called searx sudo -H useradd --shell /bin/bash --system \\ --home-dir \"/usr/local/searx\" \\ --comment 'Privacy-respecting metasearch engine' searx sudo -H mkdir \"/usr/local/searx\" sudo -H chown -R \"searx:searx\" \"/usr/local/searx\" Now change user to searx git clone \"https://github.com/searx/searx.git\" \"/usr/local/searx/searx-src\"t Now create a virtual environment echo \". /usr/local/searx/searx-pyenv/bin/activate\" \u003e\u003e \"/usr/local/searx/.profile\" To install searx’s dependencies, exit the searx bash session you opened above and restart a new. Before install, first check if your virtualenv was sourced from the login (~/.profile): Update dependencies pip install -U pip pip install -U setuptools pip install -U wheel pip install -U pyyaml Jump to searx’s working tree and install searx into virtualenv cd \"/usr/local/searx/searx-src\" pip install -e . Now go back to your default user exit And type sudo -H mkdir -p \"/etc/searx\" Then sudo -H cp \"/usr/local/searx/searx-src/utils/templates/etc/searx/use_default_settings.yml\" \\ \"/etc/searx/settings.yml\" Now you can edit your settings file sudo nano /etc/searx/settings.yml You can change the secret_key I will change the port and bind_address but you can change whatever you want. Now log back in to your searx user sudo -H -u searx -i Change directory cd /usr/local/searx/searx-src Export the settings path export SEARX_SETTINGS_PATH=\"/etc/searx/settings.yml\" Finally run the web app python searx/webapp.py Now if you head to 127.0.0.1:8888 you should be able to see something like this GG you did it enjoy privacy (in search engines) If you enjoyed this article consider supporting me ","date":"2023-03-03","objectID":"/posts/searx/:0:0","tags":["selfhosting","privacy"],"title":"Host your own private search engine — searX","uri":"/posts/searx/"},{"categories":null,"content":"In this article we will talk about what tails is and how to install and more. What is tails? Tails, or The Amnesic Incognito Live System, is a security-focused Debian-based Linux distribution aimed at preserving privacy and anonymity.It connects to the Internet exclusively through the anonymity network Tor. The system is designed to be booted as a live DVD or live USB, and leaves no digital footprint on the machine unless explicitly told to do so. What is the tor network? Tor, short for The Onion Router, is free and open-source software for enabling anonymous communication. It directs Internet traffic through a free, worldwide, volunteer overlay network, consisting of more than six thousand relays,to conceal a user’s location and usage from anyone performing network surveillance or traffic analysis. Using Tor makes it more difficult to trace a user’s Internet activity. Who is tails intended for? As the tails website states (https://tails.boum.org/). Tails is intended for Activists who use Tails to hide their identities, avoid censorship, and communicate securely. Journalists and their sources use Tails to publish sensitive information and access the Internet from unsafe places. Domestic violence survivors use Tails to escape surveillance at home. You whenever you need extra privacy in this digital world. Requirements A computer (minimum of 2GB ram , 64-bit x86–64 compatible processor) A usb stick with 8GB+ of space Read more Read more https://tails.boum.org/doc/about/requirements/index.en.html Installation Warning Back up all your files USB files as they will get deleted. The first thing you will have to do is to head to https://tails.boum.org/install/index.en.html Now select your operating system Ill walk you through the installation for windows and linux. This should probably bethe same with linux After you have clicked on the windows logo you should be prompted with the requirements and a step by step guide. The first thing you will have to do is to download the tails usb image. After that i highly recommend that you verify your download Just click on select and select it. Now you will have to download balena etcher. Just click on download balena etcher and double click the installer. At this moment plug in your usb (if you have any important files on the usb you have to back the up or they will be lost) Now click the flash from file button and select the file you downloaded (it ends in .img) Click the Select target button to select your USB stick. And now select flash. This could take a while so just sit back and relax. Using tails After your installation is finished just reboot your computer and hit F12 or F2 depending on your computer. Now you should see a screen thats says something like please select your boot device. You will have to select your usb and hit enter Now you should see the grub loader Select Tails and hit enter Now you should be booted into tails You will probably see a screen that looks something like this Here you will have to set your language and region. We can also press on the + icon to add a admin password mac address anonymization etc. I will just put the admin password and the unsafe browser. You can select anything you want. However remember that changing some of these settings will make you less anonymous. Once you are ready select start tails Now you will see Here you can select anything you want. I will just select the first option. Now you should see this: GG you did it. One more step though I like to have a persistent volume so that i don’t lose all my files when i reboot. To do that open the configure persistent volume app and follow the steps there. That’s it for now If you enjoyed this article consider supporting me ","date":"2023-03-03","objectID":"/posts/tails/:0:0","tags":["tor","privacy"],"title":"Become anonymous and somewhat untraceable with tails os","uri":"/posts/tails/"},{"categories":null,"content":"Thanks so much! Heres a foto of a cute dog: Cute dog ","date":"2023-02-26","objectID":"/thanks/:0:0","tags":null,"title":"Thanks for clicking the link","uri":"/thanks/"},{"categories":null,"content":"Donate I spend quite a lot of time writing these articles so if you enjoyed any of them Ill happily accept any donations . You can donate some cryptos (btc, xmr, bch , erc20) Crypto Here are my crypto addresses: BTC: bc1qpzf7s0rj6sfjzsf43wwernrj6f97luxtyfvhg0 XMR: 8AztDJtwb7iKaqP4KXRG39VibAacCY1mMfH3bNsVjhYMYbohtT5LKoTSRP6vJGtjeBSPEpFdHZx3ZL3iVowYdkqeQwPAG2 XMR OpenAlias: xmr.4rkal.eu.org BCH: bitcoincash:qp2uc6ufuymjng5fg4lxslssxus0hqfkmyad98gla5 ERC20(ETH, MATIC etc) : 0x2A91a892ded237e09ff41e2d798D627C6C3B6fA0 LiberaPay You can donate any currency through libera pay heres the link https://liberapay.com/4rkal/ Buy me a coffee I do also have a buy me a coffee setup heres the link: https://www.buymeacoffee.com/support4rkal Exchange some crypto When you exchange crypto here I get a small comission. Or use my link https://trocador.app/?ref=VABs65VXR3 ","date":"2023-02-26","objectID":"/donate/:0:0","tags":null,"title":"Donate","uri":"/donate/"},{"categories":null,"content":"n this article i will show you how to setup pi-hole. Pi-Hole will allow you to block in app ads improve your networks performance and monitor statistics. Pi-hole also allows you to create a vpn. What is Pi-hole? Pi-hole is a Linux network-level advertisement and Internet tracker blocking application which acts as a DNS sinkhole and optionally a DHCP server, intended for use on a private network. It is designed for low-power embedded devices with network capability, such as the Raspberry Pi, but can be installed on any Linux machine. Pi-hole has the ability to block traditional website advertisements as well as advertisements in unconventional places, such as smart TVs and mobile operating system advertisements. Requirements A computer with linux (preferably something debian based) Preferably an ethernet cable Access to your routers admin portal A static ip An internet connection (its pretty difficult without one, trust me) Installation The first thing we have to do is download the installer To do that type wget -O basic-install.sh https://install.pi-hole.net Now install it with sudo bash basic-install.sh Now you should see something like this Just press ok Just press ok again As i said before you have to have a static ip in order to setup the pihole so if you have one configured just press yes Otherwise you will have to set one up. Now you will be prompted to select your upstream dns provider. You can select any of the dns providers on the list. I will just select google And press ok After that you will have to select your list. I will just select the default one Now you will have to select whether you want a web admin interface. Select on and then ok Now just select on and press ok After that you can select if you want to log queries. You can select any option you want. Now i recommend that you leave this as default but you don’t have to Now it should start installing everything After the installation is finished you should see something like this You have now successfully install pi-hole. You can head to the admin portal by going to the specified ip. To be able to use pi-hole you have 2 options Make the ip default dns for you hole network Manually add it on any device Ill go with the second option On windows: DNS settings are specified in the TCP/IP Properties window for the selected network connection. Go to the Control Panel Click Network and Internet \u003e Network and Sharing Center \u003e Change adapter settings Select the connection for which you want to configure Right-click Local Area Connection \u003e Properties Select the Networking tab Select Internet Protocol Version 4 (TCP/IPv4) or Internet Protocol Version 6 (TCP/IPv6) Click Properties Click Advanced Select the DNS tab Click OK Select Use the following DNS server addresses Replace those addresses with the IP addresses of your Pi Restart the connection you selected in step 3 Repeat the procedure for additional network connections you want to change. On Linux its a lot easier just: In most modern Linux distributions, DNS settings are configured through Network Manager. Click System \u003e Preferences \u003e Network Connections Select the connection for which you want to configure and press Edit Select the IPv4 Settings or IPv6 Settings tab If the selected method is Automatic (DHCP), open the dropdown and select Automatic (DHCP) addresses only instead. If the method is set to something else, do not change it. In the DNS servers field, enter your Pi’s IP addresses Click Apply to save the changes If you are not using network manager Then your DNS settings are specified in /etc/resolv.conf (source: pi-hole.net) Now if we head over to any websites with ads you should see that no ads appear Lets try speedtest.net If you have followed the steps correctly you should see something like this No ads! NO ADS Enjoy the ad free web If you enjoyed this article consider supporting me ","date":"2023-02-25","objectID":"/posts/pihole/:0:0","tags":["rpi","selfhosting"],"title":"Get ad free web with Pi-hole","uri":"/posts/pihole/"},{"categories":null,"content":"SSH keys provide an extremely secure way of logging into your server. SSH Password Based VS Key Based Authentication Clients can be authenticated by an SSH server in a variety of ways. The most basic is password authentication, which is simple to use but not particularly secure. The more advanced and secure way is via ssh keys.Brute-forcing a password-protected account is quite possible thanks to modern computing power and automated scripts. The solution to that is ssh key based authentication. How does Key Based Authentication work? SSH key pairs are two cryptographically secure keys that allow a client to connect to an SSH server. A public key and a private key make up each key pair.The client keeps the private key, which should be kept completely confidential. If the attacker has access to the private key, they will be able to enter into servers using the corresponding public key without requiring further authentication. A passphrase can be used to encrypt the key on disc as an extra precaution. The related public key can be freely shared without causing any harm. The public key can be used to encrypt communications that can only be decrypted with the private key. This attribute is used to verify the authenticity of the key pair. The public key is placed on a distant server that you wish to use SSH to access. The key is saved in a special file called /.ssh/authorized keys in the user account you’ll be login into. When a client uses SSH keys to authenticate, the server can check if the client has the private key. A shell session is started or the requested command is executed if the client can verify ownership of the private key. Setting up The first thing we will have to to do is generate an SSH key pair on your local computer. To do that type ssh-keygen You should see something like this Generating public/private rsa key pair. Enter file in which to save the key (/home/4rkal/.ssh/id_rsa): Enter passphrase (empty for no passphrase): If you want to you can enter a passphrase to encrypt the private key. After that your key should be generated. Now you will have to copy your public key to your server. To do that type ssh-copy-id username@host_ip (find your servers ip by typing ifconfig in your server) eg. `ssh-copy-id server@192.168.1.13' Try to ssh into your server by typing ssh username@host_ip You should be able to login into your server without the password. However, brute force attacks continue to threaten your server. Now we have to disable password based authentication. First login to your ssh server by typing ssh username@host_ip Now we have edit the ssh config sudo nano /etc/ssh/sshd_config You should see a large file that starts with # $OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $ At this point press cntrl w and search for PasswordAuthentication Uncomment the line that says #PasswordAuthentication yes And change it to PasswordAuthentication no Now press cntrl s to save and cntrl x to exit After that restart the ssh service with sudo service ssh restart Now try to ssh into your server from another machine or a vm and you should see something like this server@192.168.1.13: Permission denied (publickey) GG you have now secured your server If you enjoyed this article consider supporting me ","date":"2023-02-25","objectID":"/posts/sssh/:0:0","tags":["selfhosting","ssh"],"title":"Securing ssh with Key-Based authentication","uri":"/posts/sssh/"},{"categories":null,"content":"In this article i will be showing you how to host your “dark web” aka Tor website for free. What is Tor? Tor — short for the Onion Routing project — is an open-source privacy network that enables anonymous web browsing. The worldwide Tor computer network uses secure, encrypted protocols to ensure that users’ online privacy is protected. Tor users’ digital data and communications are shielded using a layered approach that resembles the nested layers of an onion. Why use Tor? Tor is useful for anyone who wants to keep their internet activities out of the hands of advertisers, ISPs, and websites. That includes people getting around censorship restrictions in their country, people looking to hide their IP address, or anyone else who doesn’t want their browsing habits linked to them. The Tor network may also host webpages that only other Tor users can view. In other words, you’ve entered the Dark Web, which consists of websites that aren’t indexed by the standard crawlers you use to look for products to purchase, and quiz answers etc . On the Dark Web, you can discover everything from free textbooks to drugs — and worse — as long as you know the secret URL that leads to these sites. Tor Websites Just like any other website, you will need to know the address of an onion service in order to connect to it. An onion address is a string of 56 mostly random letters and numbers, followed by “.onion”. Requirements A linux machine (debian preferably) An internet connection (pretty hard without one,trust me) Installation The first thing we will have to do is install Tor apt install tor Now we will have to enable tor hidden service(which is the website) for that type: sudo nano /etc/tor/torrc You should see a large configuration file, search for HiddenService You will have to uncoment: #HiddenServiceDir /var/lib/tor/hidden_service/ #HiddenServicePort 80 127.0.0.1:80 Now press cntrl s and then cntrl x to exit After that start the tor service by running sudo service tor start or sudo systemctl start tor Now we also have to install nginx to be able to run our website to do that type sudo apt install nginx Start the nginx service with the systemctl or service command Now we also have to install nginx to be able to run our website to do that type sudo cat /var/lib/tor/hidden_service/hostname You should see a address that looks something like this tiur7p652svsaemdewbsxnnkrj3b35ny2rx454od5wk5ivfqhijm2qd.onion Now open your tor browser and paste your address and press enter. You will most probably be greeted by the default nginx site. This page is easily customized, you can check out my article: here GG you did it you are now running a pretty anonymous website on the tor network. If you enjoyed this article consider supporting me ","date":"2023-02-25","objectID":"/posts/torhs/:0:0","tags":["tor","selfhosting"],"title":"Setup a tor website (hidden service)","uri":"/posts/torhs/"},{"categories":null,"content":"As the linuxfoundation states about 95% of cloud providers run kubernetes which is an open sourced solution, the Apache Web server powers millions of websites including netflix.com, spotify.com and more. Most of the Internets core functions are based on open source technology. But what is it and why is it so important? What is open sourced software? Open-source software is computer software that is distributed under a license that allows users to use, study, modify, and distribute the program and its source code to anyone and for any purpose. Open-source software may be created in a public, collaborative environment. Open-source software is a good example of open collaboration since it allows any skilled user to engage in development online. Certainly there’s a phenomenon around open source. You know free software will be a vibrant area. There will be a lot of neat things that get done there.” -Bill Gates Why open source? There are several advantages to using open-source software. Trust. One of the most important advantages is trust. As users can examine your code and make sure its not doing anything they don’t want it to. They are also able to change things they don’t like. Most cryptocurrency projects are open sourced to be able to develop trust with their community. dmonition type=tip title=“This is a tip” open=false \u003e}} Community A open source community allows more developers to build around the project . Bitcoin is the greatest example of such a community. As soon as bitcoin source code was published many utilities for bitcoin were made like wallets and more which would never have been made if bitcoin wasn’t open sourced. Transparency Anyone can read your source code and see if they want it to do what it is doing. That way your company gains a lot of trust. Talk is cheap show me the code Linus Torvalds Continuous evolution Your project will continue to be developed even if you give up on it. Again the greatest example for this kind of project is bitcoin. Even though the founder of bitcoin has vanished for more than 10 years, cryptocurrency technology is “changing” the world. Lower Development costs (For companies) You can reduce your costs by using open source software. You can save money on licensing and maintenance. The only costs you’d have to deal with are those for documentation, media, support etc. Controll With open source YOU are ultimately in controll. If you dont like something you can modify the source code to your liking. If you enjoyed this article consider supporting me ","date":"2023-02-25","objectID":"/posts/opensource/:0:0","tags":null,"title":"The importance of open source software","uri":"/posts/opensource/"},{"categories":null,"content":"In this article i will show you how to self host your own website securely. Requirements A computer or microcomputer to host the website The computer needs to run linux An internet connection (Its pretty hard without one, trust me) Lets get started! Installation The first thing that we will have to do is setup our nginx site. We first have to be root sudo su If you dont have sudo installed try: su - Now we will have to install nginx apt install nginx If you are using any other package manager install it using the package name nginx Now we will have to start the nginx service systemctl start nginx or service nginx start Lets find your ip with: ip a or ifconfig If you open a web browser and go to your ip you should see the default welcome to nginx site. Since we want to make our website as secure as possible we can hide the nginx version To do that type `sudo nano /etc/nginx/nginx.conf Now you should see the nginx configuration file. under http { ## # Basic Settings ## sendfile on; tcp_nopush on; types_hash_max_size 2048; # server_tokens off; uncomment server_tokens off; Now restart your nginx service systemctl restart nginx We can now enter our html files inside of /var/www/html To do that type: cd /usr/share/nginx/html and now we can create the index.html file nano index.html and paste/write your html code to index.html Now restart the nginx service again systemctl restart nginx Certbot Now we will install cerbot in order to get https To install certbot simply type apt install certbot python-certbot-nginx Now we will have to run certbot certbot --nginx Enter all the inf oand agree to the terms After that you will have to enter the name you would like to activate https for Just select the names After that select to redirect http to https Port forwarding There are a few ways to port forward. In this article we will use noip.com. Head over to noip.com to get started (Use my referal https://www.noip.com/?fpr=4rkal) Create an account and register a hostname After that we will have to build the noip client on our computer for that paste these commands to your terminal cd /usr/local/src wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz tar xzf noip-duc-linux.tar.gz cd noip-2.1.9–1 make make install When you run make install you will be prompted to answer some questions like your login information and the update interval In the update interval just set it to 30 Then if you don’t want to run something at a successful update type n if you do then type y. You will now also have to edit the nginx default settings to do that type `sudo nano /etc/nginx/sites-available/default Now you will have to change the server_name to the domain you registered at noip.com You can check if your configuration was successful by running nginx -t You can now restart the nginx service systemctl restart nginx Now if you head to your domain it should be working and ssl should be installed If you enjoyed this article consider supporting me ","date":"2023-02-25","objectID":"/posts/shwebsite/:0:0","tags":["selfhosting"],"title":"Self host your own website","uri":"/posts/shwebsite/"},{"categories":null,"content":"Writing a good readme file will help you stand out among the large crowd of developers who put their work on GitHub. The 8 simple steps: Project title Always include your project title in your readme file so people understand what your project is about. Project description It’s critical to write a solid description since people need to know what your project is about in order to participate in it. Installation guide This is a crucial step that quite a few developers forget. When you are working on advanced projects you always have to have an installation guide so that people are able to try the software out on their own computers thus allowing them to contribute to the project. Add credits If you are working with a team always remember to credit them with their GitHub username or maybe even their social media accounts. You should also credit anyone who contributes to the project. Add a license DUh Add badges Badges are not that crucial but will make your readme file look nicer How to contribute If your looking for contributors that can be pretty helpfull. API Refernce The reference documentation can be added to the README depending on the size of the project. If it’s small and simple enough, the reference docs can be put in the README. For medium to big applications, at the very least, give a link to the API reference documentation. If you enjoyed this article consider supporting me ","date":"2023-02-25","objectID":"/posts/wreadme/:0:0","tags":null,"title":"8 Steps for writing a good README file","uri":"/posts/wreadme/"},{"categories":null,"content":"In this article i will show you how to setup a raspberry pi security camera using motion. In the end of this article you will have a fully functioning security camera with a live feed and motion detection. Requirements Raspberry pi or any other computer Web cam Any kind of debian based distro installed on the pi/computer Setup In this article we will be using the motion package (https://motion-project.github.io/) To get started power on your raspberry pi and ssh into the machine or just connect it to a monitor and a keyboard. Also connect your web cam to the raspberry pi usb port. The first thing we will have to do is install motion, for that type the following command: apt install motion Now start motion with: systemctl start motion or service motion start Now we are going to change some of the default settings . To do that type: nano /etc/motion/motion.conf The first thing that we are going to change is webcontrol_localhost off This will enable us to access the stream from other computers. To view the stream run: motion If you get a permission denied error try running sudo motion If you got to http://YOUR_IP:8080 you should see a live feed of the web cam You can change the port under webcontrol_port in the config file eg. webcontrol_port 1234 If you only want the live stream port you can go to http://your_ip:8081 Again you can change that under stream_port. Now everything should be working fine. All motion detection files will be saved in /var/lib/motion You can also change loads of other settings. Here are my settings:https://pastebin.com/WGn0NfcW Read the documentation here: https://motion-project.github.io/motion_guide.html If you enjoyed this article consider supporting me ","date":"2023-02-25","objectID":"/posts/rpicamera/:0:0","tags":["rpi","selfhosting"],"title":"Raspberry pi security camera","uri":"/posts/rpicamera/"},{"categories":null,"content":"If you work in the IT industry, you’ve undoubtedly heard of ssh. But how does it work? SSH (secure shell) is a network protocol that allows two computers to connect securely over the internet. SSH uses encryption to prevent hackers from reading data sent between two connected devices. SSH is divided into three layers: The transport layer The connection layer The authentication layer During and after authentication, the transport layer establishes safe and secure communication between a client and a server. It is in charge of data encryption, decryption, and integrity assurance. It also provides data compression and caching, which helps to speed up data communication. The authentication layer informs the client about the available authentication methods. It’s also in charge of the whole user authentication procedure. After the authentication is successful, the connection layer oversees the communication between the machines. It manages communication channel opening and closure, as well as multiple channels for multiple sessions. Session Encryption The server sends the client a list of supported encryption protocols after receiving a connection request. The public key is used by the server as an authentication technique. The client compares the protocols to the ones it already knows. If there are two protocols that are compatible, the machines agree to use one of them to establish the connection. On the first connection attempt, the client compares the server’s public key to the private key saved in its system. If the keys are identical, the client and server agree to communicate using symmetric encryption during the SSH session. They communicate utilizing an asymmetrically encrypted mechanism based on the Diffie-Hellman (DH) key exchange algorithm for this purpose. There are different ciphers that can be used for SSH depending on the applications being used. Some of them include: CHACHA20 AES-GCM Blowfish-CBC AES128-CTR AES192-CTR AES256-CTR Arcfour Cast128-CBC Different Encryption Techniques SSH uses a variety of data manipulation techniques at various points in the transaction to ensure the security of information transmission. These include symmetrical and asymmetrical encryption, as well as hashing. Symmetrical Encryption Symmetric encryption creates a single key that is exchanged between two machines. The key is then used by the machines for both encryption and decryption. This approach is rapid and resource-light, and it is used by SSH for each session. When the client and server are deciding which algorithm to employ for an SSH session, the first algorithm on the client’s list that the server supports is always used. Asymmetrical Encryption Any party can have access to the public key. Although it is linked to its paired key, the private key cannot be deduced from the public key. The public key and private key have a mathematical relationship that allows the public key to encrypt messages that can only be decrypted by the private key. This is a one-way ability, which means that the public key cannot decode the communications it sends or decrypt anything the private key sends it. The private key should be kept completely confidential and never shared with anybody else. This is a necessary condition for the public key paradigm to function.The only component that can decrypt communications encrypted with the accompanying public key is the private key. Any entity capable of decrypting these messages has demonstrated control over the private key as a result of this fact. Hashing r key defining characteristics are that they are never supposed to be reversed, that they are nearly hard to predictably alter, and that they are practically unique. If you use the same hashing function and message, you should get the same hash; if you change any part of the data, you should get a completely different hash. A user should not be able to deduce the actual message from a hash, but they should be able to determine whether a message produce","date":"2023-02-25","objectID":"/posts/howsshworks/:0:0","tags":["ssh"],"title":"How SSH works","uri":"/posts/howsshworks/"},{"categories":null,"content":"Selenium is a very good skill to have as you can automate almost everything that you can do with a web browser. In this tutorial, we’ll learn how to use Python and Selenium to automate a web browser. This is an updated version of my previous article which unfortunately doesn’t work anymore. If you’re a complete beginner, read my python article to understand the basics. (https://4rkal.medium.com/f1df170bcc08/python-for-beginners) What is selenium? Selenium is an open source umbrella project for a range of tools and libraries aimed at supporting browser automation. You can use selenium in multiple programming languages including JavaScript (Node.js), C#, Groovy, Java, Perl, PHP, Python, Ruby and Scala and with multiple web browsers including firefox, internet explorer, safary, opera, chrome and edge. Selenium can be very useful for web scraping, automating boring and manual tasks and so much more. Setup To install selenium you first have to install a browser driver. Here is the list of supported web browsers : Firefox Internet Explorer? Safari Opera Chrome Edge In this article we will be using firefox geckodriver. But you can use any of the browser drivers above. Downloading geckodriver To get started go to github.com/mozilla/geckodriver/releases Scroll down and select the package for your computer. I’ll use geckodriver-v0.31.0-linux64.tar.gz because I’m using a linux 64-bit computer. Installing geckodriver The setup varies depending on your operating system. If you are using Arch Linux You can install geckodriver from the aur. Using your favourite aur helper On linux: Unzip the file Make the file executable chmod +x geckodriver Add the driver to your PATH so other tools can find it: export PATH=$PATH:/path-to-extracted-file/ On windows: Unzip the file Paste the file in the directory that your script will run Installing selenium To install selenium you have to have python and pip installed.Check out my article on python for more To install selenium open your cmd or terminal and type: pip install selenium That should install it.\\ Basics of selenium The first thing we have to do is to create a new file with the .py ending eg. main.py After you have created it open it in your ide or editor of choice.\\ The first thing that we have to do is to import the selenium webdriver : from selenium import webdriver After that we have to specify what webdriver we are using. In our case its firefox browser = webdriver.Firefox() Now we need to specify the url that we want it to go to eg python.org browser.get('https://python.org') The full code so far is:\\ import selenium from selenium import webdriver browser = webdriver.Firefox() browser.get('https://python.org') Now we might want it to click on the Downloads button There are a few ways to do this Method 1 of clicking a button The first is with XPATH To find the xpath of a button / object on a website you have to open your web browser go to the desired website and hit F12 to get the development tools. Now you should click on the select tool (See below) Inspect element Click on it and after that hover above the downloads button with your mouse and click it. After that you should see a bit of code getting highlighted. Right click on the bit of code and select Copy then select Xpath Now go back to the python file and type: driver.find_element(By.XPATH, 'XPATH_HERE') This will throw an error, to fix that error simply add this at the top of the file from selenium.webdriver.common.by import By Your code so far should look like this import selenium from selenium import webdriver from selenium.webdriver.common.by import By browser = webdriver.Firefox() browser.get('https://python.org') browser.find_element(By.XPATH, '/html/body/div/header/div/nav/ul/li[2]/a').click() Method 2 XPATH with text The second method is a bit simpler but not as reliable as the first as there might be many objects with the same name. To use this method type: browser.find_element(By.XPATH, \"//*[contains(text(), 'Downloads')]\").c","date":"2023-02-22","objectID":"/posts/selenium/:0:0","tags":["automation"],"title":"Automating your web browser with selenium","uri":"/posts/selenium/"},{"categories":null,"content":"Most people know that adding up 0.1 + 0.2 equals 0.3. However computers represent it as 0.30000000000000004 . Here is a screenshot of it in python3 0.1+0.2 in python Your first thought might be that this is just some kind of error. Well its not Why does this happen? Fractions can be represented precisely in the base 10 system (used by humans) if a prime factor of the base is used (10). 2 and 5 are the prime factors of 10. 1/2, 1/4, 1/5 (0.2), 1/8, and 1/10 (0.1) can be expressed precisely as a result of denominators use prime factors of 10. Whereas, 1/3, 1/6, and 1/7 are repeating decimals as a result of denominators use a prime factor of 3 or 7. On the other hand, fractions can be represented precisely in the base 2 (binary) system (used by computers) if a prime factor of the base is used. 2 is the only prime factor of 2. So 1/2, 1/4, 1/8 can all be expressed precisely because the denominators use prime factors of 2. Whereas 1/5 (0.2) or 1/10 (0.1) are repeating decimals. When you perform math on these repeating decimals, you end up with leftovers which carry over when you convert the computer’s base-2 (binary) number into a more human-readable base-10 representation. Read more 0.300.com: https://0.30000000000000004.com/ Wikipedia: https://en.wikipedia.org/wiki/Floating-point_arithmetic If you enjoyed this article consider supporting me ","date":"2023-02-21","objectID":"/posts/zeropointthree/:0:0","tags":null,"title":"Why computers can’t represent 0.3 accurately","uri":"/posts/zeropointthree/"}]
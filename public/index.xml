<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>4rkal</title>
    <link>https://4rkal.eu.org/</link>
    <description>Recent content on 4rkal</description>
    <image>
      <url>https://4rkal.eu.org/4rkal.png</url>
      <link>https://4rkal.eu.org/4rkal.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Aug 2024 17:15:57 +0300</lastBuildDate><atom:link href="https://4rkal.eu.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Obsidian &#43; Hugo blogging setup (Auto publishing with hotkeys)</title>
      <link>https://4rkal.eu.org/posts/obsidianhugo/</link>
      <pubDate>Tue, 13 Aug 2024 17:15:57 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/obsidianhugo/</guid>
      <description>In this post I go through how I have setup my Obsidian and Hugo blogging workflow. I use a single vault and auto publish my articles with hotkeys.</description>
      <content:encoded><![CDATA[<p>If you clicked on this article you post probably know what these two technologies are but if you don&rsquo;t here&rsquo;s a quick explanation:</p>
<h3 id="obsidian">Obsidian</h3>
<p><a href="https://obsidian.md">Obsidian</a> is a feature packed markdown editor. But it&rsquo;s not just a markdown editor. It&rsquo;s a way to manage knowledge. It&rsquo;s great for organizing your thoughts in a flexible, non-linear way.</p>
<p>Obsidian works on all platforms. So you can write articles from basically any platform.</p>
<p>I have been taking all of my notes in it for a couple of months now and it&rsquo;s amazing!</p>
<h3 id="hugo">Hugo</h3>
<p><a href="https://gohugo.io">Hugo</a> is a ultra fast static website generator made in golang. I have been using hugo for my blog for almost 2 years now. I recently switched the theme of my my blog. Read more about the change <a href="https://4rkal.eu.org/posts/newlook/">New Look, new start</a>.</p>
<h1 id="setup">Setup</h1>
<p>In this article I will not be showing how to setup these two technologies but merely how to get them to work together.</p>
<p>If you wan&rsquo;t to learn how I setup this whole blog using hugo read:
<a href="https://4rkal.eu.org/posts/thisblog?utm_source=internal&amp;utm_campaign=obsidianhugo">How I setup this blog for free (domain, hosting, ssl) Complete Guide</a></p>
<p>If you wan&rsquo;t a good guide on how to use obsidian read:
<a href="https://help.obsidian.md/Getting+started/Download+and+install+Obsidian">Getting started - obsidian.md</a></p>
<h1 id="goals">Goals</h1>
<p>My goals for the setup are:</p>
<ol>
<li>Using a single <a href="https://help.obsidian.md/Getting+started/Create+a+vault">obsidian vault</a></li>
<li>Have an easy to use <a href="https://help.obsidian.md/Plugins/Templates">obsidian template</a> that I can use for my blog posts.</li>
<li>Keep my personal vault folders private.</li>
<li>Have all markdown files in a <a href="https://github.com/4rkal/blog/">public github repository</a>, so that people can propose changes</li>
</ol>
<h1 id="existing-setup">Existing setup</h1>
<p>The way that my current work flow works is:</p>
<ol>
<li>Edit articles from the content folder.</li>
<li>Run hugo command.</li>
<li>Push to github.</li>
<li><a href="https://render.com">Render.com</a> automatically picks up the changes and serves them.</li>
</ol>
<h1 id="journey">Journey</h1>
<p><em>If you want to skip the journey part you can go straight to <a href="#the-sauce">The Sauce</a></em></p>
<p>I will be going through a couple of mistakes that I made while setting this up.</p>
<h3 id="mistake-1">Mistake #1</h3>
<p>The first idea that I had was to create a simple symlink (I use linux btw) that would link the two folders together.</p>
<p>Basically I have two folders:</p>
<pre tabindex="0"><code>blog/
vault/
</code></pre><p>The blog folder contains all the blog folders and the vault is my personal vault.</p>
<p>The symlink would link these folders</p>
<pre tabindex="0"><code>blog/content
vault/Blog
</code></pre><p>However <strong>the problem</strong> with a symlink is that the folder content is not visible in my git repo.
This means that people can not propose changes to any of my articles</p>
<h3 id="mistake-2">Mistake #2</h3>
<p>I wanted to have my folders synced. I tried writing a couple of bash scripts that automatically synced the two folders using a cronjob.
However having that constantly running the background is a waste of resources when I am not running.
Simply running the scripts via cli is just not that smooth.</p>
<h1 id="the-sauce">The Sauce</h1>
<p>Basically the way that I have set this up is I have two folders:</p>
<pre tabindex="0"><code>blog
vault
</code></pre><p>The blog folder contains all the necessary hugo files and also has a sub directory called content that houses all of the markdown blog files.</p>
<p>I created a new folder inside of my vault called Blog</p>
<pre tabindex="0"><code>blog/content
vault/Blog
</code></pre><p>After that I copied over all of my files from the content directory to the Blog.</p>
<p>I then started writing this very article</p>
<p>However I needed some way to setup a simple template to contain all of the required hugo front matter.</p>
<p>That is quite easy.</p>
<p>Read about how to setup templates <a href="https://help.obsidian.md/Plugins/Templates">Templates - obsidian.md</a></p>
<p>I created a file called <code>Blog Post</code> in my templates folder</p>
<p>My <code>Blog Post</code> template contains the following:</p>
<pre tabindex="0"><code>---
title: &#34;{{Title}}&#34;
description: 
date: &#34;{{date:YYYY-MM-DD}}T{{time:HH:mm:ss}}+00:00&#34;
draft: true
---


**If you enjoyed this article consider [supporting me](https://4rkal.eu.org/donate)**
</code></pre><p>I have all the required front matter including a title, description and a date in the format the hugo asks.</p>
<p>I also added a small donation text that I include at the bottom of every article so that it can be added automatically.</p>
<p>This means that I can automatically insert this template into any file and start writing!</p>
<h2 id="folder-syncing">Folder Syncing</h2>
<p>Now I want all of my files in my vault/Blog directory to be copied over to the blog/content</p>
<p>Thank&rsquo;s to a helpful discord user I found the <a href="https://github.com/Taitava/obsidian-shellcommands">obsidian-shellcommands</a> plugin.</p>
<p><strong>NOTE:</strong> this plugin does not currently work very well with the flatpak version of obsidian (since flatpak isolates the environment) . Using another alternative (.deb or appimage) seems to work.</p>
<p>It allows you to run shell commands in the background with a hotkey.</p>
<p>The steps to set this up are the following:</p>
<ol>
<li><a href="https://obsidian.md/plugins?search=shell%20commands">Install the plugin</a></li>
<li>Enable the plugin</li>
<li>Go to the plugin options</li>
<li>Click on <code>New shell command</code></li>
<li>Now you will need to enter a shell command to copy the files from the one folder to the other.</li>
</ol>
<p>On Linux/MacOS that is:</p>
<p><code>cp -a ~/folder1/. ~/folder2/</code></p>
<p>in my case that is <code>cp -a ~/Documents/vault/Blog/. ~/Documents/blog2/content/</code></p>
<p>On windows it most probably is:</p>
<p><code>robocopy &quot;%USERPROFILE%\folder1&quot; &quot;%USERPROFILE%\folder2&quot; /E /COPYALL</code></p>
<p>After that we need to set a hotkey that will run the command</p>
<p>Click on the (+) icon to go to the hotkey settings and assign a hotkey</p>
<p>My hotkey is <code>CTR + 0</code>, simply because that was available.</p>
<p>Now every time that I run the hotkey it copies over all of my files to the hugo folder ready to be published</p>
<h2 id="auto-publishing-scripts">Auto publishing scripts</h2>
<p>I also want to be able to automatically publish my articles. But I also want it to run as a hotkey.</p>
<p>I wrote a small script that does exactly that:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>cd ~/Documents/blog
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hugo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;new&#34;</span>
</span></span><span style="display:flex;"><span>git push -u origin main
</span></span></code></pre></div><p>This script will build my website, commit and push to my github repo, where it is picked up and published. Read <a href="https://4rkal.eu.org/posts/thisblog?utm_source=internal&amp;utm_campaign=obsidianhugo">How I setup this blog for free (domain, hosting, ssl) Complete Guide</a> to learn how to setup your own blog for free.</p>
<p>Don&rsquo;t forget to make the script executable by running</p>
<p><code>chmod +x ./script.sh</code></p>
<p>Then create a new shell command (as we did before) and enter the path to your script.</p>
<p>In my case that is:</p>
<p><code>~/Documents/blog2/push.sh</code></p>
<p>Then enter a hotkey and you&rsquo;re done!</p>
<h2 id="conclusion">Conclusion</h2>
<p>I can now simply open my obsidian vault, create a new file, insert my template and have all the info automatically entered.</p>
<p>I then write my article inside of obsidian</p>
<p>Run my hotkey and copy all the files into the hugo directory</p>
<p>Hit another key and my blog is published!</p>
<p><strong>If you enjoyed this article consider <a href="https://4rkal.eu.org/donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>New look, new start</title>
      <link>https://4rkal.eu.org/posts/newlook/</link>
      <pubDate>Sun, 11 Aug 2024 16:17:31 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/newlook/</guid>
      <description>I recently switched from the hugo LoveIt theme to PaperModX . Why the switch? The LoveIt theme hasn&amp;rsquo;t been updated in 2+ years. PaperModX has a more modern look LoveIt doesn&amp;rsquo;t work that well with obsidian. The overall switch went pretty smoothly. You can see the changes I made in this commit.
For anyone wondering this what the website used to look like
More articles to come! The theme wasn&amp;rsquo;t the only change that I made.</description>
      <content:encoded><![CDATA[<h4 id="i-recently-switched-from-the-hugo-loveithttpsgithubcomdillonzqloveit-theme-to-papermodxhttpsgithubcomreorxhugo-papermodx-">I recently switched from the hugo <a href="https://github.com/dillonzq/LoveIt">LoveIt</a> theme to <a href="https://github.com/reorx/hugo-PaperModX/">PaperModX</a> .</h4>
<h2 id="why-the-switch">Why the switch?</h2>
<ul>
<li>The LoveIt theme hasn&rsquo;t been updated in 2+ years.</li>
<li>PaperModX has a more modern look</li>
<li>LoveIt doesn&rsquo;t work that well with <a href="https://obsidian.md">obsidian</a>.</li>
</ul>
<p>The overall switch went pretty smoothly. You can see the changes I made in this <a href="https://github.com/4rkal/blog/commit/15e21c2f357f8d3a4e6ba11896d5369ec3ccb315">commit</a>.</p>
<p>For anyone wondering this what <a href="https://web.archive.org/web/20240615224820/https://4rkal.eu.org/">the website used to look like</a></p>
<h2 id="more-articles-to-come">More articles to come!</h2>
<p>The theme wasn&rsquo;t the only change that I made. After a pretty long break, I have decided to start publishing articles regularly again!</p>
<p>I will also start to update any outdated articles</p>
<p>So, stay tuned - There&rsquo;s more content to come!</p>
<p>Subscribe to my RSS feed to stay up to date <a href="../../index.xml">here</a></p>
<p>There&rsquo;s also going to be a mailing list soon™️</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ultimate Monero ColdStorage Guide (Feather X Anonero)</title>
      <link>https://4rkal.eu.org/posts/feathernero/</link>
      <pubDate>Thu, 14 Dec 2023 21:00:30 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/feathernero/</guid>
      <description>In this comprehensive guide, I will walk you through the process of easily setting up Monero cold storage using an old computer and your smartphone, using animated QR codes. No USB needed!</description>
      <content:encoded><![CDATA[<p>In this comprehensive guide, I will walk you through the process of easily setting up Monero cold storage using an old computer and your smartphone, using animated QR codes. No USB needed!</p>
<h2 id="requirements">Requirements</h2>
<ol>
<li>An old laptop/computer with a webcam (to be kept offline). Called <strong>offline</strong> or <strong>cold</strong> computer.</li>
<li>An android smartphone.</li>
<li>Your main computer</li>
</ol>
<h2 id="required-reads">Required reads</h2>
<p>Before starting this article you <strong>must</strong> read:</p>
<ol>
<li><a href="https://malvarma.org/before_we_start/what_things_mean.html">Key concepts</a></li>
<li><a href="https://monero.stackexchange.com/questions/2426/offline-transaction-signing-what-are-the-details">Monero offline transaction signing details</a></li>
</ol>
<h2 id="cold-computer-setup">Cold computer setup</h2>
<p>Your offline computer/laptop will be signing all of the transactions. It should always be kept offline i.e cold. It can not be used for other tasks.</p>
<p>I highly recommend that you use a linux distribution and NOT windows for cold storage. Linux is free and opensource. I highly recommend pepermintOS or MX linux as they are lightweight and pretty easy to setup.</p>
<p>I will not be guiding you on how to install [[linux]]. But here are some resourses to help you get started:</p>
<ul>
<li>
<p><a href="https://peppermintos.com/guide/downloading/">Installing PeperMintOS</a> &lt;&ndash;  somewhat 32 bit support, lightweight</p>
</li>
<li>
<p><a href="https://linuxmint-installation-guide.readthedocs.io/en/latest/install.html">Installing LinuxMint</a> &lt;&ndash; better for newer computers</p>
</li>
<li>
<p><a href="https://www.makeuseof.com/how-to-install-mx-linux/">Installing MX Linux</a> &lt;&ndash; 32 bit support, pretty lightweight</p>
</li>
</ul>
<h3 id="downloading--installing-necessary-software">Downloading &amp; Installing necessary software</h3>
<p>The first thing that we will need to do is download the required software.</p>
<p>We will need <a href="https://featherwallet.org">featherwallet</a></p>
<p>and that&rsquo;s about it.</p>
<h3 id="taking-the-device-offline">Taking the device offline</h3>
<p>It is highly recommended that you disable the wifi and bluetooth modules on your cold computer. This can be by physically detaching the wifi and bluetooth module or disabling it in the bios. The later is less secure if you&rsquo;re going full on <a href="https://i.imgur.com/p5h6STu.jpeg">tinfoilhat</a>.</p>
<p>Here&rsquo;s a guide on how to physically disable them from <a href="https://malvarma.org/cold_wallet/prepare_the_hardware.html">malvarma.org</a></p>
<p>A guide on how to disable it via BIOS can be found by searching your specific hardware on your <a href="https://searx.org/">favorite search engine</a>.</p>
<h3 id="computer-cold-wallet-setup">Computer cold wallet setup</h3>
<p>Now we will have to setup our wallet. Ensure that your device is completely <strong>offline</strong> and then open featherwallet.</p>
<ol>
<li>Click on <code>Create a new wallet</code>. Then click on <code>Next</code>. You will be presented with your seedphrase. <strong>Write it down!! on physical paper</strong>.</li>
<li>Select a name for your wallet and click <code>Next</code></li>
<li>Select a wallet password and click <code>Next</code>.</li>
<li>Now that the wallet is open in the bottom right corner there will be a dot. Click on it and select the offline box and then click <code>Disable all network connections (offline)</code></li>
</ol>
<h2 id="phone">Phone</h2>
<p>We will now be installing the anonero software. We will be using NERO from the ANON/NERO suite.</p>
<ol>
<li>
<p>Download and install fdroid. Apk can be downloaded from the <a href="https://fdroid.org">F-Droid website</a></p>
</li>
<li>
<p>Download and install orbot. Can be installed from google play store <a href="https://play.google.com/store/apps/details?id=org.torproject.android">here</a></p>
</li>
<li>
<p>Open orbot. Select <code>VPN Mode</code>, click on the onion logo that says <code>start</code></p>
</li>
<li>
<p>Open fdroid and in the settings scroll down and enable <code>Use Tor</code> option</p>
</li>
<li>
<p>Again in the settings that click on the repositories section and add the following:</p>
<p><code>http://anonero5wmhraxqsvzq2ncgptq6gq45qoto6fnkfwughfl4gbt44swad.onion/fdroid/repo?fingerprint=C5705FF724538F6925B6093517F53C6C6BB6CF82518ED40EB4B8CBBB87DC0D1D</code></p>
<p>Source: <a href="https://anonero.io">anonero.io</a></p>
</li>
<li>
<p>Click on  latest and then search for NERO</p>
</li>
<li>
<p>Click on install
That&rsquo;s it ; )</p>
</li>
</ol>
<h3 id="updating-nero">Updating NERO</h3>
<p>If you want to update NERO you will have to turn orbot on, open fdroid and refresh the updates tab</p>
<h3 id="nero-setup">NERO setup</h3>
<p>To set up NERO, follow these steps:</p>
<ol>
<li>
<p>Once NERO is successfully installed, open the application.</p>
</li>
<li>
<p>Click on <code>RESTORE WALLET</code> option and select <code>RESTORE FROM KEYS</code></p>
</li>
<li>
<p>Proceed to establish a node connection. You can find a lot of Monero nodes <a href="https://monero.fail">here</a>.</p>
<p>Random clearnet node:</p>
<ul>
<li><code>http://xmr.monopolymoney.eu:18089</code></li>
</ul>
<p>Random Tor node:</p>
<ul>
<li><code>http://xmrsalty4hg7lq5ci4kzc2xxcic57azapolbunmkiypnmr3wp7uvqnyd.onion:18089</code></li>
</ul>
</li>
</ol>
<p>Copy the node address into the node field. By default you shouldn&rsquo;t need a username or password</p>
<p>By default tor connectivity is enabled in NERO. You can disable it by going into the proxy settings and deleting everything.</p>
<ol start="4">
<li>Click on <code>Connect</code>. It will try connecting. If it fails check your internet connection or try another node</li>
</ol>
<h3 id="importing-view-only-wallet">Importing view-only wallet</h3>
<p>Now you will have to import your wallets <code>Primary address</code> , <code>Secret-View key</code> and <code>Restore height</code> into NERO. To import that info to nero:</p>
<p>On your offline computer open featherwallet and navigate to <code>Wallet</code> then <code>View-Only</code>. Enter your password and click on the <code>Show QR</code></p>
<p>Now in nero in the View only keys screen click on the square icon to scan the qr. Then scan the qr displayed by featherwallet. All the info should be filled in after scanning the qr code. Click <code>Next</code>.</p>
<p>Set a pin. After that your wallet should be imported into NERO.</p>
<h2 id="receiving-monero">Receiving monero</h2>
<p>To receive monero you can follow these steps</p>
<ol>
<li>Open NERO and enter your pin</li>
<li>Click on the receive tab (the one with the qr code icon)</li>
<li>Long hold on the address</li>
<li>Select one of the SubAddreses and click on the copy icon.</li>
<li>Transfer any amount of monero to that address.</li>
</ol>
<p>After 10 confirmations it should be spendable. Proceed to the next step.</p>
<h2 id="signing-transactions">Signing transactions</h2>
<p>Signing/Broadcasting transactions is easy with the NERO/Feather duo. No usbs are needed it is all done via animated QR codes.</p>
<p>To sign/broadcast a transaction follow these steps
On your phone:</p>
<ol>
<li>Open NERO and enter your pin</li>
<li>In the send tab enter the desired address and amount</li>
<li>Click on continue, you should now see an animated QR code.</li>
</ol>
<p>On your cold computer</p>
<ol>
<li>Open feather and enter your password</li>
<li>Click on <code>Tools</code> &gt; <code>Offline transaction signing</code>. You should now see your camera</li>
<li>Show your phone to the computers camera so that it can read the QR code.</li>
<li>After it has been picked up by your computer you should see a QR code displayed on your computers screen</li>
</ol>
<p>In NERO.</p>
<ol>
<li>Click on <code>SCAN KEY IMAGES</code></li>
<li>Scan the QR code from the computer&rsquo;s screen</li>
<li>Once it has been picked up you can see the <code>Address</code>, <code>Amount</code>, <code>Fee</code> and <code>Total</code>. Click on <code>confirm</code></li>
<li>You should now see the unsigned TX screen.</li>
</ol>
<p>In feather click on <code>Next</code>. Then scan the QR code displayed by NERO to your computer. Once the bar is at 100%, you should again see the <code>Address</code>, <code>Amount</code>, <code>Fee</code> and <code>Total</code>. If your ok with that click on SIGN.</p>
<p>In NERO</p>
<ol>
<li>Click on <code>SCAN SIGNED TX</code></li>
<li>Scan the QR displayed by feather wallet.</li>
<li>Click on <code>Yes</code>, once asked whether or not to broadcast transaction</li>
</ol>
<p>You have now sent the transaction.</p>
<p><strong>if this article helped you out consider <a href="../../donate/">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Easy monero cold storage</title>
      <link>https://4rkal.eu.org/posts/coldstorage/</link>
      <pubDate>Tue, 07 Nov 2023 18:03:15 +0200</pubDate>
      
      <guid>https://4rkal.eu.org/posts/coldstorage/</guid>
      <description>In this article I will show you how to &amp;ldquo;easily&amp;rdquo; generate a live archlinux usb with the monero gui pre-installed.
Requirements An arch[[linux]] install A usb Setup In this guide I will show you how to build a custom archlinux iso with monerogui installed. I will not be providing any pre-built images.
The first thing you will have to do is install archuseriso. You can install it from the aur using this command:</description>
      <content:encoded><![CDATA[<p>In this article I will show you how to &ldquo;easily&rdquo; generate a live archlinux usb with the monero gui pre-installed.</p>
<h2 id="requirements">Requirements</h2>
<ol>
<li>An arch[[linux]] install</li>
<li>A usb</li>
</ol>
<h2 id="setup">Setup</h2>
<p>In this guide I will show you how to build a custom archlinux iso with monerogui installed. I will not be providing any pre-built images.</p>
<p>The first thing you will have to do is install <a href="https://github.com/laurent85v/archuseriso">archuseriso</a>. You can install it from the aur using this command:</p>
<p><code>yay -S archuseriso</code></p>
<p>Now open a terminal and navigate to any directory. Then run the following command:</p>
<p><code>sudo aui-mkiso -m 'img' --add-pkg=monero-gui xfce --verbose</code></p>
<p>This will build a new gpt image with persistense, add the monero-gui package and use xfce as the default desktop. The &ndash;verbose flag is optional.</p>
<p>After that is finished building you can use your favourite image writter to write the image. I will be using dd
<code>sudo dd if=out/aui-xfce*.img of=/dev/CHANGEME</code></p>
<p>You will have to write that to your usb, so in /dev/CHANGEME just put your usb. You can find it by running <code>lsblk</code>
<strong>Don&rsquo;t be stupid</strong>
If you enter the wrong device this could lead to data loss. Be careful!</p>
<p>After the image is written you will have to boot to your usb.</p>
<p>First however it is recommended that you disconnect any ethernet/other cables plugged in so that it is trully offline.</p>
<p>You can also <a href="https://www.google.com/search?q=disable+wifi+and+bluetooth+bios">disable wifi and bluetooth from the bios</a> . &ldquo;Advanced&rdquo; users only don&rsquo;t be retarded</p>
<p>Now only plug in your usb drive and reboot into the usb. You will generaly have to press either F8,F9,F10,F11 upon booting and then select your usb.</p>
<p>Now you have two options</p>
<ol>
<li>Boot into persistent.</li>
<li>Boot into memory.</li>
</ol>
<p>When booting into persistent your files will be saved. This however does also involve your wallet file.</p>
<p>For the more secure option you can select boot into memory. This will delete all the traces of the wallet after reboot. You will have to write the seed down and manually enter it upon every boot if you want to authorize transactions.</p>
<p>I will boot into persistent since I will use a strong password and will keep the usb in a safe place. If you want to be extra paranoid use the second option.</p>
<p>After the os has fully booted you will have to click on the <code>Applications</code> icon &gt; internet &gt; <code>Monero GUI</code>. Alternatively open a terminal and type <code>monero-wallet-gui</code></p>
<p>You will now be greated by the monero gui setup guide.</p>
<p>Select your language etc.</p>
<p>Select advanced &gt; Click on <code>Create a new wallet</code> . You can select whatever you want in the wallet name and location &gt; Click next.</p>
<p>Now you will be prompted with your recovery phrase. Write it down on PHYSICAL PAPER and keep it in a safe place. Also note the height and or creation date.</p>
<p>Write it down!
If you don&rsquo;t write down your seed and keep it in a secure place you will lose access to your monero!</p>
<p>Then click next. Now select a strong password. Alteast 12 chars!. Remeber it!</p>
<p>Click next. Then click on <code>Connect to a remote node</code> but don&rsquo;t add one, we don&rsquo;t need it.</p>
<p>Then click on create wallet.</p>
<p>After you have opened your wallet, click on <code>settings</code> and then <code>Create view-only wallet</code>. Then click on ok. Logout of your wallet. Click on <code>Open wallet from file</code> and select the new file called WALLETNAME_viewonly.</p>
<p>Once you have logged into your view only wallet click on settings again and select <code>Show seeds and keys</code>. Scroll down to the botton and import your view only wallet via qr to your mobile wallet. Here are some guides for every wallet:</p>
<ul>
<li><a href="https://guides.cakewallet.com/docs/basic-features/restore-wallet-from-qr-code/">Cake wallet</a></li>
<li><a href="https://www.monerujo.io/resources/monerujo_manual.html">Monerujo</a></li>
</ul>
<h2 id="what-have-we-acomplished">What have we acomplished?</h2>
<p>You now have a cold wallet for offline signing on your usb and a view-only wallet on your phone. Basicly you can view all incoming transactions on your phone but can&rsquo;t spend them there. Only your computer booted into the usb can sign them.</p>
<h2 id="signing-transactions">Signing transactions</h2>
<p>I won&rsquo;t cover doing this in this article. But you can find out more about how to send transactions from cold storage <a href="https://monerodocs.org/cold-storage/offline-transaction-signing/">here</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>SSH Remote Access NO Port-Forwarding NO Cloudflare</title>
      <link>https://4rkal.eu.org/posts/onionssh/</link>
      <pubDate>Wed, 04 Oct 2023 19:17:04 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/onionssh/</guid>
      <description>In this article I will show you how I securely connect to my remote machines without having to configure port forwarding.
Requirements: A computer &amp;ldquo;server&amp;rdquo; (running linux) A internet connection Another computer to connect to your server (running linux) Why? If you want to access your server without portforwarding in a extremely secure fashion you will want to follow this tutorial. You will be connecting to the server via tor which will make it harder for anyone to find the url of the server and ill show you how to setup keybased auth for even more security!</description>
      <content:encoded><![CDATA[<p>In this article I will show you how I securely connect to my remote machines without having to configure port forwarding.</p>
<h2 id="requirements">Requirements:</h2>
<ol>
<li>A computer &ldquo;server&rdquo; (running linux)</li>
<li>A internet connection</li>
<li>Another computer to connect to your server (running linux)</li>
</ol>
<h2 id="why">Why?</h2>
<p>If you want to access your server without portforwarding in a extremely secure fashion you will want to follow this tutorial. You will be connecting to the server via tor which will make it harder for anyone to find the url of the server and ill show you how to setup keybased auth for even more security!</p>
<h2 id="setup">Setup</h2>
<p>You will have to install the following packages (ssh, tor)</p>
<p>On debian</p>
<p><code>sudo apt install openssh-client</code></p>
<p>On arch</p>
<p><code>sudo pacman -S openssh</code></p>
<p>After that enable the ssh service</p>
<p>Debian:</p>
<p><code>sudo systemctl enable ssh</code></p>
<p>Arch:</p>
<p><code>sudo systemctl enable sshd</code></p>
<p>If you want to check if this worked just use another computer and run</p>
<p><code>ssh USER@IP</code></p>
<p>for example I run</p>
<p><code>ssh arkal@192.168.1.69</code></p>
<p>After this you can enable KeyBased authentication for more security</p>
<p>Here is my article how to enable that :</p>
<p><a href="https://4rkal.eu.org/posts/sssh/">Enable keybased authentication</a></p>
<p>Now we need to install tor:</p>
<p>On debian</p>
<p><code>sudo apt install tor</code></p>
<p>On arch</p>
<p><code>sudo pacman -S tor</code></p>
<p>Then start and enable the tor service with</p>
<p><code>sudo systemctl start tor &amp;&amp; sudo systemctl enable tor</code></p>
<p>After you have done that you want to edit your torrc file. Using your favorite text editor</p>
<p><code>sudo vim /etc/tor/torrc</code></p>
<p>Now you will want to navigate to the part that says HiddenService. And paste the following</p>
<pre tabindex="0"><code>HiddenServiceDir /var/lib/tor/ssh/
HiddenServicePort 22 127.0.0.1:22
</code></pre><p>Save your file and exit the editor (for nano cntrl s, cntrl x)</p>
<p>Now you want will have to restart the tor service</p>
<p><code>sudo systemctl restart tor</code></p>
<p>After that run the following:</p>
<p><code>sudo cat /var/lib/tor/ssh/hostname</code></p>
<p>You should see a string of letters and characters ending in .onion </p>
<p>Now on your other machine:</p>
<h2 id="connecting-to-the-server">Connecting to the server</h2>
<p>On your main machine you will have to do the following:</p>
<p>Have ssh, tor, and socat installed</p>
<p>After you have installed them you will have to edit the ssh config</p>
<p><code>vim .ssh/config</code></p>
<p>And paste the following</p>
<pre tabindex="0"><code>Host NAME
 Hostname URL.onion
 User USER
 Port 22
 Proxycommand socat - SOCKS4A:127.0.0.1:%h:%p,socksport=9050
</code></pre><p>You will have to change the NAME, URL and USER. The user is the user you want to connect as to your server and the url is the url you that ends in .onion from above.</p>
<p>Now save the file and exit.</p>
<p>Now edit the torrc file. Using your favorite text editor:</p>
<p><code>vim /etc/tor/torrc</code></p>
<p>Find the line that says SOCKSPort and uncomment it</p>
<p><code>SOCKSPort 9050</code></p>
<p>Restart the tor service</p>
<p><code>systemctl restart tor</code></p>
<p>To connect to the server run the following command:</p>
<p><code>ssh NAME</code></p>
<p>With NAME being the name that you gave to the server in the config file.</p>
<p><strong>If this article helped you out consider <a href="https://4rkal.eu.org/donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How I setup this blog for free (domain, hosting, ssl) Complete Guide</title>
      <link>https://4rkal.eu.org/posts/thisblog/</link>
      <pubDate>Thu, 23 Mar 2023 18:13:03 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/thisblog/</guid>
      <description>In this article I’ll show you how I setup this blog completely for free. I’ll show you how to use hugo to write your blog, Cloudflare and eu.org for your domain and ssl, Render and github for the hosting and even how to get your blog on google.
What is hugo? Hugo is a fast and popular open-source static site generator used for creating static websites without requiring a database or dynamic components.</description>
      <content:encoded><![CDATA[<p>In this article I’ll show you how I setup this blog completely for free. I’ll show you how to use hugo to write your blog, Cloudflare and eu.org for your domain and ssl, Render and github for the hosting and even how to get your blog on google.</p>
<h1 id="what-is-hugo">What is hugo?</h1>
<p>Hugo is a fast and popular open-source static site generator used for creating static websites without requiring a database or dynamic components.</p>
<h1 id="hugo-setup">Hugo setup</h1>
<p>Download and install hugo</p>
<p>On debian type</p>
<p><code>sudo apt install hugo</code></p>
<p>On arch type</p>
<p><code>sudo pacman -S hugo</code></p>
<p>On fedora type</p>
<p><code>sudo dnf install hugo</code>
On windows:</p>
<p>Navigate to <a href="https://github.com/gohugoio/hugo/releases/latest">https://github.com/gohugoio/hugo/releases/latest</a></p>
<p>Find the windows version and download it.</p>
<p>Unzip the file to your desired directory</p>
<p>Add this directory to the PATH environment variable</p>
<p>Read more: <a href="https://gohugo.io/installation/windows/">https://gohugo.io/installation/windows/</a></p>
<h1 id="creating-the-hugo-site">Creating the hugo site</h1>
<p>Open up a terminal and type:</p>
<p><code>hugo new site my_website</code></p>
<p>And then cd into that directory</p>
<p><code>cd my_website</code></p>
<p>After that we will have to install a theme. I will be using the LoveIt theme but you can use any other theme</p>
<p>All hugo themes
<a href="https://themes.gohugo.io/">https://themes.gohugo.io/</a></p>
<p><strong>NOTE: I now use a completely different theme <a href="https://4rkal.eu.org/posts/newlook/">New look, new start</a></strong></p>
<p>For the LoveIt theme:</p>
<p>The first thing we will have to do is type</p>
<p><code>git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt</code></p>
<p>You will have to have git installed if you don’t, follow the instructions on the page to download it.</p>
<p>Now we will have to create some basic configuration. Every theme has its own so you should first check your themes documentation. Some basic settings work for all themes.</p>
<p>Here is an example of the most basic settings for the LoveIt theme. (it has to be saved in config.toml)</p>
<pre tabindex="0"><code>baseURL = &#34;http://example.org/&#34;

# Change the default theme to be use when building the site with Hugo
theme = &#34;LoveIt&#34;

# website title
title = &#34;My New Hugo Site&#34;

# language code [&#34;en&#34;, &#34;zh-CN&#34;, &#34;fr&#34;, &#34;pl&#34;, ...]
languageCode = &#34;en&#34;
# language name [&#34;English&#34;, &#34;简体中文&#34;, &#34;Français&#34;, &#34;Polski&#34;, ...]
languageName = &#34;English&#34;

# Author config
[author]
  name = &#34;xxxx&#34;
  email = &#34;&#34;
  link = &#34;&#34;

# Menu config
[menu]
  [[menu.main]]
    weight = 1
    identifier = &#34;posts&#34;
    # you can add extra information before the name (HTML format is supported), such as icons
    pre = &#34;&#34;
    # you can add extra information after the name (HTML format is supported), such as icons
    post = &#34;&#34;
    name = &#34;Posts&#34;
    url = &#34;/posts/&#34;
    # title will be shown when you hover on this menu link
    title = &#34;&#34;
  [[menu.main]]
    weight = 2
    identifier = &#34;tags&#34;
    pre = &#34;&#34;
    post = &#34;&#34;
    name = &#34;Tags&#34;
    url = &#34;/tags/&#34;
    title = &#34;&#34;
  [[menu.main]]
    weight = 3
    identifier = &#34;categories&#34;
    pre = &#34;&#34;
    post = &#34;&#34;
    name = &#34;Categories&#34;
    url = &#34;/categories/&#34;
    title = &#34;&#34;

# Markup related configuration in Hugo
[markup]
  # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting)
  [markup.highlight]
    # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158)
    noClasses = false
</code></pre><p>You can find my configuration <a href="https://github.com/4rkal/blog/blob/main/config.toml">here</a></p>
<p>You can view your page live by running</p>
<p><code>hugo serve</code></p>
<p>Let’s move on to the next step.</p>
<h1 id="adding-articles-to-our-blog">Adding articles to our blog</h1>
<p>The first thing we will have to do is create a new file with any name ending in .md inside of our content folder. I like to separate my posts from other sections so I will create another folder inside of the content one called posts.</p>
<p>You can run this command to add the file</p>
<p><code>hugo new posts/first_post.md</code></p>
<p>Now open the file that was just created using your favorite text editor.</p>
<p>You should see something like this:</p>
<pre tabindex="0"><code>---
title: &#34;Epic title&#34;
date: 2023-03-23T18:13:03+03:00
draft: true
---
</code></pre><p>If you want the post to be publicly visible on your blog delete the draft line. or set it to false.</p>
<p>Now if we want to add some content we will have to write it in markdown. Heres a great guide on some basic markdown syntax <a href="https://hugoloveit.com/basic-markdown-syntax/">https://hugoloveit.com/basic-markdown-syntax/</a></p>
<p>Heres an example of some content</p>
<pre tabindex="0"><code>---
title: &#34;My First Post&#34;
date: 2023-03-23T18:13:03+03:00
draft: false
---

# Welcome to my blog!

This is my first post. Here&#39;s a picture of my cat:

![My cat](/images/cat.jpg)
</code></pre><p>Using the above steps you can add all of your articles to the blog.</p>
<p>Now that we are done with that let me show you how we will publish our blog.</p>
<h1 id="domain">Domain</h1>
<p>More like a sub-domain. Head to eu.org and get a free domain. Create an account and submit a request for a new domain. It might take some time even months to get accepted.</p>
<p>I have already registered 4rkal.eu.org from there.</p>
<p>Now we will have to get some ssl certificates using cloudflare.</p>
<p>SSL certificates just make your site use https instead of http this is really great for seo and doesn’t make your site look sus.</p>
<p>Head over to cloudflare.com and create an account for free.</p>
<p>After you are done with that go to your dashboard and select websites and then add a site.</p>
<p>You should see something like this</p>
<p><img loading="lazy" src="/../assets/cloudflare.webp" type="" alt=""  /></p>
<p>Enter your websites url and click on add site.</p>
<p>After that select the free plan and continue.</p>
<p>Now it will review your dns records. Just select continue and confirm</p>
<p>Now you will have to change your domain’s name servers.</p>
<p>To do that head back to eu.org select your domain and click on the nameservers tab and select server names.</p>
<p>Now in the input fields enter the name servers.</p>
<p>The name servers will most probably be:</p>
<pre tabindex="0"><code>nancy.ns.cloudflare.com
uriah.ns.cloudflare.com
</code></pre><p>Here’s how it should probably look:</p>
<p><img loading="lazy" src="/../assets/euorg.webp" type="" alt=""  /></p>
<p>Now click on the submit button.</p>
<p>You should probably get</p>
<pre tabindex="0"><code>No error, applying changes...

Done
</code></pre><p>If you get an error you probably screwed up one of the above steps. Just try again.</p>
<p>After your name servers have been changed and everything is done, in your domain dashboard select SSL/TLS. Just select full encryption.</p>
<h1 id="hosting-our-site">Hosting our site.</h1>
<p>First create a github account. Head to github.com for that. You will also have to install <a href="https://git-scm.com/">git</a></p>
<p>After you have done that navigate to your blog’s root directory and type:</p>
<pre tabindex="0"><code>git init
hugo
git add .
git commit -m &#34;first commmit&#34;
git branch -M main
</code></pre><p>Now go to github and create a new repository.</p>
<p>You should now type:</p>
<p><code>git remote add origin YOURURL</code></p>
<p>instead of YOURURL enter the url to your github repo and add a .git ending</p>
<p>eg</p>
<p><code>git remote add origin https://github.com/4rkal/blog.git</code></p>
<p>Now push the changes with</p>
<p><code>git push -u origin main</code></p>
<p>After that if you refresh the page of your github repo you should see everything there.</p>
<p>Now head to <a href="render.com">render.com</a> and create an account</p>
<p>On your dashboard select +New and then static site.</p>
<p>Now you will be prompted to connect a github repository. Just connect your account and add that repository.</p>
<p>eg</p>
<p><img loading="lazy" src="/../assets/render.webp" type="" alt=""  /></p>
<p>Now enter a service name eg myblog and in the publish directory just add</p>
<p><code>public</code></p>
<p>Then click on create static site.</p>
<p>After it has been deployed successfully head over to the settings and in the custom domains tab click on add custom domain.</p>
<p>In the field enter the domain that we registered with eu.org previously.</p>
<p>Now go to cloudflare and in your domain dashboard select dns and click on add a new record.</p>
<p>In the type dropdown select CNAME in the name field add @ and in the target add your blog’s url from render. Mine is <a href="https://blog-ygtj.onrender.com/">https://blog-ygtj.onrender.com/</a>. Also untick the proxy status.</p>
<p>Now we will have to do the same but with the www.</p>
<p>Just do the same steps as above but instead of @ just add <code>www</code></p>
<p>That’s it. After a couple of minutes your blog should be live.</p>
<h1 id="seo-google-and-bing">SEO Google and bing</h1>
<p>If you want to get your website on google and bing it’s pretty easy</p>
<p>If you want to get your website on google follow the guide listed here
<a href="https://developers.google.com/search">https://developers.google.com/search</a></p>
<p>For bing it should be pretty much the same process on <a href="https://www.bing.com/webmasters/">https://www.bing.com/webmasters/</a></p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python for Complete Beginners</title>
      <link>https://4rkal.eu.org/posts/python/</link>
      <pubDate>Mon, 06 Mar 2023 20:52:42 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/python/</guid>
      <description>Why you should use Python. Going over the basics of Python.
In this course/article I will be talking about why someone should use Python. Later on, I will be tackling the basics of Python. But let&amp;rsquo;s start by explaining what coding is.
What is coding? Coding means writing instructions for computers and a finished set of instructions is known as a program. Computer programs control everything from smartphones to space rockets.</description>
      <content:encoded><![CDATA[<p>Why you should use Python. Going over the basics of Python.</p>
<p>In this course/article I will be talking about why someone should use Python. Later on, I will be tackling the basics of Python. But let&rsquo;s start by explaining what coding is.</p>
<h2 id="what-is-coding">What is coding?</h2>
<p>Coding means writing instructions for computers and a finished set of instructions is known as a program. Computer programs control everything from smartphones to space rockets.</p>
<h2 id="what-is-python">What is Python?</h2>
<p>Python is a text-based computer language which means it’s made up of words and symbols (such as * and = ). Its language elements and object-oriented approach are meant to assist programmers in writing clear, logical code for both small and large-scale projects.</p>
<h2 id="why-python">Why Python?</h2>
<p>Python is one of the most popular computer languages and it’s very concise — that is, you don&rsquo;t need to type much in order to create programs that do a lot.</p>
<h2 id="advantages-of-python">Advantages of python</h2>
<ol>
<li>Simple to read, learn, and write</li>
</ol>
<p>Python is a high-level programming language with a syntax that is similar to English. This makes the code easier to read and comprehend.</p>
<p>Python is really simple to pick up and understand, which is why many people suggest it to newcomers. When compared to other prominent languages like C/C++ and Java, you require fewer lines of code to accomplish the same purpose.</p>
<ol start="2">
<li>Improved Productivity</li>
</ol>
<p>Python is an extremely useful programming language. Python’s simplicity allows developers to concentrate on solving the problem.</p>
<p>They don’t need to spend a lot of time learning the programming language’s syntax or behaviour. You write less code and accomplish more.</p>
<ol start="3">
<li>Free and Open-Source</li>
</ol>
<p>Python comes under the OSI-approved open-source license. As a result, it is both free to use and distribute. You can get the source code, change it, and even share your own Python version.</p>
<ol start="4">
<li>Portability</li>
</ol>
<p>In many languages like C/C++, you need to change your code to run the program on different platforms. With Python, however, this is not the case. You only have to write it once and it may be used wherever.</p>
<h2 id="downloading-python">Downloading Python</h2>
<p><strong>On Linux</strong>
You probably already know how to install it but I&rsquo;m gonna show it anyways.</p>
<p>Open your terminal and type python or python3; if it does not work then run: (depending on your distro)
<code>sudo apt install python3</code></p>
<p><strong>Windows 10</strong>
1 . First check if you already have Python installed. Go to the ‘Start’ menu and click on the ‘All programs’. If you see the word “Python” it means that you already have it installed. If you don&rsquo;t already have it installed go to <a href="https://python.org">https://python.org</a>, download the correct version for your computer and then install it.</p>
<ol start="2">
<li>Python comes in different versions. This course uses version 3 and upwards. I recommend always installing the latest version.</li>
</ol>
<h2 id="what-is-an-ide">What is an IDE?</h2>
<p>IDE stands for the integrated development environment (IDE) and is software for building applications that combine common developer tools into a single Graphical User Interface (GUI).</p>
<p>The IDE that we will be using in this series is called VS Code.</p>
<h2 id="downloading-vs-code">Downloading VS Code</h2>
<p>Go to <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> and download the version that you want. Vs Code is available for Windows, Mac, and Linux. Follow the instructions on the website for installation.</p>
<h2 id="starting-in-python">Starting in Python</h2>
<p>It&rsquo;s traditional in the programming world to make the computer say ‘Hello World’ with your very first piece of code. In Python, this is very simple.</p>
<ol>
<li>Open Vs Code and click on File &gt; New File and name your file helloworld.py. The .py tells the computer that this is a Python program.</li>
<li>In your project, in VS Code type :
<code>print(&quot;Hello World!&quot;)</code></li>
<li>Save your project and click on the run button at the top of your screen</li>
<li>If you have done everything correctly you should see a Hello World message in your terminal.</li>
</ol>
<p>If it didn&rsquo;t work you should get a red error message something like this:</p>
<p><code>SyntaxError: invalid syntax</code></p>
<p>If that happens make sure that you have copied it exactly like above.</p>
<h2 id="playing-with-numbers-in-python">Playing With numbers in Python</h2>
<p>Python makes it easy to do maths. You just type in a question and get the answer</p>
<p><strong>Adding Up</strong></p>
<p>Open an empty project and type:</p>
<p><code>print(2+2)</code></p>
<p>You should see the answer:
<code>4</code></p>
<p><strong>Subtracting(and more)</strong>
If you want to subtract, use the ‘-’ symbol like this:</p>
<p><code>print(2 - 2)</code></p>
<p>To multiply use the ‘*’ symbol:</p>
<p><code>print(2 * 2)</code></p>
<p>To divide, use the ‘/’ symbol</p>
<p><code>print(2 / 2)</code></p>
<h2 id="variables">Variables</h2>
<p>A variable is like a labelled box that stores information. You can change this information but the label stays the same.</p>
<h2 id="creating-a-variable">Creating a variable:</h2>
<p>To tell the computer what you want your variable to be, you use the = sign. This is called assigning a value to a variable. It’s very simple, here&rsquo;s an example using fish.</p>
<ol>
<li>Open a new VS Code project and type:
<code>fish = 5</code></li>
</ol>
<p>Imagine a cat gets hungry and eats two fish. To create another variable for the amount eaten, write the following:</p>
<p><code>fishEaten = 2</code></p>
<p>Press enter and then type:</p>
<p><code>print(fish - fishEaten)</code></p>
<p>Save and run your code and you should get the answer:
<code>3</code></p>
<h2 id="input-in-python">Input in Python</h2>
<p>You can use the input() function to ask for information from the user.</p>
<ol>
<li>Open a new VS Code project and type:</li>
</ol>
<p><code>name = input(&quot;What is your name? &quot;)</code></p>
<ol start="2">
<li>Run the program and you should get the following message:</li>
</ol>
<p><code>What is your name? </code>
3. Now let&rsquo;s try printing your name.</p>
<p>Add the following to your program:</p>
<p><code>print(name)</code></p>
<p>You have successfully created an input field!</p>
<p>This can be very useful in creating decision games.</p>
<h2 id="making-decisions">Making Decisions</h2>
<p>To write a program that allows you to make decisions the computer needs to react differently to different answers. For this, you need conditions to compare pieces of information, and conditionals to create different paths through the program.</p>
<h2 id="what-are-conditions">What are Conditions?</h2>
<p>A condition is a bit of code that compares two pieces of information. Conditions use operators to make these comparisons. For example, the operator == checks if two pieces of information are the same.</p>
<ol>
<li>Open a new Vs Code project and type:</li>
</ol>
<pre tabindex="0"><code>age = 10
if age == 12:
 print(&#34;True&#34;)
else:
 print(&#34;False&#34;)
</code></pre><ol start="2">
<li>Save and run and you should get False</li>
</ol>
<p>That is because ‘age’ is set to 10 and not 12</p>
<h2 id="what-are-conditionals">What are conditionals</h2>
<p>To use a condition in your code you need a command called a condition. Conditionals use conditions. Conditions show if something is True or False.</p>
<h2 id="if">IF</h2>
<p>One important condition is known as an if statement which tests whether a condition is true. If it is, the computer will follow the instructions after the if statement. If not, the computer will just skip it. In Python, if is a keyword. Dont use it as a variable name because the computer will think that it&rsquo;s an if statement and get confused.</p>
<h2 id="implementing-the-if-condition">Implementing the if condition</h2>
<ol>
<li>Create a new VS Code project and type the following:</li>
</ol>
<p><code>user_reply = (&quot;Do you like python? (Type yes or no) &quot;)</code></p>
<ol start="2">
<li>Then we will implement the if condition by typing the following:</li>
</ol>
<pre tabindex="0"><code>if user_reply == &#34;yes&#34;
   print(&#34;Python likes you to ! &#34;)
</code></pre><h2 id="elif">ELIF</h2>
<p>elif is short for else if. If the conditions of the if code isn’t met it “sweeps up” whatever is left.</p>
<ol start="3">
<li>Now type the following:</li>
</ol>
<pre tabindex="0"><code>elif user_reply == &#34;maybe&#34;:
  print(&#34;Make up your mind!&#34;)
</code></pre><h2 id="else">ELSE</h2>
<p>When conditions for the if and elif code arent met, else goes into action and “sweeps up” whatever is left.</p>
<p>Let&rsquo;s implement that:
4. Now type the following:</p>
<pre tabindex="0"><code>else:
  print(&#34;Well python doesn&#39;t like you either&#34;)
</code></pre><p>The complete code should look something like this:</p>
<pre tabindex="0"><code>user_reply = (&#34;Do you like python? (Type yes or no) &#34;)
if user_reply == &#34;yes&#34;
   print(&#34;Python likes you to ! &#34;)
elif user_reply == &#34;maybe&#34;:
  print(&#34;Make up your mind!&#34;)
else:
  print(&#34;Well python doesn&#39;t like you either&#34;)
</code></pre><p><strong>Don&rsquo;t forget to press the tab after if statements.</strong></p>
<h2 id="randomness-in-python">Randomness in python</h2>
<p>In python we can use the random function in order to generate random numbers. This can be extremely useful in a variety of things.</p>
<p>The first thing we will have to do is import the random function</p>
<p><code>import random</code></p>
<p>After that we can print out a random number with the following</p>
<p><code>print(random.randint(1,10))</code></p>
<p>This will output a random number from 1–10</p>
<p>randint stands for random integer.</p>
<p>Here is the full code.</p>
<pre tabindex="0"><code>import random
print(random.randint(1,10))
</code></pre><h2 id="loops-in-python">Loops in python</h2>
<p>There are two types of loops in python</p>
<ol>
<li>While loop</li>
<li>For loop</li>
</ol>
<p>While loops only stop when something changes. If it doesn&rsquo;t change they could go on forever.</p>
<p>With for loops on the other hand you can define exactly when you want them to stop</p>
<p>The most popular example of a while loop is</p>
<p><code>while True:</code></p>
<p>Which will run forever eg</p>
<pre tabindex="0"><code>while True:
    print(&#34;hi&#34;)
</code></pre><p>This will run forever.</p>
<p>With while loops on the other hand you can define exactly how many times you want the loop to run.</p>
<pre tabindex="0"><code>for x in range(0,10):
   print(&#34;Hi&#34;)
</code></pre><p>This will print Hi exactly 10 times</p>
<h2 id="guessing-game">Guessing game</h2>
<p>Now lets combine what learned from above and from our previous articles to create a game</p>
<p>The computer will select a random number from 1–10 and you will have to guess it.</p>
<p>The first thing we will have to do is</p>
<p><code>import random</code></p>
<p>After that we will create a variable called number</p>
<p><code>number = random.randint(1,10)</code></p>
<p>After that we will create another variable called your_guess</p>
<p><code>your_guess = int(input(&quot;Im thinking of a number from 1 to 10, can you guess which one?&quot;))</code></p>
<p>We are using int as you will have to enter a number</p>
<p>Now we will create a while loop that will keep the game running until you guess the number</p>
<p><code>while your_guess != number:</code></p>
<p>The code so far is</p>
<pre tabindex="0"><code>import random
number = random.randint(1,10)
your_guess = int(input(&#34;Im thinking of a number from 1 to 10, can you guess which one?&#34;))
while your_guess != number:
    if your_guess &lt; number:
        print(&#34;Your number was too low&#34;)
    else:
        print(&#34;You number was to high&#34;)
</code></pre><p>And the following</p>
<p><code>print(&quot;GG you found it&quot;)</code></p>
<p>You code should now look like this</p>
<pre tabindex="0"><code>import random
number = random.randint(1,10)
your_guess = int(input(&#34;Im thinking of a number from 1 to 10, can you guess which one?&#34;))
while your_guess != number:
    if your_guess &lt; number:
        print(&#34;Your number was too low&#34;)
    else:
        print(&#34;You number was to high&#34;)
    your_guess = int(input(&#34;Please try again... &#34;))
print(&#34;GG you found it&#34;)
</code></pre><p><strong>Thats it for now</strong></p>
<p>Stay tuned for more</p>
<p><em><strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>PocketBase self-hosted Firebase alternative</title>
      <link>https://4rkal.eu.org/posts/pocketbase/</link>
      <pubDate>Mon, 06 Mar 2023 20:44:46 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/pocketbase/</guid>
      <description>What is PocketBase PocketBase is an open source backend made in go consisting of embedded database (SQLite) with realtime subscriptions, built-in auth management, convenient dashboard UI and simple REST-ish API.
Install PocketBase The first thing that you will have to do is head to https://pocketbase.io and select the file for your operating system. Since I am using linux I will show how to set this up on linux but it should be pretty similar for any other os.</description>
      <content:encoded><![CDATA[<h1 id="what-is-pocketbase">What is PocketBase</h1>
<p>PocketBase is an open source backend made in go consisting of embedded database (SQLite) with realtime subscriptions, built-in auth management, convenient dashboard UI and simple REST-ish API.</p>
<h1 id="install-pocketbase">Install PocketBase</h1>
<p>The first thing that you will have to do is head to <a href="https://pocketbase.io">https://pocketbase.io</a> and select the file for your operating system. Since I am using linux I will show how to set this up on linux but it should be pretty similar for any other os.</p>
<p>Unzip the file and open up a terminal to the path that you extracted the file to and type:</p>
<p><code>./pocketbase serve</code></p>
<p>If you want to serve some static content you can create a new directory called pb_public</p>
<p><code>mkdir pb_public</code></p>
<p>Then paste any content into that directory</p>
<p>eg.</p>
<pre tabindex="0"><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
    &lt;title&gt;Epic Website&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;My epic website&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>And save that as index.html inside of the pb_public folder</p>
<p>Now if you head to http://127.0.0.1:8090/ you should see the website that we entered above.</p>
<p>If you go to http://127.0.0.1:8090/_/ it will take you to an admin portal. There you should create a account. After you have setted up your account you should see something like this.</p>
<p><img loading="lazy" src="/../assets/pocketbase.webp" type="" alt="1"  /></p>
<p>Here you can add and create users</p>
<p><img loading="lazy" src="/../assets/pocketbase2.webp" type="" alt="2"  /></p>
<p>And also create custom collections eg</p>
<p><img loading="lazy" src="/../assets/pocketbase3.webp" type="" alt="2"  /></p>
<p>If you click on the settings icon you can see that you will be able to add applications, mail settings, file storage (s3) , export/import collections, add or remove auth providers, token options and add/remove admins.</p>
<p>That’s it for now if you want to learn more check out <a href="https://pocketbase.io/docs/">https://pocketbase.io/docs/</a></p>
<p><em><strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Why Monero is the ultimate form of a cryptocurrency</title>
      <link>https://4rkal.eu.org/posts/whymonero/</link>
      <pubDate>Mon, 06 Mar 2023 20:23:16 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/whymonero/</guid>
      <description>In this article, I will tell you why Monero fits my views of what a cryptocurrency should look like.
What is Monero? Monero is a decentralized cryptocurrency. It uses a public distributed ledger with privacy-enhancing technologies that obfuscate transactions to achieve anonymity and fungibility. Observers cannot decipher addresses trading Monero, transaction amounts, address balances, or transaction histories.
Monero works like any other currency but with some privacy and decentralization innovations.</description>
      <content:encoded><![CDATA[<p>In this article, I will tell you why Monero fits my views of what a cryptocurrency should look like.</p>
<h1 id="what-is-monero">What is Monero?</h1>
<p>Monero is a decentralized cryptocurrency. It uses a public distributed ledger with privacy-enhancing technologies that obfuscate transactions to achieve anonymity and fungibility. Observers cannot decipher addresses trading Monero, transaction amounts, address balances, or transaction histories.</p>
<p>Monero works like any other currency but with some privacy and decentralization innovations.</p>
<p>Monero uses <a href="https://www.investopedia.com/terms/s/stealth-address-cryptocurrency.asp">stealth addresses</a> alongside <a href="https://web.getmonero.org/resources/moneropedia/ringsignatures.html">ring signatures</a> and <a href="https://www.getmonero.org/resources/moneropedia/ringCT.html">ring CTs</a> to &ldquo;hide&rdquo; the transaction and transaction amounts, enhancing transaction privacy. To further decentralize the network, Monero uses the <a href="https://www.getmonero.org/resources/moneropedia/randomx.html">RandomX algorithm</a> to discourage the use of ASICs.</p>
<h1 id="the-main-problems-with-bitcoin-and-other-cryptos">The Main Problems with Bitcoin and Other Cryptos</h1>
<p>Bitcoin may seem like a perfect currency. However, under the hood, Bitcoin has many flaws.</p>
<p>One of the main problems with Bitcoin is that it isn&rsquo;t actually censorship-resistant. A central bank or government can blacklist your address and block exchanges from accepting it. While there are ways to get around that, it isn&rsquo;t easy. Monero, on the other hand, is censorship-resistant as it doesn&rsquo;t display transaction amounts or receivers.</p>
<p>Another problem with Bitcoin and other PoW currencies is that they are actually controlled by a small number of people since they are really hard to mine, among many other factors. Monero is a relatively easy currency to mine and is ASIC-resistant, which makes it even more decentralized as anyone with a computer and an internet connection can start contributing to the network.</p>
<p>Bitcoin has a block size limit, which results in more expensive transactions and longer waiting times. Monero uses a <a href="https://localmonero.co/knowledge/dynamic-block-size">dynamic block size</a>.</p>
<p>Also, Bitcoin has a <a href="https://bitinfocharts.com/comparison/bitcoin-confirmationtime.html#3m">high block time</a>, which means that transactions take longer to be confirmed and executed. Bitcoin&rsquo;s block time is ~10 minutes, while <a href="https://bitinfocharts.com/comparison/monero-confirmationtime.html#3y">Monero&rsquo;s block time</a> is ~2 minutes.</p>
<p>Bitcoin has halving once every 4 years. The halving halves the amount of mined (printed) Bitcoin in every block. This, by itself, increases price volatility and transaction fee volatility.</p>
<p>Monero has chosen a 0.6 XMR block reward forever. Any good currency wants to have as little volatility as possible. Monero is a currency, not a &ldquo;number go up coin.&rdquo;</p>
<h1 id="conclusion">Conclusion</h1>
<p>Monero is basically what people think Bitcoin is. Here&rsquo;s a great <a href="https://www.youtube.com/watch?v=ak5TFr26BaE">video about it</a>.</p>
<h1 id="disclaimer">Disclaimer</h1>
<p>Tech has nothing to do with price. This article reviews the tech of this project and is thus not financial advice. Please DYOR when investing.</p>
<h1 id="support-me">Support Me</h1>
<p>If you enjoyed this article, consider supporting me:</p>
<p>Monero:</p>
<p><code>8AztDJtwb7iKaqP4KXRG39VibAacCY1mMfH3bNsVjhYMYbohtT5LKoTSRP6vJGtjeBSPEpFdHZx3ZL3iVowYdkqeQwPAG2o</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Create a MultiBoot USB using ventoy</title>
      <link>https://4rkal.eu.org/posts/ventoy/</link>
      <pubDate>Mon, 06 Mar 2023 20:11:51 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/ventoy/</guid>
      <description>With ventoy, you don’t need to format the disk over and over, you just need to copy the ISO files to the USB drive and boot them directly.
Whats ventoy? Ventoy is a free and open-source utility used for writing image files such as .iso, .wim, .img, .vhd(x), and .efi files onto storage media to create bootable USB flash drives. Once Ventoy is installed onto a USB drive, there is no need to reformat the disk to update it with new installation files; it is enough to copy the .</description>
      <content:encoded><![CDATA[<p>With ventoy, you don’t need to format the disk over and over, you just need to copy the ISO files to the USB drive and boot them directly.</p>
<h1 id="whats-ventoy">Whats ventoy?</h1>
<p>Ventoy is a free and open-source utility used for writing image files such as .iso, .wim, .img, .vhd(x), and .efi files onto storage media to create bootable USB flash drives. Once Ventoy is installed onto a USB drive, there is no need to reformat the disk to update it with new installation files; it is enough to copy the .iso to the USB drive and boot from them directly. Ventoy will present the user with a boot menu to select one of these files.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>a computer</li>
<li>a internet connection (pretty hard without one)</li>
<li>a usb (min 8gb)</li>
</ol>
<h1 id="installation">Installation</h1>
<p>Ventoy is available on both linux and windows.</p>
<p>The first thing you will have to do is head to ventoy.net . On the download page select your operating system and click on download.</p>
<h1 id="on-linux">On linux</h1>
<p>After you have extracted the file open the folder and click on the VentoyGUI .</p>
<p>Depending on your processor type select the file ending in either aarch64 i386 mips64el or x86_64. (It will most probably be x86_64).</p>
<p>After that you should see something like this:
<img loading="lazy" src="/../assets/ventoy.webp" type="" alt=""  /></p>
<p>Select your device from the devices tab</p>
<p>Then click on install.</p>
<h1 id="on-windows">On windows</h1>
<p>Download the file and unzip it</p>
<p>Then click on the file called Ventoy2Disk.exe</p>
<p>You should see something like this</p>
<p><img loading="lazy" src="/../assets/ventoy-win.webp" type="" alt=""  /></p>
<p>Select your usb device from the drop down and click on install.</p>
<h1 id="using-ventoy">Using ventoy</h1>
<p>To use ventoy all you have to do is paste your iso files inside of the usb. No formatting etc.</p>
<p><strong>GG</strong> you have now installed ventoy</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Nmap(Network Mapper) For Beginners</title>
      <link>https://4rkal.eu.org/posts/nmap/</link>
      <pubDate>Sun, 05 Mar 2023 17:37:03 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/nmap/</guid>
      <description>Whether you want to scan your network for vulnerabilities or just want to see which ports you have open, nmap can be extremely useful.
What is nmap Nmap (Network Mapper) is a network scanner created by Gordon Lyon . Nmap sends packets and examines the answers to find hosts and services on a computer network. For probing computer networks, Nmap offers a variety of functionalities, including host discovery, service detection, and operating system detection.</description>
      <content:encoded><![CDATA[<p>Whether you want to scan your network for vulnerabilities or just want to see which ports you have open, nmap can be extremely useful.</p>
<h1 id="what-is-nmap">What is nmap</h1>
<p>Nmap (Network Mapper) is a network scanner created by Gordon Lyon . Nmap sends packets and examines the answers to find hosts and services on a computer network. For probing computer networks, Nmap offers a variety of functionalities, including host discovery, service detection, and operating system detection. Scripts that offer more sophisticated service discovery, vulnerability detection, and other features can extend these features. During a scan, Nmap can adjust to changing network conditions, such as latency and congestion.</p>
<h1 id="installation">Installation</h1>
<p>Nmap is available for linux, windows , mac os and even bsd</p>
<p>If you are using linux you can install it using your package manager.</p>
<p>On apt</p>
<p><code>sudo apt install nmap</code></p>
<p>On dnf</p>
<p><code>sudo dnf install nmap</code></p>
<p>With pacman</p>
<p><code>sudo pacman -S nmap</code></p>
<p>On windows you have to download the executable from the nmap website.</p>
<p><a href="https://nmap.org/download.html">https://nmap.org/download.html</a></p>
<p>The same goes for mac and any other os</p>
<h1 id="getting-started">Getting Started</h1>
<p>The first thing I will show you how to do is find all the ip addresses connected to your local network.</p>
<p>The first thing you will have to do is find your inet ip</p>
<p>On Linux type</p>
<p><code>ip a</code></p>
<p>On windows</p>
<p><code>ipconfig</code></p>
<p>You should see a lot of information, try to find inet. It should look something like this</p>
<p><code>inet 192.168.1.28/24</code></p>
<p>and copy the ip</p>
<p>Now type</p>
<p><code>nmap -sn IP</code></p>
<p>Instead of ip type the ip we found from above</p>
<p>Now you should see a large list of all the ips connected to your network.</p>
<p>-sn flag stands for no port scan</p>
<p>Now we can also get all the ports open on all the ips on your local network</p>
<p>To do that type</p>
<p><code>nmap IP</code></p>
<p>Instead of ip type the ip we found from above</p>
<p>Now if you have any computers on your local networks with open ports you should see them now</p>
<p>Eg.</p>
<p>I have a ssh port open on one of my machines so I can see</p>
<pre tabindex="0"><code>PORT   STATE SERVICE
22/tcp open  ssh
</code></pre><p>If you are running a web server ports 80 and 443 should be open.</p>
<p>Now lets say that you want to find out what operating system a specified device on your network is running.</p>
<p>To do that type</p>
<p><code>sudo nmap -O IP</code></p>
<p>Eg.</p>
<p><code>sudo nmap -O 192.168.1.16</code></p>
<p>In my case my device is running linux and you can even find out what kernel version your device is running</p>
<pre tabindex="0"><code>PORT   STATE SERVICE
22/tcp open  ssh
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6.32
OS details: Linux 2.6.32
</code></pre><p>You can press enter while running a scan to see how much time is left</p>
<p>Lets say that you dont want anyone monitoring a network be able to trace back the scan to you.</p>
<p>For that we can use decoy mode</p>
<p>To use decoy mode add -D followed by any random ip to any nmap command.</p>
<p>eg</p>
<p><code>sudo nmap -D 192.168.1.11 192.168.1.16</code></p>
<p>This will make it so that it looks like both your ip and 192.168.1.11 are performing a port scan on 192.168.1.16</p>
<p>You can also add multiple ips by adding commas</p>
<p>eg</p>
<p><code>sudo nmap -D 192.168.1.11,192.168.1.12 192.168.1.16</code></p>
<p>Thats all for now</p>
<p><strong>GG</strong> You have now learnt the basics of nmap
***If you enjoyed this article consider <a href="../../donate">supporting me</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How Microsoft is monetizing the GitHub code base</title>
      <link>https://4rkal.eu.org/posts/githubmon/</link>
      <pubDate>Sun, 05 Mar 2023 17:21:56 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/githubmon/</guid>
      <description>Microsoft purchased GitHub in 2018, something many users are not aware of. After Microsoft’s acquisition of GitHub there have been many controversies like blocking private repositories and access to GitHub pages in certain countries and of course, GitHub Copilot.
What is Github Copilot GitHub Copilot is an artificial intelligence tool developed by GitHub and OpenAI to assist users of Visual Studio Code, Visual Studio, Neovim, and JetBrains integrated development environments (IDEs) by autocompleting code.</description>
      <content:encoded><![CDATA[<p>Microsoft purchased GitHub in 2018, something many users are not aware of. After Microsoft’s acquisition of GitHub there have been many controversies like blocking private repositories and access to GitHub pages in certain countries and of course, GitHub Copilot.</p>
<h1 id="what-is-github-copilot">What is Github Copilot</h1>
<p>GitHub Copilot is an artificial intelligence tool developed by GitHub and OpenAI to assist users of Visual Studio Code, Visual Studio, Neovim, and JetBrains integrated development environments (IDEs) by autocompleting code. Currently available by subscription to individual developers, the tool was first announced by GitHub on 29 June 2021, and works best for users coding in Python, JavaScript, TypeScript, Ruby, and Go.</p>
<h1 id="how-does-copilot-work">How does copilot work?</h1>
<p>GitHub Copilot is powered by the OpenAI Codex, an artificial intelligence model created by OpenAI. The Generative Pre-trained Transformer 3 (GPT-3) language model, which uses deep learning to create text that resembles human speech, is improved and used in production as the OpenAI Codex.</p>
<p>Github copilot was trained on a selection of the English language, public GitHub repositories, including 59 gigabytes of Python code sourced from 54 million public GitHub repositories.</p>
<p>There still is a lot of controversy about whether GitHub should be allowed to do so, as most open source licences obviously don’t contain anything against analyzing your code with AI and selling it. Also, as AI is analyzing the code base it is not classified as derivative work which seems to be legal. However, it seems quite unethical by Microsoft as Copilot is a paid service that relies on analyzing other people’s code.
Read more:
<a href="https://www.theverge.com/2021/7/7/22561180/github-copilot-legal-copyright-fair-use-public-code">https://www.theverge.com/2021/7/7/22561180/github-copilot-legal-copyright-fair-use-public-code</a></p>
<p>If copilot was free to use it would make a lot more sense as it utilizes FOSS(Free and open sourced software) in order to work. However with Microsoft’s decision to make copilot payed they are monetizing most off GitHub&rsquo;s code base which is an illegal grey zone.</p>
<p>Analyzing a huge amount of code without any security features has led to many problems like GitHub leaking phone numbers (I even encountered it while testing copilot out).</p>
<p><a href="https://github.com/community/community/discussions/9584?sort=top?sort=top">https://github.com/community/community/discussions/9584?sort=top?sort=top</a></p>
<p>Last but not least by using GitHub copilot you agree to the ToS which clearly states</p>
<pre tabindex="0"><code>GitHub Copilot gives you certain choices about how it uses the data it collects. User engagement data, including pseudonymous identifiers and general usage data, is required for the use of GitHub Copilot and will continue to be collected, processed, and shared with Microsoft and OpenAI as you use GitHub Copilot. You can choose whether your code snippets are collected and retained by GitHub and further processed and shared with Microsoft and OpenAI by adjusting your user settings.
</code></pre><h1 id="conclusion">Conclusion</h1>
<p>I personally don’t use or will ever use GitHub Copilot or recommend it to anyone for the following reasons:</p>
<ol>
<li>Doesn&rsquo;t help you learn. Instead does the opposite.</li>
<li>Recommends other peoples’ phone numbers, emails and even aws keys. No features have been implemented to stop this as far as I know.</li>
<li>Tracks your usage and collects a lot of data. Like Source code that you are editing, related files and other files open in the same IDE or editor, URLs of repositories and files paths.</li>
<li>Is paid and proprietary. (You pay to be tracked)</li>
<li>Monetizes Open Source Software in an unethical way.</li>
<li><a href="https://cyber.nyu.edu/2021/10/15/ccs-researchers-find-github-copilot-generates-vulnerable-code-40-of-the-time/">Github CoPilot generates vulnerable code 40% of the time</a></li>
</ol>
<p>PS if you don’t want GitHub to legally index your code, you could try one of these <a href="https://github.com/big-tech-sux/resistant-licenses">licenses</a> They might work</p>
<p>***If you enjoyed this article consider <a href="../../donate">supporting me</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup your own git server</title>
      <link>https://4rkal.eu.org/posts/git/</link>
      <pubDate>Sun, 05 Mar 2023 17:11:40 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/git/</guid>
      <description>There are numerous benefits to running your own git server as opposed to Github . Your code cannot be used for profit . Additionally, nobody can delete your code base .
Requirements A computer for your server (running [[linux]] preferably debian) An internet connection (pretty hard without one) A second computer with git installed Setup The first thing you will have to do is install git via your package manager</description>
      <content:encoded><![CDATA[<p>There are numerous benefits to running your own git server as opposed to Github . Your code cannot be used for profit . Additionally, nobody can delete your code base .</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>A computer for your server (running [[linux]] preferably debian)</li>
<li>An internet connection (pretty hard without one)</li>
<li>A second computer with git installed</li>
</ol>
<h1 id="setup">Setup</h1>
<p>The first thing you will have to do is install git via your package manager</p>
<p>If you are using apt</p>
<p><code>sudo apt install git</code></p>
<p>On dnf</p>
<p><code>sudo dnf install git</code></p>
<p>pacman</p>
<p><code>sudo pacman -S git</code></p>
<p>After that create a user called git</p>
<p><code>sudo useradd git</code></p>
<p>You will have to enter some information, you can leave everything except the password blank.</p>
<p>Now login to your git user</p>
<p><code>su git</code></p>
<p>Now to make our server more secure we are going to use ssh keys.</p>
<pre tabindex="0"><code>mkdir .ssh
chmod 700 .ssh/
touch .ssh/authorized_keys
chmod 600 .ssh/authorized_keys
</code></pre><p>Now on the computer which you want to commit from you will have to generate a ssh key
On your main machine type.
<a href="../sssh">My article on keybased auth</a></p>
<p><code>ssh-keygen</code></p>
<p>After that you will have to copy your ssh public key to the authorized_keys</p>
<p><code>ssh-copy-id user@ip</code></p>
<p>(To find out your ip you can type ifconfig)</p>
<p>Now if you try to connect to your server you should be able to login without a password.</p>
<p><code>ssh git@ip</code></p>
<p>Now you will have to create the folder where all your git repos will be saved.</p>
<p>I will save mine in ~/git , but you can save them wherever you want</p>
<p><code>mkdir ~/git</code></p>
<p>Now we have to give the ownership of the git folder to the git user</p>
<p><code>chown git:git git</code></p>
<p>Now for every repository you will have to create a folder.</p>
<p>eg.</p>
<p><code>mkdir ~/git/my_cool_project.git</code></p>
<p>Now run</p>
<p><code>cd ~/git/my_cool_project.git</code></p>
<p>And initiate the git repository</p>
<p><code>git init --bare</code></p>
<p>Now you can create a couple of files inside of your project (to test it out).</p>
<p><code>touch stuff.txt</code></p>
<p>Now you can test if your repository is working by cloning the files from another machine running git.</p>
<p><code>git clone git@ip:~/git/my_cool_project.git</code></p>
<p>You will probably get</p>
<p><code>warning: You appear to have cloned an empty repository.</code></p>
<p>That is because you haven&rsquo;t committed anything.</p>
<pre tabindex="0"><code>git add .
git commit -m &#34;first commit&#34;
</code></pre><p>Now if you test that again it should work.</p>
<p><strong>GG</strong> you did it, you have now successfully set up your own git server</p>
<p>***If you enjoyed this article consider <a href="../../donate">supporting me</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Host your own private search engine — searX</title>
      <link>https://4rkal.eu.org/posts/searx/</link>
      <pubDate>Fri, 03 Mar 2023 23:21:53 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/searx/</guid>
      <description>We rely on google more and more, but it’s interesting to know how much data Google is now handling. Alphabet aka Google describes its extensive data collection practices in its privacy policy. The company stores an astounding quantity of data. An estimated 15 exabytes of YOUR data are stored by Google. Google is tracking your every move.
What is searX? Searx is a free and open-source metasearch engine, available under the GNU Affero General Public License version 3, with the aim of protecting the privacy of its users.</description>
      <content:encoded><![CDATA[<p>We rely on google more and more, but it’s interesting to know how much data Google is now handling. Alphabet aka Google describes its extensive data collection practices in its privacy policy. The company stores an astounding quantity of data. An estimated 15 exabytes of YOUR data are stored by Google. Google is tracking your every move.</p>
<h1 id="what-is-searx">What is searX?</h1>
<p>Searx is a free and open-source metasearch engine, available under the GNU Affero General Public License version 3, with the aim of protecting the privacy of its users. In order to do this, Searx does not provide the search engines from which it receives results with users’ IP addresses or search histories. Tracking cookies served by the search engines are blocked, preventing user-profiling-based results modification.</p>
<p>Users can run private instances of Searx on their own computer, but there are also many public, user-run, Searx instances.</p>
<p>In this article i will show you how to run your own searX instance.</p>
<h1 id="what-is-a-metasearch-engine">What is a metasearch engine?</h1>
<p>A web search engine’s data is used by a metasearch engine, an online information retrieval tool, to create its own results. Metasearch engines automatically query search engines eg Google after receiving user input. The users are shown sufficient data that has been gathered, sorted, and presented.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>An computer (preferably running linux). Check out my article on how to install linux here <a href="https://4rkal.medium.com/install-a-debian-server-54add9133eec">https://4rkal.medium.com/install-a-debian-server-54add9133eec</a></li>
<li>an internet connection</li>
</ol>
<h1 id="installing-on-windows">Installing on windows</h1>
<p>To install on windows you will have to install wsl and follow the setup guide for linux bellow</p>
<p>To see how to install wsl head to <a href="https://docs.microsoft.com/en-us/windows/wsl/install">https://docs.microsoft.com/en-us/windows/wsl/install</a></p>
<h1 id="installing-on-linux-debian">Installing on Linux (debian)</h1>
<p>First update your system
<code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code>
Now install required packages
<code>sudo apt install -y python3-dev python3-babel python3-venv uwsgi uwsgi-plugin-python3 git build-essential libxslt-dev zlib1g-dev libffi-dev libssl-dev </code>
Now you will have to create a new user called searx</p>
<pre tabindex="0"><code>sudo -H useradd --shell /bin/bash --system \
    --home-dir &#34;/usr/local/searx&#34; \
    --comment &#39;Privacy-respecting metasearch engine&#39; searx

sudo -H mkdir &#34;/usr/local/searx&#34;
sudo -H chown -R &#34;searx:searx&#34; &#34;/usr/local/searx&#34;
</code></pre><p>Now change user to searx</p>
<p><code>git clone &quot;https://github.com/searx/searx.git&quot; &quot;/usr/local/searx/searx-src&quot;t</code></p>
<p>Now create a virtual environment</p>
<p><code>echo &quot;. /usr/local/searx/searx-pyenv/bin/activate&quot; &gt;&gt;  &quot;/usr/local/searx/.profile&quot;</code></p>
<p>To install searx’s dependencies, exit the searx bash session you opened above and restart a new. Before install, first check if your virtualenv was sourced from the login (~/.profile):</p>
<p>Update dependencies</p>
<pre tabindex="0"><code>pip install -U pip
pip install -U setuptools
pip install -U wheel
pip install -U pyyaml
</code></pre><p>Jump to searx’s working tree and install searx into virtualenv</p>
<pre tabindex="0"><code>cd &#34;/usr/local/searx/searx-src&#34;
pip install -e .
</code></pre><p>Now go back to your default user</p>
<p><code>exit</code></p>
<p>And type
<code>sudo -H mkdir -p &quot;/etc/searx&quot;</code></p>
<p>Then</p>
<pre tabindex="0"><code>sudo -H cp &#34;/usr/local/searx/searx-src/utils/templates/etc/searx/use_default_settings.yml&#34; \
             &#34;/etc/searx/settings.yml&#34;
</code></pre><p>Now you can edit your settings file</p>
<p><code>sudo nano /etc/searx/settings.yml</code></p>
<p>You can change the secret_key</p>
<p>I will change the port and bind_address but you can change whatever you want.</p>
<p>Now log back in to your searx user</p>
<p><code>sudo -H -u searx -i</code></p>
<p>Change directory</p>
<p><code>cd /usr/local/searx/searx-src</code></p>
<p>Export the settings path</p>
<pre tabindex="0"><code>export 
SEARX_SETTINGS_PATH=&#34;/etc/searx/settings.yml&#34;
</code></pre><p>Finally run the web app
<code>python searx/webapp.py</code>
Now if you head to 127.0.0.1:8888 you should be able to see something like this
<img loading="lazy" src="/../assets/searx.webp" type="" alt="1"  />
<strong>GG</strong> you did it enjoy privacy (in search engines)</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Become anonymous and somewhat untraceable with tails os</title>
      <link>https://4rkal.eu.org/posts/tails/</link>
      <pubDate>Fri, 03 Mar 2023 23:03:40 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/tails/</guid>
      <description>In this article we will talk about what tails is and how to install and more.
What is tails? Tails, or The Amnesic Incognito Live System, is a security-focused Debian-based Linux distribution aimed at preserving privacy and anonymity.It connects to the Internet exclusively through the anonymity network Tor. The system is designed to be booted as a live DVD or live USB, and leaves no digital footprint on the machine unless explicitly told to do so.</description>
      <content:encoded><![CDATA[<p>In this article we will talk about what tails is and how to install and more.</p>
<h1 id="what-is-tails">What is tails?</h1>
<p>Tails, or The Amnesic Incognito Live System, is a security-focused Debian-based Linux distribution aimed at preserving privacy and anonymity.It connects to the Internet exclusively through the anonymity network Tor. The system is designed to be booted as a live DVD or live USB, and leaves no digital footprint on the machine unless explicitly told to do so.</p>
<h1 id="what-is-the-tor-network">What is the tor network?</h1>
<p>Tor, short for The Onion Router, is free and open-source software for enabling anonymous communication. It directs Internet traffic through a free, worldwide, volunteer overlay network, consisting of more than six thousand relays,to conceal a user’s location and usage from anyone performing network surveillance or traffic analysis. Using Tor makes it more difficult to trace a user’s Internet activity.</p>
<h1 id="who-is-tails-intended-for">Who is tails intended for?</h1>
<p>As the tails website states (<a href="https://tails.boum.org/)">https://tails.boum.org/)</a>. Tails is intended for Activists who use Tails to hide their identities, avoid censorship, and communicate securely. Journalists and their sources use Tails to publish sensitive information and access the Internet from unsafe places. Domestic violence survivors use Tails to escape surveillance at home. You whenever you need extra privacy in this digital world.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>A computer (minimum of 2GB ram , 64-bit x86–64 compatible processor)</li>
<li>A usb stick with 8GB+ of space</li>
</ol>
<p>Read more <a href="https://tails.boum.org/doc/about/requirements/index.en.html">https://tails.boum.org/doc/about/requirements/index.en.html</a></p>
<h1 id="installation">Installation</h1>
<p>Back up all your files USB files as they will get deleted!</p>
<p>The first thing you will have to do is to head to <a href="https://tails.boum.org/install/index.en.html">https://tails.boum.org/install/index.en.html</a>
Now select your operating system</p>
<p>Ill walk you through the installation for windows and linux.
This should probably bethe same with linux
After you have clicked on the windows logo you should be prompted with the requirements and a step by step guide.</p>
<p>The first thing you will have to do is to download the tails usb image.</p>
<p>After that i highly recommend that you verify your download</p>
<p>Just click on select and select it.</p>
<p>Now you will have to download balena etcher. Just click on download balena etcher and double click the installer.</p>
<p>At this moment plug in your usb (if you have any important files on the usb you have to back the up or they will be lost)</p>
<p>Now click the flash from file button and select the file you downloaded (it ends in .img)</p>
<p>Click the Select target button to select your USB stick.</p>
<p>And now select flash.</p>
<p>This could take a while so just sit back and relax.</p>
<h1 id="using-tails">Using tails</h1>
<p>After your installation is finished just reboot your computer and hit F12 or F2 depending on your computer.</p>
<p>Now you should see a screen thats says something like please select your boot device. You will have to select your usb and hit enter</p>
<p>Now you should see the grub loader</p>
<p>Select Tails and hit enter</p>
<p>Now you should be booted into tails</p>
<p>You will probably see a screen that looks something like this</p>
<p><img loading="lazy" src="/../assets/tails.webp" type="" alt=""  /></p>
<p>Here you will have to set your language and region. We can also press on the + icon to add a admin password mac address anonymization etc. I will just put the admin password and the unsafe browser. You can select anything you want. However remember that changing some of these settings will make you less anonymous.</p>
<p>Once you are ready select start tails</p>
<p>Now you will see</p>
<p><img loading="lazy" src="/../assets/tails2.webp" type="" alt=""  /></p>
<p>Here you can select anything you want. I will just select the first option.</p>
<p>Now you should see this:</p>
<p><img loading="lazy" src="/../assets/tails3.webp" type="" alt=""  /></p>
<p>GG you did it. One more step though</p>
<p>I like to have a persistent volume so that i don’t lose all my files when i reboot. To do that open the configure persistent volume app and follow the steps there.</p>
<p>That’s it for now</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Get ad free web with Pi-hole</title>
      <link>https://4rkal.eu.org/posts/pihole/</link>
      <pubDate>Sat, 25 Feb 2023 21:17:13 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/pihole/</guid>
      <description>In this article, I will show you how to set up Pi-hole. Pi-hole will allow you to block in-app ads, improve your network&amp;rsquo;s performance, and monitor statistics. Pi-hole also allows you to create a VPN.
What is Pi-hole? Pi-hole is a Linux network-level advertisement and Internet tracker blocking application that acts as a DNS sinkhole and optionally a DHCP server, intended for use on a private network. It is designed for low-power embedded devices with network capability, such as the Raspberry Pi, but can be installed on any Linux machine.</description>
      <content:encoded><![CDATA[<p>In this article, I will show you how to set up Pi-hole. Pi-hole will allow you to block in-app ads, improve your network&rsquo;s performance, and monitor statistics. Pi-hole also allows you to create a VPN.</p>
<h1 id="what-is-pi-hole">What is Pi-hole?</h1>
<p>Pi-hole is a Linux network-level advertisement and Internet tracker blocking application that acts as a DNS sinkhole and optionally a DHCP server, intended for use on a private network. It is designed for low-power embedded devices with network capability, such as the Raspberry Pi, but can be installed on any Linux machine. Pi-hole has the ability to block traditional website advertisements as well as advertisements in unconventional places, such as smart TVs and mobile operating system advertisements.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>A computer with Linux (preferably something Debian-based)</li>
<li>Preferably an Ethernet cable</li>
<li>Access to your router&rsquo;s admin portal</li>
<li>A static IP</li>
<li>An internet connection (it&rsquo;s pretty difficult without one, trust me)</li>
</ol>
<h1 id="installation">Installation</h1>
<p>The first thing we have to do is download the installer.</p>
<p>To do that, type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget -O basic-install.sh https://install.pi-hole.net
</span></span></code></pre></div><p>Now, install it with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo bash basic-install.sh
</span></span></code></pre></div><p>Now you should see something like this:</p>
<p><img loading="lazy" src="/../assets/pihole/1.webp" type="" alt="Installation Step 1"  /></p>
<p>Just press OK.</p>
<p><img loading="lazy" src="/../assets/pihole/2.webp" type="" alt="Installation Step 2"  /></p>
<p>Just press OK again.</p>
<p>As I said before, you have to have a static IP in order to set up the Pi-hole, so if you have one configured, just press Yes.</p>
<p><img loading="lazy" src="/../assets/pihole/3.webp" type="" alt="Static IP Setup"  /></p>
<p>Otherwise, you will have to set one up.</p>
<p>Now you will be prompted to select your upstream DNS provider. You can select any of the DNS providers on the list. I will just select Google.</p>
<p><img loading="lazy" src="/../assets/pihole/4.webp" type="" alt="DNS Provider Selection"  /></p>
<p>And press OK.</p>
<p>After that, you will have to select your list. I will just select the default one.</p>
<p><img loading="lazy" src="/../assets/pihole/5.webp" type="" alt="List Selection"  /></p>
<p>Now you will have to select whether you want a web admin interface. Select On and then OK.</p>
<p><img loading="lazy" src="/../assets/pihole/6.webp" type="" alt="Web Admin Interface"  /></p>
<p>Now just select On and press OK.</p>
<p><img loading="lazy" src="/../assets/pihole/7.webp" type="" alt="Web Admin Interface Confirmation"  /></p>
<p>After that, you can select if you want to log queries. You can select any option you want.</p>
<p><img loading="lazy" src="/../assets/pihole/8.webp" type="" alt="Log Queries"  /></p>
<p>Now, I recommend that you leave this as default, but you don’t have to.</p>
<p><img loading="lazy" src="/../assets/pihole/9.webp" type="" alt="Default Settings"  /></p>
<p>Now it should start installing everything.</p>
<p>After the installation is finished, you should see something like this:</p>
<p><img loading="lazy" src="/../assets/pihole/10.webp" type="" alt="Installation Complete"  /></p>
<p>You have now successfully installed Pi-hole. You can head to the admin portal by going to the specified IP.</p>
<p>To be able to use Pi-hole, you have two options:</p>
<ol>
<li>Make the IP the default DNS for your whole network</li>
<li>Manually add it on any device</li>
</ol>
<p>I&rsquo;ll go with the second option.</p>
<h3 id="on-windows">On Windows:</h3>
<p>DNS settings are specified in the TCP/IP Properties window for the selected network connection.</p>
<ol>
<li>Go to the Control Panel</li>
<li>Click Network and Internet &gt; Network and Sharing Center &gt; Change adapter settings</li>
<li>Select the connection for which you want to configure</li>
<li>Right-click Local Area Connection &gt; Properties</li>
<li>Select the Networking tab</li>
<li>Select Internet Protocol Version 4 (TCP/IPv4) or Internet Protocol Version 6 (TCP/IPv6)</li>
<li>Click Properties</li>
<li>Click Advanced</li>
<li>Select the DNS tab</li>
<li>Click OK</li>
<li>Select Use the following DNS server addresses</li>
<li>Replace those addresses with the IP addresses of your Pi</li>
<li>Restart the connection you selected in step 3</li>
<li>Repeat the procedure for additional network connections you want to change</li>
</ol>
<h3 id="on-linux">On Linux:</h3>
<p>In most modern Linux distributions, DNS settings are configured through Network Manager.</p>
<ol>
<li>Click System &gt; Preferences &gt; Network Connections</li>
<li>Select the connection for which you want to configure and press <strong>Edit</strong></li>
<li>Select the IPv4 Settings or IPv6 Settings tab</li>
<li>If the selected method is Automatic (DHCP), open the dropdown and select Automatic (DHCP) addresses only instead. If the method is set to something else, do not change it.</li>
<li>In the DNS servers field, enter your Pi’s IP addresses</li>
<li>Click Apply to save the changes</li>
</ol>
<blockquote>
<p><strong>Warning:</strong> If you are not using Network Manager, your DNS settings are specified in <code>/etc/resolv.conf</code>.</p>
</blockquote>
<p>Now, if we head over to any websites with ads, you should see that no ads appear.</p>
<p>Let&rsquo;s try speedtest.net.</p>
<p>If you have followed the steps correctly, you should see something like this:</p>
<p><img loading="lazy" src="/../assets/pihole/ads.webp" type="" alt="No Ads!"  /></p>
<p><strong>NO ADS</strong></p>
<p>Enjoy the ad-free web.</p>
<p><em><strong>If you enjoyed this article, consider <a href="../../donate">supporting me</a>.</strong></em></p>
<pre tabindex="0"><code></code></pre>]]></content:encoded>
    </item>
    
    <item>
      <title>Securing ssh with Key-Based authentication</title>
      <link>https://4rkal.eu.org/posts/sssh/</link>
      <pubDate>Sat, 25 Feb 2023 21:08:47 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/sssh/</guid>
      <description>SSH keys provide an extremely secure way of logging into your server.
SSH Password Based VS Key Based Authentication Clients can be authenticated by an SSH server in a variety of ways. The most basic is password authentication, which is simple to use but not particularly secure. The more advanced and secure way is via ssh keys.Brute-forcing a password-protected account is quite possible thanks to modern computing power and automated scripts.</description>
      <content:encoded><![CDATA[<p>SSH keys provide an extremely secure way of logging into your server.</p>
<h1 id="ssh-password-based-vs-key-based-authentication">SSH Password Based VS Key Based Authentication</h1>
<p>Clients can be authenticated by an SSH server in a variety of ways. The most basic is password authentication, which is simple to use but not particularly secure. The more advanced and secure way is via ssh keys.Brute-forcing a password-protected account is quite possible thanks to modern computing power and automated scripts. The solution to that is ssh key based authentication.</p>
<h1 id="how-does-key-based-authentication-work">How does Key Based Authentication work?</h1>
<p>SSH key pairs are two cryptographically secure keys that allow a client to connect to an SSH server. A public key and a private key make up each key pair.The client keeps the private key, which should be kept completely confidential.</p>
<p>If the attacker has access to the private key, they will be able to enter into servers using the corresponding public key without requiring further authentication. A passphrase can be used to encrypt the key on disc as an extra precaution.</p>
<p>The related public key can be freely shared without causing any harm. The public key can be used to encrypt communications that can only be decrypted with the private key. This attribute is used to verify the authenticity of the key pair. The public key is placed on a distant server that you wish to use SSH to access. The key is saved in a special file called /.ssh/authorized keys in the user account you’ll be login into.</p>
<p>When a client uses SSH keys to authenticate, the server can check if the client has the private key. A shell session is started or the requested command is executed if the client can verify ownership of the private key.</p>
<h1 id="setting-up">Setting up</h1>
<p>The first thing we will have to to do is generate an SSH key pair on your local computer.</p>
<p>To do that type</p>
<p><code>ssh-keygen</code></p>
<p>You should see something like this</p>
<pre tabindex="0"><code>Generating public/private rsa key pair.
Enter file in which to save the key (/home/4rkal/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase):
</code></pre><p>If you want to you can enter a passphrase to encrypt the private key.</p>
<p>After that your key should be generated.</p>
<p>Now you will have to copy your public key to your server.</p>
<p>To do that type</p>
<p><code>ssh-copy-id username@host_ip</code></p>
<p>(find your servers ip by typing ifconfig in your server)</p>
<p>eg.</p>
<p>`ssh-copy-id <a href="mailto:server@192.168.1.13">server@192.168.1.13</a>'</p>
<p>Try to ssh into your server by typing</p>
<p><code>ssh username@host_ip</code></p>
<p>You should be able to login into your server without the password. However, brute force attacks continue to threaten your server. Now we have to disable password based authentication.</p>
<p>First login to your ssh server by typing
<code>ssh username@host_ip</code></p>
<p>Now we have edit the ssh config</p>
<p>sudo nano /etc/ssh/sshd_config</p>
<p>You should see a large file that starts with</p>
<pre tabindex="0"><code>#       $OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $
</code></pre><p>At this point press cntrl w and search for <code>PasswordAuthentication</code></p>
<p>Uncomment the line that says</p>
<p><code>#PasswordAuthentication yes</code></p>
<p>And change it to</p>
<p><code>PasswordAuthentication no</code></p>
<p>Now press cntrl s to save and cntrl x to exit</p>
<p>After that restart the ssh service with</p>
<p><code>sudo service ssh restart</code></p>
<p>Now try to ssh into your server from another machine or a vm and you should see something like this</p>
<p><code>server@192.168.1.13: Permission denied (publickey)</code></p>
<p>GG you have now secured your server</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup a tor website (hidden service)</title>
      <link>https://4rkal.eu.org/posts/torhs/</link>
      <pubDate>Sat, 25 Feb 2023 20:56:02 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/torhs/</guid>
      <description>In this article i will be showing you how to host your “dark web” aka Tor website for free.
What is Tor? Tor — short for the Onion Routing project — is an open-source privacy network that enables anonymous web browsing. The worldwide Tor computer network uses secure, encrypted protocols to ensure that users’ online privacy is protected. Tor users’ digital data and communications are shielded using a layered approach that resembles the nested layers of an onion.</description>
      <content:encoded><![CDATA[<p>In this article i will be showing you how to host your “dark web” aka Tor website for free.</p>
<h1 id="what-is-tor">What is Tor?</h1>
<p>Tor — short for the Onion Routing project — is an open-source privacy network that enables anonymous web browsing. The worldwide Tor computer network uses secure, encrypted protocols to ensure that users’ online privacy is protected. Tor users’ digital data and communications are shielded using a layered approach that resembles the nested layers of an onion.</p>
<h1 id="why-use-tor">Why use Tor?</h1>
<p>Tor is useful for anyone who wants to keep their internet activities out of the hands of advertisers, ISPs, and websites. That includes people getting around censorship restrictions in their country, people looking to hide their IP address, or anyone else who doesn’t want their browsing habits linked to them.</p>
<p>The Tor network may also host webpages that only other Tor users can view. In other words, you’ve entered the Dark Web, which consists of websites that aren’t indexed by the standard crawlers you use to look for products to purchase, and quiz answers etc . On the Dark Web, you can discover everything from free textbooks to drugs — and worse — as long as you know the secret URL that leads to these sites.</p>
<h1 id="tor-websites">Tor Websites</h1>
<p>Just like any other website, you will need to know the address of an onion service in order to connect to it. An onion address is a string of 56 mostly random letters and numbers, followed by “.onion”.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>A linux machine (debian preferably)</li>
<li>An internet connection (pretty hard without one,trust me)</li>
</ol>
<h1 id="installation">Installation</h1>
<p>The first thing we will have to do is install Tor</p>
<p><code>apt install tor</code></p>
<p>Now we will have to enable tor hidden service(which is the website) for that type:</p>
<p><code>sudo nano /etc/tor/torrc</code></p>
<p>You should see a large configuration file, search for <code>HiddenService</code></p>
<p>You will have to uncoment:</p>
<pre tabindex="0"><code>#HiddenServiceDir /var/lib/tor/hidden_service/
#HiddenServicePort 80 127.0.0.1:80
</code></pre><p>Now press cntrl s and then cntrl x to exit</p>
<p>After that start the tor service by running</p>
<p><code>sudo service tor start</code></p>
<p>or</p>
<p><code>sudo systemctl start tor</code></p>
<p>Now we also have to install nginx to be able to run our website to do that type</p>
<p><code>sudo apt install nginx</code></p>
<p>Start the nginx service with the systemctl or service command</p>
<p>Now we also have to install nginx to be able to run our website to do that type</p>
<p><code>sudo cat /var/lib/tor/hidden_service/hostname</code></p>
<p>You should see a address that looks something like this</p>
<p><code>tiur7p652svsaemdewbsxnnkrj3b35ny2rx454od5wk5ivfqhijm2qd.onion</code></p>
<p>Now open your tor browser and paste your address and press enter.</p>
<p>You will most probably be greeted by the default nginx site.</p>
<p>This page is easily customized, you can check out my article:
<a href="https://4rkal.eu.org/posts/shwebsite/">here</a></p>
<p>GG you did it you are now running a pretty anonymous website on the tor network.</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>The importance of open source software</title>
      <link>https://4rkal.eu.org/posts/opensource/</link>
      <pubDate>Sat, 25 Feb 2023 20:43:23 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/opensource/</guid>
      <description>As the linuxfoundation states about 95% of cloud providers run kubernetes which is an open sourced solution, the Apache Web server powers millions of websites including netflix.com, spotify.com and more. Most of the Internets core functions are based on open source technology. But what is it and why is it so important?
What is open sourced software?
Open-source software is computer software that is distributed under a license that allows users to use, study, modify, and distribute the program and its source code to anyone and for any purpose.</description>
      <content:encoded><![CDATA[<p>As the linuxfoundation states about 95% of cloud providers run kubernetes which is an open sourced solution, the Apache Web server powers millions of websites including netflix.com, spotify.com and more. Most of the Internets core functions are based on open source technology. But what is it and why is it so important?</p>
<p>What is open sourced software?</p>
<p>Open-source software is computer software that is distributed under a license that allows users to use, study, modify, and distribute the program and its source code to anyone and for any purpose. Open-source software may be created in a public, collaborative environment. Open-source software is a good example of open collaboration since it allows any skilled user to engage in development online.</p>
<p>&ldquo;Certainly there’s a phenomenon around open source. You know free software will be a vibrant area. There will be a lot of neat things that get done there.&rdquo;
-Bill Gates</p>
<h1 id="why-open-source">Why open source?</h1>
<p>There are several advantages to using open-source software.</p>
<ol>
<li>
<p><strong>Trust</strong>. One of the most important advantages is trust. As users can examine your code and make sure its not doing anything they don’t want it to. They are also able to change things they don’t like. Most cryptocurrency projects are open sourced to be able to develop trust with their community.</p>
</li>
<li>
<p><strong>Community</strong> A open source community allows more developers to build around the project . Bitcoin is the greatest example of such a community. As soon as bitcoin source code was published many utilities for bitcoin were made like wallets and more which would never have been made if bitcoin wasn’t open sourced.</p>
</li>
<li>
<p><strong>Transparency</strong> Anyone can read your source code and see if they want it to do what it is doing. That way your company gains a lot of trust.</p>
</li>
</ol>
<p>&ldquo;Talk is cheap show me the code&rdquo;
Linus Torvalds</p>
<ol start="4">
<li>
<p><strong>Continuous evolution</strong> Your project will continue to be developed even if you give up on it. Again the greatest example for this kind of project is bitcoin. Even though the founder of bitcoin has vanished for more than 10 years, cryptocurrency technology is &ldquo;changing&rdquo; the world.</p>
</li>
<li>
<p><strong>Lower Development costs</strong> (For companies) You can reduce your costs by using open source software. You can save money on licensing and maintenance. The only costs you’d have to deal with are those for documentation, media, support etc.</p>
</li>
<li>
<p><strong>Controll</strong> With open source YOU are ultimately in controll. If you dont like something you can modify the source code to your liking.</p>
</li>
</ol>
<p><em><strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Self host your own website</title>
      <link>https://4rkal.eu.org/posts/shwebsite/</link>
      <pubDate>Sat, 25 Feb 2023 20:23:16 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/shwebsite/</guid>
      <description>In this article i will show you how to self host your own website securely.
Requirements A computer or microcomputer to host the website The computer needs to run linux An internet connection (Its pretty hard without one, trust me) Lets get started!
Installation The first thing that we will have to do is setup our nginx site.
We first have to be root
sudo su
If you dont have sudo installed try:</description>
      <content:encoded><![CDATA[<p>In this article i will show you how to self host your own website securely.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>A computer or microcomputer to host the website</li>
<li>The computer needs to run linux</li>
<li>An internet connection (Its pretty hard without one, trust me)</li>
</ol>
<p>Lets get started!</p>
<h1 id="installation">Installation</h1>
<p>The first thing that we will have to do is setup our nginx site.</p>
<p>We first have to be root</p>
<p><code>sudo su</code></p>
<p>If you dont have sudo installed try:</p>
<p><code>su -</code></p>
<p>Now we will have to install nginx</p>
<p><code>apt install nginx</code></p>
<p>If you are using any other package manager install it using the package name nginx</p>
<p>Now we will have to start the nginx service</p>
<p><code>systemctl start nginx</code></p>
<p>or</p>
<p><code>service nginx start</code></p>
<p>Lets find your ip with:</p>
<p><code>ip a</code></p>
<p>or</p>
<p><code>ifconfig</code></p>
<p>If you open a web browser and go to your ip you should see the default welcome to nginx site.</p>
<p>Since we want to make our website as secure as possible we can hide the nginx version</p>
<p>To do that type</p>
<p>`sudo nano /etc/nginx/nginx.conf</p>
<p>Now you should see the nginx configuration file.</p>
<p>under</p>
<pre tabindex="0"><code>http {
##
        # Basic Settings
        ##
sendfile on;
        tcp_nopush on;
        types_hash_max_size 2048;
        # server_tokens off;
</code></pre><p>uncomment <code>server_tokens off;</code></p>
<p>Now restart your nginx service</p>
<p><code>systemctl restart nginx</code></p>
<p>We can now enter our html files inside of <code>/var/www/html</code></p>
<p>To do that type:</p>
<p><code>cd /usr/share/nginx/html</code></p>
<p>and now we can create the index.html file</p>
<p><code>nano index.html</code></p>
<p>and paste/write your html code to index.html</p>
<p>Now restart the nginx service again</p>
<p><code>systemctl restart nginx</code></p>
<h1 id="certbot">Certbot</h1>
<p>Now we will install cerbot in order to get https</p>
<p>To install certbot simply type</p>
<p><code>apt install certbot python-certbot-nginx</code></p>
<p>Now we will have to run certbot</p>
<p><code>certbot --nginx</code></p>
<p>Enter all the inf oand agree to the terms</p>
<p>After that you will have to enter the name you would like to activate https for</p>
<p>Just select the names</p>
<p>After that select to redirect http to https</p>
<h1 id="port-forwarding">Port forwarding</h1>
<p>There are a few ways to port forward. In this article we will use noip.com.</p>
<p>Head over to noip.com to get started (Use my referal <a href="https://www.noip.com/?fpr=4rkal">https://www.noip.com/?fpr=4rkal</a>)</p>
<p>Create an account and register a hostname</p>
<p>After that we will have to build the noip client on our computer for that paste these commands to your terminal</p>
<pre tabindex="0"><code>cd /usr/local/src
wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz
tar xzf noip-duc-linux.tar.gz
cd noip-2.1.9–1
make
make install
</code></pre><p>When you run make install you will be prompted to answer some questions like your login information and the update interval</p>
<p>In the update interval just set it to 30</p>
<p>Then if you don’t want to run something at a successful update type n if you do then type y.</p>
<p>You will now also have to edit the nginx default settings</p>
<p>to do that type</p>
<p>`sudo nano /etc/nginx/sites-available/default</p>
<p>Now you will have to change the server_name to the domain you registered at noip.com</p>
<p>You can check if your configuration was successful by running</p>
<p><code>nginx -t</code></p>
<p>You can now restart the nginx service</p>
<p><code>systemctl restart nginx</code></p>
<p>Now if you head to your domain it should be working and ssl should be installed</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Raspberry pi security camera</title>
      <link>https://4rkal.eu.org/posts/rpicamera/</link>
      <pubDate>Sat, 25 Feb 2023 20:03:25 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/rpicamera/</guid>
      <description>In this article i will show you how to setup a raspberry pi security camera using motion. In the end of this article you will have a fully functioning security camera with a live feed and motion detection.
Requirements Raspberry pi or any other computer Web cam Any kind of debian based distro installed on the pi/computer Setup In this article we will be using the motion package (https://motion-project.github.io/)
To get started power on your raspberry pi and ssh into the machine or just connect it to a monitor and a keyboard.</description>
      <content:encoded><![CDATA[<p>In this article i will show you how to setup a raspberry pi security camera using motion. In the end of this article you will have a fully functioning security camera with a live feed and motion detection.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>Raspberry pi or any other computer</li>
<li>Web cam</li>
<li>Any kind of debian based distro installed on the pi/computer</li>
</ol>
<h1 id="setup">Setup</h1>
<p>In this article we will be using the motion package (<a href="https://motion-project.github.io/">https://motion-project.github.io/</a>)</p>
<p>To get started power on your raspberry pi and ssh into the machine or just connect it to a monitor and a keyboard. Also connect your web cam to the raspberry pi usb port.</p>
<p>The first thing we will have to do is install motion, for that type the following command:<br>
<code>apt install motion</code><br>
Now start motion with:<br>
<code>systemctl start motion</code><br>
or<br>
<code>service motion start</code><br>
Now we are going to change some of the default settings . To do that type:<br>
<code>nano /etc/motion/motion.conf</code><br>
The first thing that we are going to change is<br>
<code>webcontrol_localhost off</code><br>
This will enable us to access the stream from other computers.</p>
<p>To view the stream run:</p>
<p><code>motion</code></p>
<p>If you get a permission denied error try running</p>
<p><code>sudo motion</code></p>
<p>If you got to http://YOUR_IP:8080 you should see a live feed of the web cam</p>
<p>You can change the port under webcontrol_port in the config file eg.
<code>webcontrol_port 1234</code></p>
<p>If you only want the live stream port you can go to http://your_ip:8081</p>
<p>Again you can change that under stream_port.</p>
<p>Now everything should be working fine. All motion detection files will be saved in /var/lib/motion</p>
<p>You can also change loads of other settings. Here are my settings:https://pastebin.com/WGn0NfcW</p>
<p>Read the documentation here: <a href="https://motion-project.github.io/motion_guide.html">https://motion-project.github.io/motion_guide.html</a></p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How SSH works</title>
      <link>https://4rkal.eu.org/posts/howsshworks/</link>
      <pubDate>Sat, 25 Feb 2023 19:36:25 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/howsshworks/</guid>
      <description>If you work in the IT industry, you’ve undoubtedly heard of ssh. But how does it work?
SSH (secure shell) is a network protocol that allows two computers to connect securely over the internet. SSH uses encryption to prevent hackers from reading data sent between two connected devices.
SSH is divided into three layers:
The transport layer The connection layer The authentication layer During and after authentication, the transport layer establishes safe and secure communication between a client and a server.</description>
      <content:encoded><![CDATA[<p>If you work in the IT industry, you’ve undoubtedly heard of ssh. But how does it work?<br>
SSH (secure shell) is a network protocol that allows two computers to connect securely over the internet. SSH uses encryption to prevent hackers from reading data sent between two connected devices.<br>
SSH is divided into three layers:</p>
<ol>
<li>The transport layer</li>
<li>The connection layer</li>
<li>The authentication layer</li>
</ol>
<p>During and after authentication, the transport layer establishes safe and secure communication between a client and a server. It is in charge of data encryption, decryption, and integrity assurance. It also provides data compression and caching, which helps to speed up data communication.</p>
<p>The authentication layer informs the client about the available authentication methods. It’s also in charge of the whole user authentication procedure.</p>
<p>After the authentication is successful, the connection layer oversees the communication between the machines. It manages communication channel opening and closure, as well as multiple channels for multiple sessions.</p>
<h1 id="session-encryption">Session Encryption</h1>
<p>The server sends the client a list of supported encryption protocols after receiving a connection request. The public key is used by the server as an authentication technique.</p>
<p>The client compares the protocols to the ones it already knows. If there are two protocols that are compatible, the machines agree to use one of them to establish the connection.</p>
<p>On the first connection attempt, the client compares the server’s public key to the private key saved in its system. If the keys are identical, the client and server agree to communicate using symmetric encryption during the SSH session. They communicate utilizing an asymmetrically encrypted mechanism based on the Diffie-Hellman (DH) key exchange algorithm for this purpose.
There are different ciphers that can be used for SSH depending on the applications being used. Some of them include:</p>
<ul>
<li>CHACHA20</li>
<li>AES-GCM</li>
<li>Blowfish-CBC</li>
<li>AES128-CTR</li>
<li>AES192-CTR</li>
<li>AES256-CTR</li>
<li>Arcfour</li>
<li>Cast128-CBC</li>
</ul>
<h1 id="different-encryption-techniques">Different Encryption Techniques</h1>
<p>SSH uses a variety of data manipulation techniques at various points in the transaction to ensure the security of information transmission. These include symmetrical and asymmetrical encryption, as well as hashing.</p>
<h1 id="symmetrical-encryption">Symmetrical Encryption</h1>
<p>Symmetric encryption creates a single key that is exchanged between two machines. The key is then used by the machines for both encryption and decryption. This approach is rapid and resource-light, and it is used by SSH for each session. When the client and server are deciding which algorithm to employ for an SSH session, the first algorithm on the client’s list that the server supports is always used.</p>
<h1 id="asymmetrical-encryption">Asymmetrical Encryption</h1>
<p>Any party can have access to the public key. Although it is linked to its paired key, the private key cannot be deduced from the public key. The public key and private key have a mathematical relationship that allows the public key to encrypt messages that can only be decrypted by the private key. This is a one-way ability, which means that the public key cannot decode the communications it sends or decrypt anything the private key sends it.</p>
<p>The private key should be kept completely confidential and never shared with anybody else. This is a necessary condition for the public key paradigm to function.The only component that can decrypt communications encrypted with the accompanying public key is the private key. Any entity capable of decrypting these messages has demonstrated control over the private key as a result of this fact.</p>
<h1 id="hashing">Hashing</h1>
<p>r key defining characteristics are that they are never supposed to be reversed, that they are nearly hard to predictably alter, and that they are practically unique.</p>
<p>If you use the same hashing function and message, you should get the same hash; if you change any part of the data, you should get a completely different hash. A user should not be able to deduce the actual message from a hash, but they should be able to determine whether a message produced a hash.</p>
<h1 id="session-encryption-negotiation">Session Encryption Negotiation</h1>
<p>The server sends the client a list of supported encryption protocols after receiving a connection request. The public key is used by the server as an authentication technique.</p>
<p>The client evaluates the protocols in comparison to its own. The machines choose one to create the connection using if there are any compatible protocols.</p>
<p>On the initial connection attempt, the client checks the server&rsquo;s public key to the saved copy of its own private key. The client and server consent to using symmetric encryption to communicate during an SSH session if the keys match. They converse utilizing an asymmetric encryption method that makes use of the Diffie-Hellman (DH) key exchange algorithm.</p>
<p>Using a public network, machines can safely collaborate to build a cryptographic key thanks to the DH algorithm. The machines go through the following processes to create a key:</p>
<ul>
<li>The machines agree on two numbers: a modulus and a base number. To prevent brute force key decryption, the chosen modulus is a prime number of at least 600 digits.</li>
<li>In order to solve the equation involving the two public numbers, the machines independently select one number.</li>
<li>The calculated values are exchanged between the server and the client.</li>
<li>Now, utilizing the information obtained from the other machine, each machine computes something.</li>
</ul>
<p>By carrying out the above processes, both machines determine the identical value, which is their secret key. The server then makes an attempt to verify the user&rsquo;s identity who made the access request.</p>
<p>***If you enjoyed this article consider <a href="../../donate">supporting me</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Automating your web browser with selenium</title>
      <link>https://4rkal.eu.org/posts/selenium/</link>
      <pubDate>Wed, 22 Feb 2023 21:23:38 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/selenium/</guid>
      <description>Selenium is a very good skill to have as you can automate almost everything that you can do with a web browser.
In this tutorial, we’ll learn how to use Python and Selenium to automate a web browser. This is an updated version of my previous article which unfortunately doesn&amp;rsquo;t work anymore. If you’re a complete beginner, read my python article to understand the basics. (https://4rkal.medium.com/f1df170bcc08/python-for-beginners)
What is selenium? Selenium is an open source umbrella project for a range of tools and libraries aimed at supporting browser automation.</description>
      <content:encoded><![CDATA[<p><strong>Selenium is a very good skill to have as you can automate almost everything that you can do with a web browser.</strong></p>
<p>In this tutorial, we’ll learn how to use Python and Selenium to automate a web browser. This is an updated version of my previous article which unfortunately doesn&rsquo;t work anymore. If you’re a complete beginner, read my python article to understand the basics. (<a href="https://4rkal.medium.com/f1df170bcc08/python-for-beginners">https://4rkal.medium.com/f1df170bcc08/python-for-beginners</a>)</p>
<h1 id="what-is-selenium">What is selenium?</h1>
<p>Selenium is an open source umbrella project for a range of tools and libraries aimed at supporting browser automation. You can use selenium in multiple programming languages including JavaScript (Node.js), C#, Groovy, Java, Perl, PHP, Python, Ruby and Scala and with multiple web browsers including firefox, internet explorer, safary, opera, chrome and edge. Selenium can be very useful for web scraping, automating boring and manual tasks and so much more.</p>
<h1 id="setup">Setup</h1>
<p>To install selenium you first have to install a browser driver. Here is the list of supported web browsers :</p>
<ul>
<li>Firefox</li>
<li>Internet Explorer?</li>
<li>Safari</li>
<li>Opera</li>
<li>Chrome</li>
<li>Edge
In this article we will be using firefox geckodriver. But you can use any of the browser drivers above.</li>
</ul>
<h1 id="downloading-geckodriver">Downloading geckodriver</h1>
<p>To get started go to github.com/mozilla/geckodriver/releases
Scroll down and select the package for your computer.
I’ll use geckodriver-v0.31.0-linux64.tar.gz because I’m using a linux 64-bit computer.</p>
<h1 id="installing-geckodriver">Installing geckodriver</h1>
<p>The setup varies depending on your operating system.</p>
<p>If you are using Arch Linux:
You can install geckodriver from the aur. Using your favourite aur helper</p>
<p>On linux:</p>
<ol>
<li>Unzip the file</li>
<li>Make the file executable
<code>chmod +x geckodriver</code></li>
<li>Add the driver to your PATH so other tools can find it:
<code>export PATH=$PATH:/path-to-extracted-file/</code>
On windows:</li>
<li>Unzip the file</li>
<li>Paste the file in the directory that your script will run</li>
</ol>
<h1 id="installing-selenium">Installing selenium</h1>
<p>To install selenium you have to have python and pip installed.Check out my article on python for <a href="../posts/python">more</a>
To install selenium open your cmd or terminal and type:<br>
<code>pip install selenium</code>
That should install it.\</p>
<h1 id="basics-of-selenium">Basics of selenium</h1>
<p>The first thing we have to do is to create a new file with the .py ending eg. main.py<br>
After you have created it open it in your ide or editor of choice.\</p>
<p>The first thing that we have to do is to import the selenium webdriver :
<code> from selenium import webdriver</code><br>
After that we have to specify what webdriver we are using. In our case its firefox
<code> browser = webdriver.Firefox()</code><br>
Now we need to specify the url that we want it to go to eg python.org</p>
<pre tabindex="0"><code>browser.get(&#39;https://python.org&#39;)
The full code so far is:\
import selenium
from selenium import webdriver
browser = webdriver.Firefox()
browser.get(&#39;https://python.org&#39;)
</code></pre><p>Now we might want it to click on the Downloads button</p>
<p>There are a few ways to do this</p>
<h1 id="method-1-of-clicking-a-button">Method 1 of clicking a button</h1>
<p>The first is with XPATH<br>
To find the xpath of a button / object on a website you have to open your web browser go to the desired website and hit F12 to get the development tools. Now you should click on the select tool (See below)
<img loading="lazy" src="/../assets/inspect.png" type="" alt="Inspect element"  />
Click on it and after that hover above the downloads button with your mouse and click it. After that you should see a bit of code getting highlighted. Right click on the bit of code and select Copy then select Xpath
<img loading="lazy" src="/../assets/copy.png" type="" alt="1"  />
Now go back to the python file and type:<br>
<code>driver.find_element(By.XPATH, 'XPATH_HERE')</code><br>
This will throw an error, to fix that error simply add this at the top of the file<br>
<code> from selenium.webdriver.common.by import By</code><br>
Your code so far should look like this</p>
<pre tabindex="0"><code>import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
browser = webdriver.Firefox()
browser.get(&#39;https://python.org&#39;)
browser.find_element(By.XPATH, &#39;/html/body/div/header/div/nav/ul/li[2]/a&#39;).click()
</code></pre><h1 id="method-2">Method 2</h1>
<p>XPATH with text
The second method is a bit simpler but not as reliable as the first as there might be many objects with the same name.<br>
To use this method type:
<code>browser.find_element(By.XPATH, &quot;//*[contains(text(), 'Downloads')]&quot;).click()</code>
Your code should look something like this</p>
<pre tabindex="0"><code>import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
browser = webdriver.Firefox()
browser.get(&#39;https://python.org&#39;)
browser.find_element(By.XPATH, &#34;//*[contains(text(), &#39;Downloads&#39;)]&#34;).click()
</code></pre><p>. . . . .</p>
<p>There many methods on how to locate elements but the above i believe are the easiest.
The methods are the following</p>
<ul>
<li>By.ID</li>
<li>By.NAME</li>
<li>By.XPATH</li>
<li>By.LINK-TEXT</li>
<li>By.TAG_NAME</li>
<li>By.CLASS_NAME</li>
<li>By.CSS_SELECTOR\</li>
</ul>
<p>Read more here: <a href="https://selenium-python.readthedocs.io/locating-elements.html">https://selenium-python.readthedocs.io/locating-elements.html</a></p>
<h1 id="typing-text-into-input-fields">Typing text into input fields.</h1>
<p>Typing text into input fields is pretty straight forward.<br>
For that we will use any of the above methods. I&rsquo;m going to use xpath.<br>
Find the xpath of any input field, I&rsquo;m going to use the google.com search field<br>
Copy the xpath and type:<br>
<code>a = browser.find_element(By.XPATH, &quot;XPATH_HERE&quot;)</code>
Paste the xpath in XPATH_HERE</p>
<p>To send keys we need to import the selenium.webdriver.common.keys library for that paste this line of code at the top of your file<br>
<code>from selenium.webdriver.common.keys import Keys</code><br>
Now type:<br>
<code>a.send_keys(&quot;python&quot;)</code><br>
After that we want to press the enter key for that type:<br>
<code>a.send_keys(Keys.RETURN)</code><br>
The full code should look something like this:</p>
<pre tabindex="0"><code>import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
browser = webdriver.Firefox()
browser.get(&#39;https://google.com&#39;)
a = browser.find_element(By.XPATH, &#34;/html/body/div[1]/div[3]/form/div[1]/div[1]/div[1]/div/div[2]/input&#34;)
a.send_keys(&#34;python&#34;)
a.send_keys(Keys.RETURN)
</code></pre><p>GG you just automated your first google search!
You might first need to accept cookies for that just follow the steps on how to click a button from above.<br>
Read more about selenium here: <a href="https://selenium-python.readthedocs.io/">https://selenium-python.readthedocs.io/</a>\</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Why computers can’t represent 0.3 accurately</title>
      <link>https://4rkal.eu.org/posts/zeropointthree/</link>
      <pubDate>Tue, 21 Feb 2023 19:27:44 +0300</pubDate>
      
      <guid>https://4rkal.eu.org/posts/zeropointthree/</guid>
      <description>Most people know that adding up 0.1 + 0.2 equals 0.3. However computers represent it as 0.30000000000000004 .
Here is a screenshot of it in python3 Your first thought might be that this is just some kind of error. Well its not
Why does this happen? Fractions can be represented precisely in the base 10 system (used by humans) if a prime factor of the base is used (10).
2 and 5 are the prime factors of 10.</description>
      <content:encoded><![CDATA[<p><strong>Most people know that adding up 0.1 + 0.2 equals 0.3. However computers represent it as 0.30000000000000004 .</strong></p>
<p>Here is a screenshot of it in python3
<img loading="lazy" src="/../assets/zeropointthree.png" type="" alt="0.1&#43;0.2 in python"  /></p>
<p>Your first thought might be that this is just some kind of error. Well its not</p>
<h1 id="why-does-this-happen">Why does this happen?</h1>
<p>Fractions can be represented precisely in the base 10 system (used by humans) if a prime factor of the base is used (10).</p>
<ul>
<li>2 and 5 are the prime factors of 10.</li>
<li>1/2, 1/4, 1/5 (0.2), 1/8, and 1/10 (0.1) can be expressed precisely as a result of denominators use prime factors of 10.</li>
<li>Whereas, 1/3, 1/6, and 1/7 are repeating decimals as a result of denominators use a prime factor of 3 or 7.
On the other hand, fractions can be represented precisely in the base 2 (binary) system (used by computers) if a prime factor of the base is used.</li>
<li>2 is the only prime factor of 2.</li>
<li>So 1/2, 1/4, 1/8 can all be expressed precisely because the denominators use prime factors of 2.</li>
<li>Whereas 1/5 (0.2) or 1/10 (0.1) are repeating decimals.
When you perform math on these repeating decimals, you end up with leftovers which carry over when you convert the computer’s base-2 (binary) number into a more human-readable base-10 representation.</li>
</ul>
<p>Read more:
0.300.com
Wikipedia:<br>
<a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic">https://en.wikipedia.org/wiki/Floating-point_arithmetic</a></p>
<p><strong>If you enjoyed this article consider <a href="../donate">donating</a></strong></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>linux on 4rkal&#39;s blog</title>
    <link>https://4rkal.com/tags/linux/</link>
    <description>Recent content in linux on 4rkal&#39;s blog</description>
    <image>
      <url>https://4rkal.com/4rkal.png</url>
      <link>https://4rkal.com/4rkal.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Sep 2024 11:54:29 +0300</lastBuildDate><atom:link href="https://4rkal.com/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploy django to production</title>
      <link>https://4rkal.com/posts/django-prod/</link>
      <pubDate>Fri, 20 Sep 2024 11:54:29 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/django-prod/</guid>
      <description>In this article I will show you how to deploy django to production. We will be using nginx, gunicorn and cloudflare tunnels</description>
      <content:encoded><![CDATA[<p>I recently deployed my very own django application to production. The website is called <a href="https://videiro.com">videiro.com</a> and was developed in django + HTML/CSS/JS + Tailwind.</p>
<h2 id="setup">Setup</h2>
<p>I am using a debian 12 server which will expose my application via cloudflare tunnels. All of the static files are being served via nginx and the Django project is being ran by gunicorn.</p>
<p>In this guide I will show you how I set this up.</p>
<h2 id="preparing-the-django-project">Preparing the Django project</h2>
<p>The first thing you will have to do is open the settings.py and change the following</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>Debug <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>ALLOWED_HOSTS <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;yourdomain.tld&#39;</span>]
</span></span><span style="display:flex;"><span>CSRF_COOKIE_SECURE <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>CSRF_TRUSTED_ORIGINS <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;yourdomain.tld&#39;</span>,
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>You should also change the <code>SECRET_KEY</code> to a long random string, that you should never share with anyone.</p>
<p>After that create a new file called <code>.gitignore</code> and paste the following:</p>
<pre tabindex="0"><code class="language-gitignore" data-lang="gitignore">db.sqlite3
*.pyc
</code></pre><p>This will make sure that the database is not uploaded to our server and that no pyc files are either.</p>
<p>Now you can upload your project to a new github repository (or gitea repository). If you don&rsquo;t want everyone to have access to your source code make sure to set the repository as private.</p>
<p>If you want to make sure that your source code stays private I recommend you setup a selfhosted gitea instance, read  <a href="https://4rkal.com/posts/gitea/">Selfhost your own gitea instance - selfhosted, lightweight github alternative</a>, to learn how to do that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span>git branch -M main
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;initial commit&#34;</span>
</span></span><span style="display:flex;"><span>git remote add origin https://...
</span></span><span style="display:flex;"><span>git push -u origin main
</span></span></code></pre></div><p>Now that you we have done that you should login to your server</p>
<h2 id="server-setup">Server setup</h2>
<p>Before configuring anything make sure that you don&rsquo;t allow any ssh logins with a password. Follow <a href="https://4rkal.com/posts/sssh/">Securing ssh with Key-Based authentication</a> to secure your server from those kinds of attacks.</p>
<p>Login to your server</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>ssh user@server.ip
</span></span></code></pre></div><p>Make sure that your packages are up to data</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo apt update <span style="color:#f92672">&amp;&amp;</span> sudo apt upgrade
</span></span></code></pre></div><p>Now install python, pip, git and nginx</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo apt install python3 python3-pip git nginx
</span></span></code></pre></div><p>Now clone your project into your home directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone https://...
</span></span><span style="display:flex;"><span>cd my-project
</span></span></code></pre></div><p>Once you&rsquo;re in install the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pip install django django-crispy-forms whitenoise
</span></span></code></pre></div><p>Now try to run the project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>python3 manage.py runserver
</span></span></code></pre></div><p>if you get an error that a package is missing install it and re run.</p>
<h2 id="configuring-gunicorn">Configuring gunicorn</h2>
<p>Now we will setup gunicorn</p>
<p>First install it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>pip install gunicorn
</span></span></code></pre></div><p>Now create a new file called gunicorn.service with your favorite text editor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo vim /etc/systemd/system/gunicorn.service
</span></span></code></pre></div><p>And paste the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#f92672">[</span>Unit<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Description<span style="color:#f92672">=</span>gunicorn daemon
</span></span><span style="display:flex;"><span>After<span style="color:#f92672">=</span>network.target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Service<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>User<span style="color:#f92672">=</span>YOURUSER
</span></span><span style="display:flex;"><span>Group<span style="color:#f92672">=</span>www-data
</span></span><span style="display:flex;"><span>WorkingDirectory<span style="color:#f92672">=</span>/home/YOURUSER/PROJECT
</span></span><span style="display:flex;"><span>ExecStart<span style="color:#f92672">=</span>/path/to/gunicorn --access-logfile - --workers <span style="color:#ae81ff">3</span> --bind 127.0.0.1:8000 PROJECTNAME.wsgi:application
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>Install<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>WantedBy<span style="color:#f92672">=</span>multi-user.target
</span></span></code></pre></div><p>Change <code>YOURUSER</code> to your user.</p>
<p>To find the path to <code>gunicorn</code> run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>which gunicorn
</span></span></code></pre></div><p>And your project name is the name of the folder inside of your project that contains the <code>settings.py</code> file.</p>
<p>Now run the following commands to start and enable gunicorn (start on boot)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl daemon-reload
</span></span><span style="display:flex;"><span>sudo systemctl start gunicorn.service
</span></span><span style="display:flex;"><span>sudo systemctl enable gunicorn.service
</span></span></code></pre></div><p>Now if you head to 127.0.0.1:8000 you should see your project running.</p>
<p>But were not finished yet</p>
<h2 id="setting-up-nginx">Setting up nginx</h2>
<p>Now we need to serve our static content via nginx.</p>
<p>First create a new file nginx configuration file with your favorite text editor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo vim /etc/nginx/sites-available/PROJECT
</span></span></code></pre></div><p>Change PROJECT to whatever you want</p>
<p>Now paste the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#66d9ef">server</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">listen</span> <span style="color:#ae81ff">80</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server_name</span> <span style="color:#e6db74">YOURDOMAIN</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">location</span> <span style="color:#e6db74">/static/</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">alias</span> <span style="color:#e6db74">/var/www/staticfiles/</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">location</span> <span style="color:#e6db74">/</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">proxy_pass</span> <span style="color:#e6db74">http://127.0.0.1:8000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">proxy_set_header</span> <span style="color:#e6db74">Host</span> $host;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">proxy_set_header</span> <span style="color:#e6db74">X-Real-IP</span> $remote_addr;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">proxy_set_header</span> <span style="color:#e6db74">X-Forwarded-For</span> $proxy_add_x_forwarded_for;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">proxy_set_header</span> <span style="color:#e6db74">X-Forwarded-Proto</span> $scheme;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Just change YOURDOMAIN to the domain that this will be hosted on.</p>
<p>Create a symbolic link to enable your website:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo ln -s /etc/nginx/sites-available/PROJECT /etc/nginx/sites-enabled/
</span></span></code></pre></div><p>Start and enable nginx:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl start nginx
</span></span><span style="display:flex;"><span>sudo systemctl enable nginx
</span></span></code></pre></div><h2 id="setup-static-files">Setup static files</h2>
<p>The first thing you will have to do is cd into your (django) project</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd project
</span></span></code></pre></div><p>Now run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>python3 manage.py collectstatic
</span></span></code></pre></div><p>This will create a new folder called <code>staticfiles</code></p>
<p>Now to set up the static files we have two options:</p>
<ol>
<li>Change the user in  <code>/etc/nginx/nginx.conf</code> to your user (less secure)</li>
<li>Copy over the staticfiles to <code>/var/www/</code> (more secure)</li>
</ol>
<p>I will be doing the 2nd option:</p>
<p>First create a new file called staticfiles in /var/www</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo mkdir -p /var/www/staticfiles
</span></span></code></pre></div><p>Now copy over all of the staticfiles from your project there:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo cp staticfiles/* /var/www/staticfiles
</span></span></code></pre></div><p>Now cd into /var/www</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd /var/www
</span></span></code></pre></div><p>Change the ownership of all the files</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo chown www-data:www-data staticfiles
</span></span><span style="display:flex;"><span>sudo chown www-data:www-data staticfiles/*
</span></span></code></pre></div><p>Restart the nginx service:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo systemctl restart nginx
</span></span></code></pre></div><p>Now if you head to:</p>
<p><code>127.0.0.1</code></p>
<p>You should see your website running with all of the static files being served!</p>
<h2 id="exposing-via-cloudflare-tunnels">Exposing via cloudflare tunnels</h2>
<p>Now to make your website publicly accessible.</p>
<p>To do this you will need a cloudflare account and a domain pointed to cloudflare.</p>
<p>First head to the <a href="https://one.dash.cloudflare.com/">Zero Trust Dashboard</a></p>
<p>Under <code>Networks</code> click on <code>Tunnels</code> and then <code>Create a tunnel</code></p>
<p>Once created you should <code>Install and run a connector</code>, follow the instructions on the page for your specific setup.</p>
<p>After the connector is running you should click on the <code>Public Hostname</code> tab and <code>Add a public hostname</code>.</p>
<p>Now you should see something like this:
<img loading="lazy" src="/../assets/gitea2.png" type="" alt="Cloudflare dashboard"  /></p>
<p>Fill in the info as I have.
The service type should be <code>HTTP</code> and the url should be <code>127.0.0.1:80</code> or <code>localhost:80</code></p>
<p>Now if you head to the domain that you specified you should see your app up and running.</p>
<p>Congratulations!</p>
<p><strong>If you enjoyed this post and want to support my (mostly unpaid) work , you can <a href="https://4rkal.com/donate">donate here</a>.</strong></p>
<h2 id="join-my-free-newsletter">Join my free newsletter!</h2>
<div style="text-align: left; margin: 0 auto;">
    <form method="post" action="https://newsletter.4rkal.com/subscription/form" style="background: #2c2c2c; color: #f0f0f0; border-radius: 8px; padding: 15px; max-width: 500px; box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2); font-family: Arial, sans-serif;">
        <div style="display: flex; flex-direction: column; gap: 10px;">
            <h3 style="margin: 0; color: #f0f0f0; font-size: 18px;">Subscribe</h3>
            <input type="hidden" name="nonce"/>
            <input type="email" name="email" required placeholder="E-mail" style="width: 100%; padding: 10px; border: 1px solid #666; border-radius: 4px; background: #333; color: #f0f0f0; box-sizing: border-box;"/>
            <div style="display: flex; flex-direction: column; gap: 8px;">
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="78a75" type="checkbox" name="l" checked value="78a75b30-472d-4790-a5d5-7f2ed49662a4" style="accent-color: #fff;"/>
                    Weekly Roundup
                </label>
                <span style="color: #d0d0d0; display: none;">Where I share what I’ve been up to that week, including articles I’ve published, cool finds, tips and tricks, and more!</span>
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="b3964" type="checkbox" name="l" checked value="b3964560-37b0-43d3-9df9-26589fd6bf8d" style="accent-color: #fff;"/>
                    New Posts
                </label>
                <span style="color: #d0d0d0; display: none;">Receive an email every time I post something new on my blog</span>
            </div>
            <input type="submit" value="Subscribe" style="width: 100%; padding: 10px; border: none; border-radius: 4px; background: #fff; color: #007bff; font-size: 14px; cursor: pointer; transition: background-color 0.3s ease, box-shadow 0.3s ease; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);"/>
        </div>
        <p style="text-align: center; margin-top: 10px; color: #d0d0d0; font-size: 10px; margin-bottom:0px;">
            No spam, no ads. Unsubscribe at any time.
        </p>
    </form>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Setup a selfhosted newsletter using listmonk</title>
      <link>https://4rkal.com/posts/listmonk/</link>
      <pubDate>Fri, 23 Aug 2024 11:19:17 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/listmonk/</guid>
      <description>Listmonk is an amazing feature packed selfhosted email newsletter manager. It offers loads of features like analytics (clicks, opens, bounces), templates, public subscription pages, importing subscribers and much more!</description>
      <content:encoded><![CDATA[<h2 id="what-is-listmonk">What is listmonk?</h2>
<p><a href="https://listmonk.app">Listmonk</a> is a selfhosted newsletter and mailing list manager. It is free and opensource, so you have full control over your data. It also offers a super clean webui:</p>
<p><img loading="lazy" src="/../assets/listmonk.png" type="" alt="Listmonk WebUI"  /></p>
<h2 id="why-choose-listmonk-over-mailchimp-buttodown-etc">Why choose listmonk over mailchimp, buttodown etc</h2>
<p>For me, running a newsletter means owning my email list.</p>
<p>When people create newsletters they want to break free from the big platforms like Twitter or YouTube. When you use a proprietary service like Mailchimp, you’re still tied down to their rules and limitations. With Listmonk, you get more control and independence, which for me is a huge win.</p>
<p>The other reason is that listmonk is completely free (if you don&rsquo;t count electricity bills/vps hosting bills). Even if you include the cost of your email host + hosting fees it is still tiny compared to mailchimp or buttondown.</p>
<h2 id="listmonk-feature-overview">Listmonk feature overview</h2>
<ol>
<li>Analytics - Tracking email opens, link clicks and bounces</li>
<li>Templates - Advanced html templates with template variables</li>
<li>Public subscription page - See mine <a href="https://newsletter.4rkal.com/subscription/form">here</a></li>
<li>Subscribers import - Import subscribers from other platforms using CSV.</li>
<li>Media Uploads - Upload images etc</li>
<li>Email lists - Separate lists eg Weekly roundup and new posts.</li>
</ol>
<p>And more</p>
<h2 id="requirements-for-running-listmonk">Requirements for running listmonk</h2>
<ol>
<li>A server running linux, either in the cloud or at home. We will be using debian 12, but you can use any other distribution.</li>
<li>An email address to send the newsletter from. Can either be a gmail or a custom one.</li>
</ol>
<h2 id="server-setup">Server Setup</h2>
<p>Before doing anything I highly recommend that you disable password logins for ssh. See <a href="https://4rkal.com/posts/sssh/">Securing ssh with Key-Based authentication</a> for more info on how to do that.</p>
<p>Login to your server via ssh</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>ssh user@server.ip
</span></span></code></pre></div><p>Make sure that all packages are up to date</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo apt update <span style="color:#f92672">&amp;&amp;</span> sudo apt upgrade
</span></span></code></pre></div><p>Create a new directory to host listmonk&rsquo;s configuration files</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>mkdir listmonk <span style="color:#f92672">&amp;&amp;</span> cd listmonk
</span></span></code></pre></div><p>Download the listmonk production script (I highly recommend you read scripts before running them)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sh -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/knadh/listmonk/master/install-prod.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Now if you head to</p>
<pre tabindex="0"><code>localhost:9000
</code></pre><p>You should see listmonk up and running</p>
<p>But first we should change some settings in the configuration files</p>
<pre tabindex="0"><code>vim config.toml
</code></pre><p>Here you can change the default admin password. I also changed the address to 0.0.0.0 so that I can access it via the servers ip.</p>
<h2 id="listmonk-customization">Listmonk customization</h2>
<p>Now head to the webui at</p>
<pre tabindex="0"><code>localhost:9000
</code></pre><p>Login and head to the settings</p>
<p>In the <code>General</code> tab you can customize the default from email, root url, site name, favicon and admin notification emails</p>
<p>Here&rsquo;s what my settings look like:</p>
<p><img loading="lazy" src="/listmonk2.png" type="" alt="Listmonk Settings"  /></p>
<p>You can customize the page to your liking.</p>
<p>Save by clicking on the save button in the top right corner.</p>
<h2 id="email-setup">Email setup</h2>
<p>For the next part you will either need a gmail account or any other email provider that give you smtp connection</p>
<p>If you want a great custom email I recommend ionos, you can get up to 10$ in credits by using my link <a href="http://aklam.io/bbxioA">Ionos - Email &amp; Office 10$ credits </a> that is the provider that I am currently using.</p>
<p>In this guide I will show you how to set this up for these two providers, but the setup should be similar for others too.</p>
<p><strong>IMPORTANT</strong>: Both of these hosts have a limit on how many emails can be sent out per hour or per day. For ionos that is 500/hour. Setting up a <a href="#sliding-window-limit">Sliding Window Limit</a> is very important.</p>
<h3 id="setup-for-gmail">Setup for gmail</h3>
<p>I recommend that you use a different gmail account from your personal one.</p>
<p>The first thing you will have to do is generate an app password, to do that head to <a href="https://myaccount.google.com/apppasswords">Create and manage app passwords</a> and create a new one called listmonk. Copy the password that is generated and save it somewhere safe.</p>
<p>Now head over to the listmonk webui</p>
<p>In the <code>SMTP</code> tab in settings you will find this:</p>
<p><img loading="lazy" src="/../assets/listmonk3.png" type="" alt="Gmail SMTP"  /></p>
<p>Click on the gmail option as circled.</p>
<p>Now enter your full email address (including @gmail.com) in the username field</p>
<p>And in the password field enter the app password we generated before.</p>
<p>Now click on the <code>Test connection</code> button in the bottom right corner, enter a test email and click on <code>Send e-mail</code>.</p>
<p>If you configured everything correctly you should now get a test message to the email specified.</p>
<p>Don&rsquo;t forget to save!</p>
<h3 id="setup-for-ionos">Setup for ionos</h3>
<p>You should probably generate a new email for the newsletter, eg `<a href="mailto:newsletter@yourdomain.tld">newsletter@yourdomain.tld</a>.</p>
<p>Head over to the listmonk webui</p>
<p>Now in the <code>SMTP</code> tab in the settings you see this</p>
<p><img loading="lazy" src="/../assets/listmonk4.png" type="" alt="Gmail SMTP"  /></p>
<p>The ionos smtp server settings are:</p>
<p>Host: <code>smtp.ionos.com</code></p>
<p>Port: <code>465</code></p>
<p>TLS: <code>SSL/TLS</code></p>
<p><strong>IMPORTANT</strong>: If you’re using IONOS UK or another specific regional version, you need to adjust the host name. For example, if you’re on IONOS UK, you should use <code>smtp.ionos.co.uk</code> instead of the global <code>smtp.ionos.com</code>.</p>
<p>Now in the username field you should enter the full email address <code>newsletter@yourdomain.tld</code> and the password is the normal user password.</p>
<p>Now to test the connection click on the <code>Test connection</code> button in the bottom right corner, enter a test email and click on <code>Send e-mail</code>.</p>
<p>If you configured everything correctly you should now get a test message to the email specified.</p>
<p>Don&rsquo;t forget to save!</p>
<h2 id="sliding-window-limit">Sliding window limit</h2>
<p>This is very important to setup when email providers limit the amount of email to be sent per hour or per day. You can access the Sliding window limit in <code>Settings</code> under the performance tab. For ionos I have it set at 500 emails/hour</p>
<h2 id="exposing-via-cloudflare-tunnels">Exposing via cloudflare tunnels</h2>
<p>I will be making my instance publicly accessible using cloudflare tunnels.</p>
<p>To do this you will need a cloudflare account and a domain pointed to cloudflare.</p>
<p>First head to the <a href="https://one.dash.cloudflare.com/">Zero Trust Dashboard</a></p>
<p>Under <code>Networks</code> click on <code>Tunnels</code> and then <code>Create a tunnel</code></p>
<p>Once created you should <code>Install and run a connector</code>, follow the instructions on the page for your specific setup.</p>
<p>After the connector is running you should click on the <code>Public Hostname</code> tab and <code>Add a public hostname</code>.</p>
<p>Now you should see something like this:
<img loading="lazy" src="/../assets/listmonk5.png" type="" alt="Zero Trust Dashboard"  /></p>
<p>Fill in the info as I have.</p>
<p>The service type should be <code>HTTP</code> and the url should be <code>yourserverurl:9000</code>, in my case that&rsquo;s 127.0.0.1:9000</p>
<p>Now if you head to the domain that you specified you should see gitea up and running.</p>
<p>In my case you can access my newsletter page <a href="https://newsletter.4rkal.com/subscription/form">here</a></p>
<h2 id="listmonk-feature-overview-1">Listmonk feature overview</h2>
<p>These are all of the features that listmonk offers:</p>
<h3 id="templates">Templates</h3>
<p>Listmonk offers amazing built in template support.</p>
<p>All templates are written in HTML.</p>
<p>You can access the templates by going to <code>Campaigns &gt; Templates</code>.</p>
<p>Don&rsquo;t forget to always include <code>{{ template &quot;content&quot; . }}</code> (for the main content) and also an unsubscribe button in all of your templates</p>
<h3 id="campaigns">Campaigns</h3>
<p>You can create a new campaign (email) by going to <code>Campaigns &gt; All Campaigns</code></p>
<p>Here you can select a campaign name, subject the list&rsquo;s you want to target and the template</p>
<h3 id="email-lists">Email lists</h3>
<p>You can create new lists by going to <code>Lists &gt; All Lists</code>.</p>
<p>For example I have two lists:</p>
<ol>
<li>New posts - Receive an email every time I post something new on my blog</li>
<li>Weekly Roundup - Join my weekly roundup, where I share what I’ve been up to that week, including articles I’ve published, cool finds, tips and tricks and more!</li>
</ol>
<p>Not everyone wants to receive an email every time I post a new article, so I created two lists!</p>
<h3 id="html-forms">HTML Forms</h3>
<p>Listmonk also offers embeddable html forms, to subscribe to the email list. You can access the form builder by going to <code>Lists &gt; Forms</code></p>
<h3 id="public-subscription-page">Public subscription page</h3>
<p>Except for the HTML forms listmonk also has a public subscription page. For example <a href="https://newsletter.4rkal.com/subscription/form">here</a> is mine.</p>
<p>It can also be accessed under `Lists &gt; Forms</p>
<h3 id="campaign-analytics">Campaign analytics</h3>
<p>You can track the views, clicks and bounces of your email campaigns by going to <code>Campaigns &gt; Analytics</code>.</p>
<h3 id="import-subscribers">Import subscribers</h3>
<p>You can import subscribers from other platforms by going to <code>Subscribers &gt; Import</code>. It currently supports CSV or ZIP files.</p>
<p>These are the most important features that listmonk offers (I&rsquo;m sure I forgot some).</p>
<h2 id="thats-all-folks">That&rsquo;s all folks</h2>
<p>If this article helped you out, consider joining my (listmonk) <strong>newsletter bellow</strong>:</p>
<div style="text-align: left; margin: 0 auto;">
    <form method="post" action="https://newsletter.4rkal.com/subscription/form" style="background: #2c2c2c; color: #f0f0f0; border-radius: 8px; padding: 15px; max-width: 500px; box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2); font-family: Arial, sans-serif;">
        <div style="display: flex; flex-direction: column; gap: 10px;">
            <h3 style="margin: 0; color: #f0f0f0; font-size: 18px;">Subscribe</h3>
            <input type="hidden" name="nonce"/>
            <input type="email" name="email" required placeholder="E-mail" style="width: 100%; padding: 10px; border: 1px solid #666; border-radius: 4px; background: #333; color: #f0f0f0; box-sizing: border-box;"/>
            <div style="display: flex; flex-direction: column; gap: 8px;">
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="78a75" type="checkbox" name="l" checked value="78a75b30-472d-4790-a5d5-7f2ed49662a4" style="accent-color: #fff;"/>
                    Weekly Roundup
                </label>
                <span style="color: #d0d0d0; display: none;">Where I share what I’ve been up to that week, including articles I’ve published, cool finds, tips and tricks, and more!</span>
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="b3964" type="checkbox" name="l" checked value="b3964560-37b0-43d3-9df9-26589fd6bf8d" style="accent-color: #fff;"/>
                    New Posts
                </label>
                <span style="color: #d0d0d0; display: none;">Receive an email every time I post something new on my blog</span>
            </div>
            <input type="submit" value="Subscribe" style="width: 100%; padding: 10px; border: none; border-radius: 4px; background: #fff; color: #007bff; font-size: 14px; cursor: pointer; transition: background-color 0.3s ease, box-shadow 0.3s ease; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);"/>
        </div>
        <p style="text-align: center; margin-top: 10px; color: #d0d0d0; font-size: 10px; margin-bottom:0px;">
            No spam, no ads. Unsubscribe at any time.
        </p>
    </form>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>SSH Remote Access NO Port-Forwarding NO Cloudflare</title>
      <link>https://4rkal.com/posts/onionssh/</link>
      <pubDate>Wed, 04 Oct 2023 19:17:04 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/onionssh/</guid>
      <description>In this article I will show you how I securely connect to my remote machines without having to configure port forwarding.
Requirements: A computer &amp;ldquo;server&amp;rdquo; (running linux) A internet connection Another computer to connect to your server (running linux) Why? If you want to access your server without portforwarding in a extremely secure fashion you will want to follow this tutorial. You will be connecting to the server via tor which will make it harder for anyone to find the url of the server and ill show you how to setup keybased auth for even more security!</description>
      <content:encoded><![CDATA[<p>In this article I will show you how I securely connect to my remote machines without having to configure port forwarding.</p>
<h2 id="requirements">Requirements:</h2>
<ol>
<li>A computer &ldquo;server&rdquo; (running linux)</li>
<li>A internet connection</li>
<li>Another computer to connect to your server (running linux)</li>
</ol>
<h2 id="why">Why?</h2>
<p>If you want to access your server without portforwarding in a extremely secure fashion you will want to follow this tutorial. You will be connecting to the server via tor which will make it harder for anyone to find the url of the server and ill show you how to setup keybased auth for even more security!</p>
<h2 id="setup">Setup</h2>
<p>You will have to install the following packages (ssh, tor)</p>
<p>On debian</p>
<p><code>sudo apt install openssh-client</code></p>
<p>On arch</p>
<p><code>sudo pacman -S openssh</code></p>
<p>After that enable the ssh service</p>
<p>Debian:</p>
<p><code>sudo systemctl enable ssh</code></p>
<p>Arch:</p>
<p><code>sudo systemctl enable sshd</code></p>
<p>If you want to check if this worked just use another computer and run</p>
<p><code>ssh USER@IP</code></p>
<p>for example I run</p>
<p><code>ssh arkal@192.168.1.69</code></p>
<p>After this you can enable KeyBased authentication for more security</p>
<p>Here is my article how to enable that :</p>
<p><a href="https://4rkal.eu.org/posts/sssh/">Enable keybased authentication</a></p>
<p>Now we need to install tor:</p>
<p>On debian</p>
<p><code>sudo apt install tor</code></p>
<p>On arch</p>
<p><code>sudo pacman -S tor</code></p>
<p>Then start and enable the tor service with</p>
<p><code>sudo systemctl start tor &amp;&amp; sudo systemctl enable tor</code></p>
<p>After you have done that you want to edit your torrc file. Using your favorite text editor</p>
<p><code>sudo vim /etc/tor/torrc</code></p>
<p>Now you will want to navigate to the part that says HiddenService. And paste the following</p>
<pre tabindex="0"><code>HiddenServiceDir /var/lib/tor/ssh/
HiddenServicePort 22 127.0.0.1:22
</code></pre><p>Save your file and exit the editor (for nano cntrl s, cntrl x)</p>
<p>Now you want will have to restart the tor service</p>
<p><code>sudo systemctl restart tor</code></p>
<p>After that run the following:</p>
<p><code>sudo cat /var/lib/tor/ssh/hostname</code></p>
<p>You should see a string of letters and characters ending in .onion </p>
<p>Now on your other machine:</p>
<h2 id="connecting-to-the-server">Connecting to the server</h2>
<p>On your main machine you will have to do the following:</p>
<p>Have ssh, tor, and socat installed</p>
<p>After you have installed them you will have to edit the ssh config</p>
<p><code>vim .ssh/config</code></p>
<p>And paste the following</p>
<pre tabindex="0"><code>Host NAME
 Hostname URL.onion
 User USER
 Port 22
 Proxycommand socat - SOCKS4A:127.0.0.1:%h:%p,socksport=9050
</code></pre><p>You will have to change the NAME, URL and USER. The user is the user you want to connect as to your server and the url is the url you that ends in .onion from above.</p>
<p>Now save the file and exit.</p>
<p>Now edit the torrc file. Using your favorite text editor:</p>
<p><code>vim /etc/tor/torrc</code></p>
<p>Find the line that says SOCKSPort and uncomment it</p>
<p><code>SOCKSPort 9050</code></p>
<p>Restart the tor service</p>
<p><code>systemctl restart tor</code></p>
<p>To connect to the server run the following command:</p>
<p><code>ssh NAME</code></p>
<p>With NAME being the name that you gave to the server in the config file.</p>
<p><strong>If this article helped you out consider <a href="https://4rkal.eu.org/donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Create a MultiBoot USB using ventoy</title>
      <link>https://4rkal.com/posts/ventoy/</link>
      <pubDate>Mon, 06 Mar 2023 20:11:51 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/ventoy/</guid>
      <description>With ventoy, you don’t need to format the disk over and over, you just need to copy the ISO files to the USB drive and boot them directly.
Whats ventoy? Ventoy is a free and open-source utility used for writing image files such as .iso, .wim, .img, .vhd(x), and .efi files onto storage media to create bootable USB flash drives. Once Ventoy is installed onto a USB drive, there is no need to reformat the disk to update it with new installation files; it is enough to copy the .</description>
      <content:encoded><![CDATA[<p>With ventoy, you don’t need to format the disk over and over, you just need to copy the ISO files to the USB drive and boot them directly.</p>
<h2 id="whats-ventoy">Whats ventoy?</h2>
<p>Ventoy is a free and open-source utility used for writing image files such as .iso, .wim, .img, .vhd(x), and .efi files onto storage media to create bootable USB flash drives. Once Ventoy is installed onto a USB drive, there is no need to reformat the disk to update it with new installation files; it is enough to copy the .iso to the USB drive and boot from them directly. Ventoy will present the user with a boot menu to select one of these files.</p>
<h2 id="requirements">Requirements</h2>
<ol>
<li>a computer</li>
<li>a internet connection (pretty hard without one)</li>
<li>a usb (min 8gb)</li>
</ol>
<h2 id="installation">Installation</h2>
<p>Ventoy is available on both linux and windows.</p>
<p>The first thing you will have to do is head to ventoy.net . On the download page select your operating system and click on download.</p>
<h2 id="on-linux">On linux</h2>
<p>After you have extracted the file open the folder and click on the VentoyGUI .</p>
<p>Depending on your processor type select the file ending in either aarch64 i386 mips64el or x86_64. (It will most probably be x86_64).</p>
<p>After that you should see something like this:
<img loading="lazy" src="/../assets/ventoy.webp" type="" alt="Ventoy on linux"  /></p>
<p>Select your device from the devices tab</p>
<p>Then click on install.</p>
<h2 id="on-windows">On windows</h2>
<p>Download the file and unzip it</p>
<p>Then click on the file called Ventoy2Disk.exe</p>
<p>You should see something like this</p>
<p><img loading="lazy" src="/../assets/ventoy-win.webp" type="" alt="Ventoy on Windows"  /></p>
<p>Select your usb device from the drop down and click on install.</p>
<h1 id="using-ventoy">Using ventoy</h1>
<p>To use ventoy all you have to do is paste your iso files inside of the usb. No need for formatting etc.</p>
<p>When you boot into your usb you will be prompted which of the iso&rsquo;s to use. That&rsquo;s about it.</p>
<p>Enjoy not having to reformat your usb for each iso/OS.</p>
<h3 id="join-my-free-newsletter">Join my free newsletter!</h3>
<div style="text-align: left; margin: 0 auto;">
    <form method="post" action="https://newsletter.4rkal.com/subscription/form" style="background: #2c2c2c; color: #f0f0f0; border-radius: 8px; padding: 15px; max-width: 500px; box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2); font-family: Arial, sans-serif;">
        <div style="display: flex; flex-direction: column; gap: 10px;">
            <h3 style="margin: 0; color: #f0f0f0; font-size: 18px;">Subscribe</h3>
            <input type="hidden" name="nonce"/>
            <input type="email" name="email" required placeholder="E-mail" style="width: 100%; padding: 10px; border: 1px solid #666; border-radius: 4px; background: #333; color: #f0f0f0; box-sizing: border-box;"/>
            <div style="display: flex; flex-direction: column; gap: 8px;">
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="78a75" type="checkbox" name="l" checked value="78a75b30-472d-4790-a5d5-7f2ed49662a4" style="accent-color: #fff;"/>
                    Weekly Roundup
                </label>
                <span style="color: #d0d0d0; display: none;">Where I share what I’ve been up to that week, including articles I’ve published, cool finds, tips and tricks, and more!</span>
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="b3964" type="checkbox" name="l" checked value="b3964560-37b0-43d3-9df9-26589fd6bf8d" style="accent-color: #fff;"/>
                    New Posts
                </label>
                <span style="color: #d0d0d0; display: none;">Receive an email every time I post something new on my blog</span>
            </div>
            <input type="submit" value="Subscribe" style="width: 100%; padding: 10px; border: none; border-radius: 4px; background: #fff; color: #007bff; font-size: 14px; cursor: pointer; transition: background-color 0.3s ease, box-shadow 0.3s ease; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);"/>
        </div>
        <p style="text-align: center; margin-top: 10px; color: #d0d0d0; font-size: 10px; margin-bottom:0px;">
            No spam, no ads. Unsubscribe at any time.
        </p>
    </form>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>How to Set Up Your Own Git Server: A Simple Guide</title>
      <link>https://4rkal.com/posts/git/</link>
      <pubDate>Sun, 05 Mar 2023 17:11:40 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/git/</guid>
      <description>Thinking about setting up your own Git server? There are plenty of perks to doing so instead of relying on platforms like GitHub. For starters, you&amp;rsquo;ll have complete control over your code, ensuring it can’t be used for profit or deleted by anyone but you.
What You’ll Need A Computer for Your Server: Ideally running Linux (Debian is a solid choice). Internet Connection: Pretty essential for accessing your server remotely. Another Computer with Git Installed: This is what you&amp;rsquo;ll use to interact with your server.</description>
      <content:encoded><![CDATA[<p>Thinking about setting up your own Git server? There are plenty of perks to doing so instead of relying on platforms like GitHub. For starters, you&rsquo;ll have complete control over your code, ensuring it can’t be used for profit or deleted by anyone but you.</p>
<h3 id="what-youll-need">What You’ll Need</h3>
<ol>
<li><strong>A Computer for Your Server</strong>: Ideally running Linux (Debian is a solid choice).</li>
<li><strong>Internet Connection</strong>: Pretty essential for accessing your server remotely.</li>
<li><strong>Another Computer with Git Installed</strong>: This is what you&rsquo;ll use to interact with your server.</li>
</ol>
<h3 id="step-by-step-setup-guide">Step-by-Step Setup Guide</h3>
<h4 id="1-install-git-on-your-server">1. Install Git on Your Server</h4>
<p>First, you need to install Git on your server. Depending on your Linux distribution, use one of these commands:</p>
<ul>
<li>For Debian-based systems (like Ubuntu):
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo apt install git
</span></span></code></pre></div></li>
<li>For Fedora-based systems:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo dnf install git
</span></span></code></pre></div></li>
<li>For Arch-based systems:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo pacman -S git
</span></span></code></pre></div></li>
</ul>
<h4 id="2-create-a-git-user">2. Create a Git User</h4>
<p>Next, create a dedicated user for Git operations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo useradd git
</span></span></code></pre></div><p>You&rsquo;ll be prompted to enter some information. Feel free to leave everything blank except for the password.</p>
<h4 id="3-secure-your-server-with-ssh-keys">3. Secure Your Server with SSH Keys</h4>
<p>Log in as the new Git user:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>su git
</span></span></code></pre></div><p>Then, enhance security by setting up SSH keys:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir .ssh
</span></span><span style="display:flex;"><span>chmod <span style="color:#ae81ff">700</span> .ssh/
</span></span><span style="display:flex;"><span>touch .ssh/authorized_keys
</span></span><span style="display:flex;"><span>chmod <span style="color:#ae81ff">600</span> .ssh/authorized_keys
</span></span></code></pre></div><h4 id="4-generate-and-add-ssh-keys">4. Generate and Add SSH Keys</h4>
<p>On your main machine (the one you’ll be committing from), generate an SSH key:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ssh-keygen
</span></span></code></pre></div><p>Copy the SSH public key to your server:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ssh-copy-id git@your-server-ip
</span></span></code></pre></div><p>To find your server&rsquo;s IP, use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ifconfig
</span></span></code></pre></div><p>Now, you should be able to log in to your server without needing a password:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ssh git@your-server-ip
</span></span></code></pre></div><h4 id="5-set-up-your-git-repository-directory">5. Set Up Your Git Repository Directory</h4>
<p>Create a directory to store your Git repositories. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir ~/git
</span></span></code></pre></div><p>Give ownership of this directory to the Git user:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chown git:git ~/git
</span></span></code></pre></div><h4 id="6-create-a-new-repository">6. Create a New Repository</h4>
<p>For each project, create a separate directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir ~/git/my_cool_project.git
</span></span></code></pre></div><p>Initialize the repository as a bare repository (suitable for sharing):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ~/git/my_cool_project.git
</span></span><span style="display:flex;"><span>git init --bare
</span></span></code></pre></div><h4 id="7-test-your-setup">7. Test Your Setup</h4>
<p>To test your new Git server, try cloning the repository from another machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone git@your-server-ip:~/git/my_cool_project.git
</span></span></code></pre></div><p>You might see:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>warning: You appear to have cloned an empty repository.
</span></span></code></pre></div><p>That’s because you haven’t added any files yet. Go ahead and add a file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>touch stuff.txt
</span></span></code></pre></div><p>Commit your changes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;first commit&#34;</span>
</span></span></code></pre></div><p>Now, try cloning again, and everything should work smoothly.</p>
<h3 id="congratulations">Congratulations!</h3>
<p>You’ve successfully set up your own Git server! Now you have full control over your code and can collaborate without relying on third-party services.</p>
<p><em>Enjoyed this guide? Consider <a href="https://4rkal.com/donate">supporting me</a> to help me create more content like this!</em></p>
<div style="text-align: left; margin: 0 auto;">
    <form method="post" action="https://newsletter.4rkal.com/subscription/form" style="background: #2c2c2c; color: #f0f0f0; border-radius: 8px; padding: 15px; max-width: 500px; box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2); font-family: Arial, sans-serif;">
        <div style="display: flex; flex-direction: column; gap: 10px;">
            <h3 style="margin: 0; color: #f0f0f0; font-size: 18px;">Subscribe</h3>
            <input type="hidden" name="nonce"/>
            <input type="email" name="email" required placeholder="E-mail" style="width: 100%; padding: 10px; border: 1px solid #666; border-radius: 4px; background: #333; color: #f0f0f0; box-sizing: border-box;"/>
            <div style="display: flex; flex-direction: column; gap: 8px;">
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="78a75" type="checkbox" name="l" checked value="78a75b30-472d-4790-a5d5-7f2ed49662a4" style="accent-color: #fff;"/>
                    Weekly Roundup
                </label>
                <span style="color: #d0d0d0; display: none;">Where I share what I’ve been up to that week, including articles I’ve published, cool finds, tips and tricks, and more!</span>
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="b3964" type="checkbox" name="l" checked value="b3964560-37b0-43d3-9df9-26589fd6bf8d" style="accent-color: #fff;"/>
                    New Posts
                </label>
                <span style="color: #d0d0d0; display: none;">Receive an email every time I post something new on my blog</span>
            </div>
            <input type="submit" value="Subscribe" style="width: 100%; padding: 10px; border: none; border-radius: 4px; background: #fff; color: #007bff; font-size: 14px; cursor: pointer; transition: background-color 0.3s ease, box-shadow 0.3s ease; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);"/>
        </div>
        <p style="text-align: center; margin-top: 10px; color: #d0d0d0; font-size: 10px; margin-bottom:0px;">
            No spam, no ads. Unsubscribe at any time.
        </p>
    </form>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Host your own private search engine — searX</title>
      <link>https://4rkal.com/posts/searx/</link>
      <pubDate>Fri, 03 Mar 2023 23:21:53 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/searx/</guid>
      <description>We rely on google more and more, but it’s interesting to know how much data Google is now handling. Alphabet aka Google describes its extensive data collection practices in its privacy policy. The company stores an astounding quantity of data. An estimated 15 exabytes of YOUR data are stored by Google. Google is tracking your every move.
What is searX? Searx is a free and open-source metasearch engine, available under the GNU Affero General Public License version 3, with the aim of protecting the privacy of its users.</description>
      <content:encoded><![CDATA[<p>We rely on google more and more, but it’s interesting to know how much data Google is now handling. Alphabet aka Google describes its extensive data collection practices in its privacy policy. The company stores an astounding quantity of data. An estimated 15 exabytes of YOUR data are stored by Google. Google is tracking your every move.</p>
<h2 id="what-is-searx">What is searX?</h2>
<p>Searx is a free and open-source metasearch engine, available under the GNU Affero General Public License version 3, with the aim of protecting the privacy of its users. In order to do this, Searx does not provide the search engines from which it receives results with users’ IP addresses or search histories. Tracking cookies served by the search engines are blocked, preventing user-profiling-based results modification.</p>
<p>Users can run private instances of Searx on their own computer, but there are also many public, user-run, Searx instances.</p>
<p>In this article i will show you how to run your own searX instance.</p>
<h2 id="what-is-a-metasearch-engine">What is a metasearch engine?</h2>
<p>A web search engine’s data is used by a metasearch engine, an online information retrieval tool, to create its own results. Metasearch engines automatically query search engines eg Google after receiving user input. The users are shown sufficient data that has been gathered, sorted, and presented.</p>
<h2 id="requirements">Requirements</h2>
<ol>
<li>An computer (preferably running linux). Check out my article on how to install linux here <a href="https://4rkal.medium.com/install-a-debian-server-54add9133eec">https://4rkal.medium.com/install-a-debian-server-54add9133eec</a></li>
<li>an internet connection</li>
</ol>
<h2 id="installing-on-windows">Installing on windows</h2>
<p>To install on windows you will have to install wsl and follow the setup guide for linux bellow</p>
<p>To see how to install wsl head to <a href="https://docs.microsoft.com/en-us/windows/wsl/install">https://docs.microsoft.com/en-us/windows/wsl/install</a></p>
<h2 id="installing-on-linux-debian">Installing on Linux (debian)</h2>
<p>First update your system
<code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code>
Now install required packages
<code>sudo apt install -y python3-dev python3-babel python3-venv uwsgi uwsgi-plugin-python3 git build-essential libxslt-dev zlib1g-dev libffi-dev libssl-dev </code>
Now you will have to create a new user called searx</p>
<pre tabindex="0"><code>sudo -H useradd --shell /bin/bash --system \
    --home-dir &#34;/usr/local/searx&#34; \
    --comment &#39;Privacy-respecting metasearch engine&#39; searx

sudo -H mkdir &#34;/usr/local/searx&#34;
sudo -H chown -R &#34;searx:searx&#34; &#34;/usr/local/searx&#34;
</code></pre><p>Now change user to searx</p>
<p><code>git clone &quot;https://github.com/searx/searx.git&quot; &quot;/usr/local/searx/searx-src&quot;t</code></p>
<p>Now create a virtual environment</p>
<p><code>echo &quot;. /usr/local/searx/searx-pyenv/bin/activate&quot; &gt;&gt;  &quot;/usr/local/searx/.profile&quot;</code></p>
<p>To install searx’s dependencies, exit the searx bash session you opened above and restart a new. Before install, first check if your virtualenv was sourced from the login (~/.profile):</p>
<p>Update dependencies</p>
<pre tabindex="0"><code>pip install -U pip
pip install -U setuptools
pip install -U wheel
pip install -U pyyaml
</code></pre><p>Jump to searx’s working tree and install searx into virtualenv</p>
<pre tabindex="0"><code>cd &#34;/usr/local/searx/searx-src&#34;
pip install -e .
</code></pre><p>Now go back to your default user</p>
<p><code>exit</code></p>
<p>And type
<code>sudo -H mkdir -p &quot;/etc/searx&quot;</code></p>
<p>Then</p>
<pre tabindex="0"><code>sudo -H cp &#34;/usr/local/searx/searx-src/utils/templates/etc/searx/use_default_settings.yml&#34; \
             &#34;/etc/searx/settings.yml&#34;
</code></pre><p>Now you can edit your settings file</p>
<p><code>sudo nano /etc/searx/settings.yml</code></p>
<p>You can change the secret_key</p>
<p>I will change the port and bind_address but you can change whatever you want.</p>
<p>Now log back in to your searx user</p>
<p><code>sudo -H -u searx -i</code></p>
<p>Change directory</p>
<p><code>cd /usr/local/searx/searx-src</code></p>
<p>Export the settings path</p>
<pre tabindex="0"><code>export 
SEARX_SETTINGS_PATH=&#34;/etc/searx/settings.yml&#34;
</code></pre><p>Finally run the web app
<code>python searx/webapp.py</code>
Now if you head to 127.0.0.1:8888 you should be able to see something like this
<img loading="lazy" src="/../assets/searx.webp" type="" alt="1"  />
<strong>GG</strong> you did it enjoy privacy (in search engines)</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Become anonymous and somewhat untraceable with tails os</title>
      <link>https://4rkal.com/posts/tails/</link>
      <pubDate>Fri, 03 Mar 2023 23:03:40 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/tails/</guid>
      <description>In this article we will talk about what tails is and how to install and more.
What is tails? Tails, or The Amnesic Incognito Live System, is a security-focused Debian-based Linux distribution aimed at preserving privacy and anonymity.It connects to the Internet exclusively through the anonymity network Tor. The system is designed to be booted as a live DVD or live USB, and leaves no digital footprint on the machine unless explicitly told to do so.</description>
      <content:encoded><![CDATA[<p>In this article we will talk about what tails is and how to install and more.</p>
<h1 id="what-is-tails">What is tails?</h1>
<p>Tails, or The Amnesic Incognito Live System, is a security-focused Debian-based Linux distribution aimed at preserving privacy and anonymity.It connects to the Internet exclusively through the anonymity network Tor. The system is designed to be booted as a live DVD or live USB, and leaves no digital footprint on the machine unless explicitly told to do so.</p>
<h1 id="what-is-the-tor-network">What is the tor network?</h1>
<p>Tor, short for The Onion Router, is free and open-source software for enabling anonymous communication. It directs Internet traffic through a free, worldwide, volunteer overlay network, consisting of more than six thousand relays,to conceal a user’s location and usage from anyone performing network surveillance or traffic analysis. Using Tor makes it more difficult to trace a user’s Internet activity.</p>
<h1 id="who-is-tails-intended-for">Who is tails intended for?</h1>
<p>As the tails website states (<a href="https://tails.boum.org/)">https://tails.boum.org/)</a>. Tails is intended for Activists who use Tails to hide their identities, avoid censorship, and communicate securely. Journalists and their sources use Tails to publish sensitive information and access the Internet from unsafe places. Domestic violence survivors use Tails to escape surveillance at home. You whenever you need extra privacy in this digital world.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>A computer (minimum of 2GB ram , 64-bit x86–64 compatible processor)</li>
<li>A usb stick with 8GB+ of space</li>
</ol>
<p>Read more <a href="https://tails.boum.org/doc/about/requirements/index.en.html">https://tails.boum.org/doc/about/requirements/index.en.html</a></p>
<h1 id="installation">Installation</h1>
<p>Back up all your files USB files as they will get deleted!</p>
<p>The first thing you will have to do is to head to <a href="https://tails.boum.org/install/index.en.html">https://tails.boum.org/install/index.en.html</a>
Now select your operating system</p>
<p>Ill walk you through the installation for windows and linux.
This should probably bethe same with linux
After you have clicked on the windows logo you should be prompted with the requirements and a step by step guide.</p>
<p>The first thing you will have to do is to download the tails usb image.</p>
<p>After that i highly recommend that you verify your download</p>
<p>Just click on select and select it.</p>
<p>Now you will have to download balena etcher. Just click on download balena etcher and double click the installer.</p>
<p>At this moment plug in your usb (if you have any important files on the usb you have to back the up or they will be lost)</p>
<p>Now click the flash from file button and select the file you downloaded (it ends in .img)</p>
<p>Click the Select target button to select your USB stick.</p>
<p>And now select flash.</p>
<p>This could take a while so just sit back and relax.</p>
<h1 id="using-tails">Using tails</h1>
<p>After your installation is finished just reboot your computer and hit F12 or F2 depending on your computer.</p>
<p>Now you should see a screen thats says something like please select your boot device. You will have to select your usb and hit enter</p>
<p>Now you should see the grub loader</p>
<p>Select Tails and hit enter</p>
<p>Now you should be booted into tails</p>
<p>You will probably see a screen that looks something like this</p>
<p><img loading="lazy" src="/../assets/tails.webp" type="" alt=""  /></p>
<p>Here you will have to set your language and region. We can also press on the + icon to add a admin password mac address anonymization etc. I will just put the admin password and the unsafe browser. You can select anything you want. However remember that changing some of these settings will make you less anonymous.</p>
<p>Once you are ready select start tails</p>
<p>Now you will see</p>
<p><img loading="lazy" src="/../assets/tails2.webp" type="" alt=""  /></p>
<p>Here you can select anything you want. I will just select the first option.</p>
<p>Now you should see this:</p>
<p><img loading="lazy" src="/../assets/tails3.webp" type="" alt=""  /></p>
<p>GG you did it. One more step though</p>
<p>I like to have a persistent volume so that i don’t lose all my files when i reboot. To do that open the configure persistent volume app and follow the steps there.</p>
<p>That’s it for now</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Get ad free web with Pi-hole</title>
      <link>https://4rkal.com/posts/pihole/</link>
      <pubDate>Sat, 25 Feb 2023 21:17:13 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/pihole/</guid>
      <description>In this article, I will show you how to set up Pi-hole. Pi-hole will allow you to block in-app ads, improve your network&amp;rsquo;s performance, and monitor statistics. Pi-hole also allows you to create a VPN.
What is Pi-hole? Pi-hole is a Linux network-level advertisement and Internet tracker blocking application that acts as a DNS sinkhole and optionally a DHCP server, intended for use on a private network. It is designed for low-power embedded devices with network capability, such as the Raspberry Pi, but can be installed on any Linux machine.</description>
      <content:encoded><![CDATA[<p>In this article, I will show you how to set up Pi-hole. Pi-hole will allow you to block in-app ads, improve your network&rsquo;s performance, and monitor statistics. Pi-hole also allows you to create a VPN.</p>
<h1 id="what-is-pi-hole">What is Pi-hole?</h1>
<p>Pi-hole is a Linux network-level advertisement and Internet tracker blocking application that acts as a DNS sinkhole and optionally a DHCP server, intended for use on a private network. It is designed for low-power embedded devices with network capability, such as the Raspberry Pi, but can be installed on any Linux machine. Pi-hole has the ability to block traditional website advertisements as well as advertisements in unconventional places, such as smart TVs and mobile operating system advertisements.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>A computer with Linux (preferably something Debian-based)</li>
<li>Preferably an Ethernet cable</li>
<li>Access to your router&rsquo;s admin portal</li>
<li>A static IP</li>
<li>An internet connection (it&rsquo;s pretty difficult without one, trust me)</li>
</ol>
<h1 id="installation">Installation</h1>
<p>The first thing we have to do is download the installer.</p>
<p>To do that, type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget -O basic-install.sh https://install.pi-hole.net
</span></span></code></pre></div><p>Now, install it with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo bash basic-install.sh
</span></span></code></pre></div><p>Now you should see something like this:</p>
<p><img loading="lazy" src="/../assets/pihole/1.webp" type="" alt="Installation Step 1"  /></p>
<p>Just press OK.</p>
<p><img loading="lazy" src="/../assets/pihole/2.webp" type="" alt="Installation Step 2"  /></p>
<p>Just press OK again.</p>
<p>As I said before, you have to have a static IP in order to set up the Pi-hole, so if you have one configured, just press Yes.</p>
<p><img loading="lazy" src="/../assets/pihole/3.webp" type="" alt="Static IP Setup"  /></p>
<p>Otherwise, you will have to set one up.</p>
<p>Now you will be prompted to select your upstream DNS provider. You can select any of the DNS providers on the list. I will just select Google.</p>
<p><img loading="lazy" src="/../assets/pihole/4.webp" type="" alt="DNS Provider Selection"  /></p>
<p>And press OK.</p>
<p>After that, you will have to select your list. I will just select the default one.</p>
<p><img loading="lazy" src="/../assets/pihole/5.webp" type="" alt="List Selection"  /></p>
<p>Now you will have to select whether you want a web admin interface. Select On and then OK.</p>
<p><img loading="lazy" src="/../assets/pihole/6.webp" type="" alt="Web Admin Interface"  /></p>
<p>Now just select On and press OK.</p>
<p><img loading="lazy" src="/../assets/pihole/7.webp" type="" alt="Web Admin Interface Confirmation"  /></p>
<p>After that, you can select if you want to log queries. You can select any option you want.</p>
<p><img loading="lazy" src="/../assets/pihole/8.webp" type="" alt="Log Queries"  /></p>
<p>Now, I recommend that you leave this as default, but you don’t have to.</p>
<p><img loading="lazy" src="/../assets/pihole/9.webp" type="" alt="Default Settings"  /></p>
<p>Now it should start installing everything.</p>
<p>After the installation is finished, you should see something like this:</p>
<p><img loading="lazy" src="/../assets/pihole/10.webp" type="" alt="Installation Complete"  /></p>
<p>You have now successfully installed Pi-hole. You can head to the admin portal by going to the specified IP.</p>
<p>To be able to use Pi-hole, you have two options:</p>
<ol>
<li>Make the IP the default DNS for your whole network</li>
<li>Manually add it on any device</li>
</ol>
<p>I&rsquo;ll go with the second option.</p>
<h3 id="on-windows">On Windows:</h3>
<p>DNS settings are specified in the TCP/IP Properties window for the selected network connection.</p>
<ol>
<li>Go to the Control Panel</li>
<li>Click Network and Internet &gt; Network and Sharing Center &gt; Change adapter settings</li>
<li>Select the connection for which you want to configure</li>
<li>Right-click Local Area Connection &gt; Properties</li>
<li>Select the Networking tab</li>
<li>Select Internet Protocol Version 4 (TCP/IPv4) or Internet Protocol Version 6 (TCP/IPv6)</li>
<li>Click Properties</li>
<li>Click Advanced</li>
<li>Select the DNS tab</li>
<li>Click OK</li>
<li>Select Use the following DNS server addresses</li>
<li>Replace those addresses with the IP addresses of your Pi</li>
<li>Restart the connection you selected in step 3</li>
<li>Repeat the procedure for additional network connections you want to change</li>
</ol>
<h3 id="on-linux">On Linux:</h3>
<p>In most modern Linux distributions, DNS settings are configured through Network Manager.</p>
<ol>
<li>Click System &gt; Preferences &gt; Network Connections</li>
<li>Select the connection for which you want to configure and press <strong>Edit</strong></li>
<li>Select the IPv4 Settings or IPv6 Settings tab</li>
<li>If the selected method is Automatic (DHCP), open the dropdown and select Automatic (DHCP) addresses only instead. If the method is set to something else, do not change it.</li>
<li>In the DNS servers field, enter your Pi’s IP addresses</li>
<li>Click Apply to save the changes</li>
</ol>
<blockquote>
<p><strong>Warning:</strong> If you are not using Network Manager, your DNS settings are specified in <code>/etc/resolv.conf</code>.</p>
</blockquote>
<p>Now, if we head over to any websites with ads, you should see that no ads appear.</p>
<p>Let&rsquo;s try speedtest.net.</p>
<p>If you have followed the steps correctly, you should see something like this:</p>
<p><img loading="lazy" src="/../assets/pihole/ads.webp" type="" alt="No Ads!"  /></p>
<p><strong>NO ADS</strong></p>
<p>Enjoy the ad-free web.</p>
<p><em><strong>If you enjoyed this article, consider <a href="../../donate">supporting me</a>.</strong></em></p>
<pre tabindex="0"><code></code></pre>]]></content:encoded>
    </item>
    
    <item>
      <title>Securing ssh with Key-Based authentication</title>
      <link>https://4rkal.com/posts/sssh/</link>
      <pubDate>Sat, 25 Feb 2023 21:08:47 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/sssh/</guid>
      <description>SSH keys provide an extremely secure way of logging into your server.
SSH Password Based VS Key Based Authentication Clients can be authenticated by an SSH server in a variety of ways. The most basic is password authentication, which is simple to use but not particularly secure. The more advanced and secure way is via ssh keys.Brute-forcing a password-protected account is quite possible thanks to modern computing power and automated scripts.</description>
      <content:encoded><![CDATA[<p>SSH keys provide an extremely secure way of logging into your server.</p>
<h1 id="ssh-password-based-vs-key-based-authentication">SSH Password Based VS Key Based Authentication</h1>
<p>Clients can be authenticated by an SSH server in a variety of ways. The most basic is password authentication, which is simple to use but not particularly secure. The more advanced and secure way is via ssh keys.Brute-forcing a password-protected account is quite possible thanks to modern computing power and automated scripts. The solution to that is ssh key based authentication.</p>
<h1 id="how-does-key-based-authentication-work">How does Key Based Authentication work?</h1>
<p>SSH key pairs are two cryptographically secure keys that allow a client to connect to an SSH server. A public key and a private key make up each key pair.The client keeps the private key, which should be kept completely confidential.</p>
<p>If the attacker has access to the private key, they will be able to enter into servers using the corresponding public key without requiring further authentication. A passphrase can be used to encrypt the key on disc as an extra precaution.</p>
<p>The related public key can be freely shared without causing any harm. The public key can be used to encrypt communications that can only be decrypted with the private key. This attribute is used to verify the authenticity of the key pair. The public key is placed on a distant server that you wish to use SSH to access. The key is saved in a special file called /.ssh/authorized keys in the user account you’ll be login into.</p>
<p>When a client uses SSH keys to authenticate, the server can check if the client has the private key. A shell session is started or the requested command is executed if the client can verify ownership of the private key.</p>
<h1 id="setting-up">Setting up</h1>
<p>The first thing we will have to to do is generate an SSH key pair on your local computer.</p>
<p>To do that type</p>
<p><code>ssh-keygen</code></p>
<p>You should see something like this</p>
<pre tabindex="0"><code>Generating public/private rsa key pair.
Enter file in which to save the key (/home/4rkal/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase):
</code></pre><p>If you want to you can enter a passphrase to encrypt the private key.</p>
<p>After that your key should be generated.</p>
<p>Now you will have to copy your public key to your server.</p>
<p>To do that type</p>
<p><code>ssh-copy-id username@host_ip</code></p>
<p>(find your servers ip by typing ifconfig in your server)</p>
<p>eg.</p>
<p>`ssh-copy-id <a href="mailto:server@192.168.1.13">server@192.168.1.13</a>'</p>
<p>Try to ssh into your server by typing</p>
<p><code>ssh username@host_ip</code></p>
<p>You should be able to login into your server without the password. However, brute force attacks continue to threaten your server. Now we have to disable password based authentication.</p>
<p>First login to your ssh server by typing
<code>ssh username@host_ip</code></p>
<p>Now we have edit the ssh config</p>
<p>sudo nano /etc/ssh/sshd_config</p>
<p>You should see a large file that starts with</p>
<pre tabindex="0"><code>#       $OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $
</code></pre><p>At this point press cntrl w and search for <code>PasswordAuthentication</code></p>
<p>Uncomment the line that says</p>
<p><code>#PasswordAuthentication yes</code></p>
<p>And change it to</p>
<p><code>PasswordAuthentication no</code></p>
<p>Now press cntrl s to save and cntrl x to exit</p>
<p>After that restart the ssh service with</p>
<p><code>sudo service ssh restart</code></p>
<p>Now try to ssh into your server from another machine or a vm and you should see something like this</p>
<p><code>server@192.168.1.13: Permission denied (publickey)</code></p>
<p>GG you have now secured your server</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup a tor website (hidden service)</title>
      <link>https://4rkal.com/posts/torhs/</link>
      <pubDate>Sat, 25 Feb 2023 20:56:02 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/torhs/</guid>
      <description>In this article i will be showing you how to host your “dark web” aka Tor website for free.
What is Tor? Tor — short for the Onion Routing project — is an open-source privacy network that enables anonymous web browsing. The worldwide Tor computer network uses secure, encrypted protocols to ensure that users’ online privacy is protected. Tor users’ digital data and communications are shielded using a layered approach that resembles the nested layers of an onion.</description>
      <content:encoded><![CDATA[<p>In this article i will be showing you how to host your “dark web” aka Tor website for free.</p>
<h1 id="what-is-tor">What is Tor?</h1>
<p>Tor — short for the Onion Routing project — is an open-source privacy network that enables anonymous web browsing. The worldwide Tor computer network uses secure, encrypted protocols to ensure that users’ online privacy is protected. Tor users’ digital data and communications are shielded using a layered approach that resembles the nested layers of an onion.</p>
<h1 id="why-use-tor">Why use Tor?</h1>
<p>Tor is useful for anyone who wants to keep their internet activities out of the hands of advertisers, ISPs, and websites. That includes people getting around censorship restrictions in their country, people looking to hide their IP address, or anyone else who doesn’t want their browsing habits linked to them.</p>
<p>The Tor network may also host webpages that only other Tor users can view. In other words, you’ve entered the Dark Web, which consists of websites that aren’t indexed by the standard crawlers you use to look for products to purchase, and quiz answers etc . On the Dark Web, you can discover everything from free textbooks to drugs — and worse — as long as you know the secret URL that leads to these sites.</p>
<h1 id="tor-websites">Tor Websites</h1>
<p>Just like any other website, you will need to know the address of an onion service in order to connect to it. An onion address is a string of 56 mostly random letters and numbers, followed by “.onion”.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>A linux machine (debian preferably)</li>
<li>An internet connection (pretty hard without one,trust me)</li>
</ol>
<h1 id="installation">Installation</h1>
<p>The first thing we will have to do is install Tor</p>
<p><code>apt install tor</code></p>
<p>Now we will have to enable tor hidden service(which is the website) for that type:</p>
<p><code>sudo nano /etc/tor/torrc</code></p>
<p>You should see a large configuration file, search for <code>HiddenService</code></p>
<p>You will have to uncoment:</p>
<pre tabindex="0"><code>#HiddenServiceDir /var/lib/tor/hidden_service/
#HiddenServicePort 80 127.0.0.1:80
</code></pre><p>Now press cntrl s and then cntrl x to exit</p>
<p>After that start the tor service by running</p>
<p><code>sudo service tor start</code></p>
<p>or</p>
<p><code>sudo systemctl start tor</code></p>
<p>Now we also have to install nginx to be able to run our website to do that type</p>
<p><code>sudo apt install nginx</code></p>
<p>Start the nginx service with the systemctl or service command</p>
<p>Now we also have to install nginx to be able to run our website to do that type</p>
<p><code>sudo cat /var/lib/tor/hidden_service/hostname</code></p>
<p>You should see a address that looks something like this</p>
<p><code>tiur7p652svsaemdewbsxnnkrj3b35ny2rx454od5wk5ivfqhijm2qd.onion</code></p>
<p>Now open your tor browser and paste your address and press enter.</p>
<p>You will most probably be greeted by the default nginx site.</p>
<p>This page is easily customized, you can check out my article:
<a href="https://4rkal.com/posts/shwebsite/">here</a></p>
<p>GG you did it you are now running a pretty anonymous website on the tor network.</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Self host your own website</title>
      <link>https://4rkal.com/posts/shwebsite/</link>
      <pubDate>Sat, 25 Feb 2023 20:23:16 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/shwebsite/</guid>
      <description>In this article i will show you how to self host your own website securely.
Requirements A computer or microcomputer to host the website The computer needs to run linux An internet connection (Its pretty hard without one, trust me) Lets get started!
Installation The first thing that we will have to do is setup our nginx site.
We first have to be root
sudo su
If you dont have sudo installed try:</description>
      <content:encoded><![CDATA[<p>In this article i will show you how to self host your own website securely.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>A computer or microcomputer to host the website</li>
<li>The computer needs to run linux</li>
<li>An internet connection (Its pretty hard without one, trust me)</li>
</ol>
<p>Lets get started!</p>
<h1 id="installation">Installation</h1>
<p>The first thing that we will have to do is setup our nginx site.</p>
<p>We first have to be root</p>
<p><code>sudo su</code></p>
<p>If you dont have sudo installed try:</p>
<p><code>su -</code></p>
<p>Now we will have to install nginx</p>
<p><code>apt install nginx</code></p>
<p>If you are using any other package manager install it using the package name nginx</p>
<p>Now we will have to start the nginx service</p>
<p><code>systemctl start nginx</code></p>
<p>or</p>
<p><code>service nginx start</code></p>
<p>Lets find your ip with:</p>
<p><code>ip a</code></p>
<p>or</p>
<p><code>ifconfig</code></p>
<p>If you open a web browser and go to your ip you should see the default welcome to nginx site.</p>
<p>Since we want to make our website as secure as possible we can hide the nginx version</p>
<p>To do that type</p>
<p>`sudo nano /etc/nginx/nginx.conf</p>
<p>Now you should see the nginx configuration file.</p>
<p>under</p>
<pre tabindex="0"><code>http {
##
        # Basic Settings
        ##
sendfile on;
        tcp_nopush on;
        types_hash_max_size 2048;
        # server_tokens off;
</code></pre><p>uncomment <code>server_tokens off;</code></p>
<p>Now restart your nginx service</p>
<p><code>systemctl restart nginx</code></p>
<p>We can now enter our html files inside of <code>/var/www/html</code></p>
<p>To do that type:</p>
<p><code>cd /usr/share/nginx/html</code></p>
<p>and now we can create the index.html file</p>
<p><code>nano index.html</code></p>
<p>and paste/write your html code to index.html</p>
<p>Now restart the nginx service again</p>
<p><code>systemctl restart nginx</code></p>
<h1 id="certbot">Certbot</h1>
<p>Now we will install cerbot in order to get https</p>
<p>To install certbot simply type</p>
<p><code>apt install certbot python-certbot-nginx</code></p>
<p>Now we will have to run certbot</p>
<p><code>certbot --nginx</code></p>
<p>Enter all the inf oand agree to the terms</p>
<p>After that you will have to enter the name you would like to activate https for</p>
<p>Just select the names</p>
<p>After that select to redirect http to https</p>
<h1 id="port-forwarding">Port forwarding</h1>
<p>There are a few ways to port forward. In this article we will use noip.com.</p>
<p>Head over to noip.com to get started (Use my referal <a href="https://www.noip.com/?fpr=4rkal">https://www.noip.com/?fpr=4rkal</a>)</p>
<p>Create an account and register a hostname</p>
<p>After that we will have to build the noip client on our computer for that paste these commands to your terminal</p>
<pre tabindex="0"><code>cd /usr/local/src
wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz
tar xzf noip-duc-linux.tar.gz
cd noip-2.1.9–1
make
make install
</code></pre><p>When you run make install you will be prompted to answer some questions like your login information and the update interval</p>
<p>In the update interval just set it to 30</p>
<p>Then if you don’t want to run something at a successful update type n if you do then type y.</p>
<p>You will now also have to edit the nginx default settings</p>
<p>to do that type</p>
<p>`sudo nano /etc/nginx/sites-available/default</p>
<p>Now you will have to change the server_name to the domain you registered at noip.com</p>
<p>You can check if your configuration was successful by running</p>
<p><code>nginx -t</code></p>
<p>You can now restart the nginx service</p>
<p><code>systemctl restart nginx</code></p>
<p>Now if you head to your domain it should be working and ssl should be installed</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Raspberry pi security camera</title>
      <link>https://4rkal.com/posts/rpicamera/</link>
      <pubDate>Sat, 25 Feb 2023 20:03:25 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/rpicamera/</guid>
      <description>In this article i will show you how to setup a raspberry pi security camera using motion. In the end of this article you will have a fully functioning security camera with a live feed and motion detection.
Requirements Raspberry pi or any other computer Web cam Any kind of debian based distro installed on the pi/computer Setup In this article we will be using the motion package (https://motion-project.github.io/)
To get started power on your raspberry pi and ssh into the machine or just connect it to a monitor and a keyboard.</description>
      <content:encoded><![CDATA[<p>In this article i will show you how to setup a raspberry pi security camera using motion. In the end of this article you will have a fully functioning security camera with a live feed and motion detection.</p>
<h1 id="requirements">Requirements</h1>
<ol>
<li>Raspberry pi or any other computer</li>
<li>Web cam</li>
<li>Any kind of debian based distro installed on the pi/computer</li>
</ol>
<h1 id="setup">Setup</h1>
<p>In this article we will be using the motion package (<a href="https://motion-project.github.io/">https://motion-project.github.io/</a>)</p>
<p>To get started power on your raspberry pi and ssh into the machine or just connect it to a monitor and a keyboard. Also connect your web cam to the raspberry pi usb port.</p>
<p>The first thing we will have to do is install motion, for that type the following command:<br>
<code>apt install motion</code><br>
Now start motion with:<br>
<code>systemctl start motion</code><br>
or<br>
<code>service motion start</code><br>
Now we are going to change some of the default settings . To do that type:<br>
<code>nano /etc/motion/motion.conf</code><br>
The first thing that we are going to change is<br>
<code>webcontrol_localhost off</code><br>
This will enable us to access the stream from other computers.</p>
<p>To view the stream run:</p>
<p><code>motion</code></p>
<p>If you get a permission denied error try running</p>
<p><code>sudo motion</code></p>
<p>If you got to http://YOUR_IP:8080 you should see a live feed of the web cam</p>
<p>You can change the port under webcontrol_port in the config file eg.
<code>webcontrol_port 1234</code></p>
<p>If you only want the live stream port you can go to http://your_ip:8081</p>
<p>Again you can change that under stream_port.</p>
<p>Now everything should be working fine. All motion detection files will be saved in /var/lib/motion</p>
<p>You can also change loads of other settings. Here are my settings:https://pastebin.com/WGn0NfcW</p>
<p>Read the documentation here: <a href="https://motion-project.github.io/motion_guide.html">https://motion-project.github.io/motion_guide.html</a></p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How SSH works</title>
      <link>https://4rkal.com/posts/howsshworks/</link>
      <pubDate>Sat, 25 Feb 2023 19:36:25 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/howsshworks/</guid>
      <description>If you work in the IT industry, you’ve undoubtedly heard of ssh. But how does it work?
SSH (secure shell) is a network protocol that allows two computers to connect securely over the internet. SSH uses encryption to prevent hackers from reading data sent between two connected devices.
SSH is divided into three layers:
The transport layer The connection layer The authentication layer During and after authentication, the transport layer establishes safe and secure communication between a client and a server.</description>
      <content:encoded><![CDATA[<p>If you work in the IT industry, you’ve undoubtedly heard of ssh. But how does it work?<br>
SSH (secure shell) is a network protocol that allows two computers to connect securely over the internet. SSH uses encryption to prevent hackers from reading data sent between two connected devices.<br>
SSH is divided into three layers:</p>
<ol>
<li>The transport layer</li>
<li>The connection layer</li>
<li>The authentication layer</li>
</ol>
<p>During and after authentication, the transport layer establishes safe and secure communication between a client and a server. It is in charge of data encryption, decryption, and integrity assurance. It also provides data compression and caching, which helps to speed up data communication.</p>
<p>The authentication layer informs the client about the available authentication methods. It’s also in charge of the whole user authentication procedure.</p>
<p>After the authentication is successful, the connection layer oversees the communication between the machines. It manages communication channel opening and closure, as well as multiple channels for multiple sessions.</p>
<h1 id="session-encryption">Session Encryption</h1>
<p>The server sends the client a list of supported encryption protocols after receiving a connection request. The public key is used by the server as an authentication technique.</p>
<p>The client compares the protocols to the ones it already knows. If there are two protocols that are compatible, the machines agree to use one of them to establish the connection.</p>
<p>On the first connection attempt, the client compares the server’s public key to the private key saved in its system. If the keys are identical, the client and server agree to communicate using symmetric encryption during the SSH session. They communicate utilizing an asymmetrically encrypted mechanism based on the Diffie-Hellman (DH) key exchange algorithm for this purpose.
There are different ciphers that can be used for SSH depending on the applications being used. Some of them include:</p>
<ul>
<li>CHACHA20</li>
<li>AES-GCM</li>
<li>Blowfish-CBC</li>
<li>AES128-CTR</li>
<li>AES192-CTR</li>
<li>AES256-CTR</li>
<li>Arcfour</li>
<li>Cast128-CBC</li>
</ul>
<h1 id="different-encryption-techniques">Different Encryption Techniques</h1>
<p>SSH uses a variety of data manipulation techniques at various points in the transaction to ensure the security of information transmission. These include symmetrical and asymmetrical encryption, as well as hashing.</p>
<h1 id="symmetrical-encryption">Symmetrical Encryption</h1>
<p>Symmetric encryption creates a single key that is exchanged between two machines. The key is then used by the machines for both encryption and decryption. This approach is rapid and resource-light, and it is used by SSH for each session. When the client and server are deciding which algorithm to employ for an SSH session, the first algorithm on the client’s list that the server supports is always used.</p>
<h1 id="asymmetrical-encryption">Asymmetrical Encryption</h1>
<p>Any party can have access to the public key. Although it is linked to its paired key, the private key cannot be deduced from the public key. The public key and private key have a mathematical relationship that allows the public key to encrypt messages that can only be decrypted by the private key. This is a one-way ability, which means that the public key cannot decode the communications it sends or decrypt anything the private key sends it.</p>
<p>The private key should be kept completely confidential and never shared with anybody else. This is a necessary condition for the public key paradigm to function.The only component that can decrypt communications encrypted with the accompanying public key is the private key. Any entity capable of decrypting these messages has demonstrated control over the private key as a result of this fact.</p>
<h1 id="hashing">Hashing</h1>
<p>r key defining characteristics are that they are never supposed to be reversed, that they are nearly hard to predictably alter, and that they are practically unique.</p>
<p>If you use the same hashing function and message, you should get the same hash; if you change any part of the data, you should get a completely different hash. A user should not be able to deduce the actual message from a hash, but they should be able to determine whether a message produced a hash.</p>
<h1 id="session-encryption-negotiation">Session Encryption Negotiation</h1>
<p>The server sends the client a list of supported encryption protocols after receiving a connection request. The public key is used by the server as an authentication technique.</p>
<p>The client evaluates the protocols in comparison to its own. The machines choose one to create the connection using if there are any compatible protocols.</p>
<p>On the initial connection attempt, the client checks the server&rsquo;s public key to the saved copy of its own private key. The client and server consent to using symmetric encryption to communicate during an SSH session if the keys match. They converse utilizing an asymmetric encryption method that makes use of the Diffie-Hellman (DH) key exchange algorithm.</p>
<p>Using a public network, machines can safely collaborate to build a cryptographic key thanks to the DH algorithm. The machines go through the following processes to create a key:</p>
<ul>
<li>The machines agree on two numbers: a modulus and a base number. To prevent brute force key decryption, the chosen modulus is a prime number of at least 600 digits.</li>
<li>In order to solve the equation involving the two public numbers, the machines independently select one number.</li>
<li>The calculated values are exchanged between the server and the client.</li>
<li>Now, utilizing the information obtained from the other machine, each machine computes something.</li>
</ul>
<p>By carrying out the above processes, both machines determine the identical value, which is their secret key. The server then makes an attempt to verify the user&rsquo;s identity who made the access request.</p>
<p>***If you enjoyed this article consider <a href="../../donate">supporting me</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>

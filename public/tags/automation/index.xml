<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Automation on 4rkal&#39;s Dev Blog</title>
    <link>https://4rkal.com/tags/automation/</link>
    <description>Recent content in Automation on 4rkal&#39;s Dev Blog</description>
    <image>
      <url>https://4rkal.com/4rkal.png</url>
      <link>https://4rkal.com/4rkal.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Aug 2024 11:19:17 +0300</lastBuildDate><atom:link href="https://4rkal.com/tags/automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to setup a selfhosted newsletter using listmonk</title>
      <link>https://4rkal.com/posts/listmonk/</link>
      <pubDate>Fri, 23 Aug 2024 11:19:17 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/listmonk/</guid>
      <description>Listmonk is an amazing feature packed selfhosted email newsletter manager. It offers loads of features like analytics (clicks, opens, bounces), templates, public subscription pages, importing subscribers and much more!</description>
      <content:encoded><![CDATA[<h2 id="what-is-listmonk">What is listmonk?</h2>
<p><a href="https://listmonk.app">Listmonk</a> is a selfhosted newsletter and mailing list manager. It is free and opensource, so you have full control over your data. It also offers a super clean webui:</p>
<p><img loading="lazy" src="/../assets/listmonk.png" type="" alt="Listmonk WebUI"  /></p>
<h2 id="why-choose-listmonk-over-mailchimp-buttodown-etc">Why choose listmonk over mailchimp, buttodown etc</h2>
<p>For me, running a newsletter means owning my email list.</p>
<p>When people create newsletters they want to break free from the big platforms like Twitter or YouTube. When you use a proprietary service like Mailchimp, you’re still tied down to their rules and limitations. With Listmonk, you get more control and independence, which for me is a huge win.</p>
<p>The other reason is that listmonk is completely free (if you don&rsquo;t count electricity bills/vps hosting bills). Even if you include the cost of your email host + hosting fees it is still tiny compared to mailchimp or buttondown.</p>
<h2 id="listmonk-feature-overview">Listmonk feature overview</h2>
<ol>
<li>Analytics - Tracking email opens, link clicks and bounces</li>
<li>Templates - Advanced html templates with template variables</li>
<li>Public subscription page - See mine <a href="https://newsletter.4rkal.com/subscription/form">here</a></li>
<li>Subscribers import - Import subscribers from other platforms using CSV.</li>
<li>Media Uploads - Upload images etc</li>
<li>Email lists - Separate lists eg Weekly roundup and new posts.</li>
</ol>
<p>And more</p>
<h2 id="requirements-for-running-listmonk">Requirements for running listmonk</h2>
<ol>
<li>A server running linux, either in the cloud or at home. We will be using debian 12, but you can use any other distribution.</li>
<li>An email address to send the newsletter from. Can either be a gmail or a custom one.</li>
</ol>
<h2 id="server-setup">Server Setup</h2>
<p>Before doing anything I highly recommend that you disable password logins for ssh. See <a href="https://4rkal.com/posts/sssh/">Securing ssh with Key-Based authentication</a> for more info on how to do that.</p>
<p>Login to your server via ssh</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>ssh user@server.ip
</span></span></code></pre></div><p>Make sure that all packages are up to date</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo apt update <span style="color:#f92672">&amp;&amp;</span> sudo apt upgrade
</span></span></code></pre></div><p>You will also have to have docker installed, if you don&rsquo;t install it, <a href="https://docs.docker.com/engine/install/debian/">instructions for debian</a></p>
<p>Create a new directory to host listmonk&rsquo;s configuration files</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>mkdir listmonk <span style="color:#f92672">&amp;&amp;</span> cd listmonk
</span></span></code></pre></div><p>Download the listmonk docker-compose file</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>curl -O https://github.com/knadh/listmonk/blob/master/docker-compose.yml
</span></span></code></pre></div><p>Run it using docker:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker compose up -d
</span></span></code></pre></div><p>Now if you head to</p>
<pre tabindex="0"><code>localhost:9000
</code></pre><p>You should see listmonk up and running</p>
<p>But first we should change some settings in the configuration files</p>
<pre tabindex="0"><code>vim config.toml
</code></pre><p>Here you can change the default admin password. I also changed the address to 0.0.0.0 so that I can access it via the servers ip.</p>
<h2 id="listmonk-customization">Listmonk customization</h2>
<p>Now head to the webui at</p>
<pre tabindex="0"><code>localhost:9000
</code></pre><p>Login and head to the settings</p>
<p>In the <code>General</code> tab you can customize the default from email, root url, site name, favicon and admin notification emails</p>
<p>Here&rsquo;s what my settings look like:</p>
<p><img loading="lazy" src="/listmonk2.png" type="" alt="Listmonk Settings"  /></p>
<p>You can customize the page to your liking.</p>
<p>Save by clicking on the save button in the top right corner.</p>
<h2 id="email-setup">Email setup</h2>
<p>For the next part you will either need a gmail account or any other email provider that give you smtp connection</p>
<p>If you want a great custom email I recommend ionos, you can get up to 10$ in credits by using my link <a href="http://aklam.io/bbxioA">Ionos - Email &amp; Office 10$ credits </a> that is the provider that I am currently using.</p>
<p>In this guide I will show you how to set this up for these two providers, but the setup should be similar for others too.</p>
<p><strong>IMPORTANT</strong>: Both of these hosts have a limit on how many emails can be sent out per hour or per day. For ionos that is 500/hour. Setting up a <a href="#sliding-window-limit">Sliding Window Limit</a> is very important.</p>
<h3 id="setup-for-gmail">Setup for gmail</h3>
<p>I recommend that you use a different gmail account from your personal one.</p>
<p>The first thing you will have to do is generate an app password, to do that head to <a href="https://myaccount.google.com/apppasswords">Create and manage app passwords</a> and create a new one called listmonk. Copy the password that is generated and save it somewhere safe.</p>
<p>Now head over to the listmonk webui</p>
<p>In the <code>SMTP</code> tab in settings you will find this:</p>
<p><img loading="lazy" src="/../assets/listmonk3.png" type="" alt="Gmail SMTP"  /></p>
<p>Click on the gmail option as circled.</p>
<p>Now enter your full email address (including @gmail.com) in the username field</p>
<p>And in the password field enter the app password we generated before.</p>
<p>Now click on the <code>Test connection</code> button in the bottom right corner, enter a test email and click on <code>Send e-mail</code>.</p>
<p>If you configured everything correctly you should now get a test message to the email specified.</p>
<p>Don&rsquo;t forget to save!</p>
<h3 id="setup-for-ionos">Setup for ionos</h3>
<p>You should probably generate a new email for the newsletter, eg `<a href="mailto:newsletter@yourdomain.tld">newsletter@yourdomain.tld</a>.</p>
<p>Head over to the listmonk webui</p>
<p>Now in the <code>SMTP</code> tab in the settings you see this</p>
<p><img loading="lazy" src="/../assets/listmonk4.png" type="" alt="Gmail SMTP"  /></p>
<p>The ionos smtp server settings are:</p>
<p>Host: <code>smtp.ionos.com</code></p>
<p>Port: <code>465</code></p>
<p>TLS: <code>SSL/TLS</code></p>
<p><strong>IMPORTANT</strong>: If you’re using IONOS UK or another specific regional version, you need to adjust the host name. For example, if you’re on IONOS UK, you should use <code>smtp.ionos.co.uk</code> instead of the global <code>smtp.ionos.com</code>.</p>
<p>Now in the username field you should enter the full email address <code>newsletter@yourdomain.tld</code> and the password is the normal user password.</p>
<p>Now to test the connection click on the <code>Test connection</code> button in the bottom right corner, enter a test email and click on <code>Send e-mail</code>.</p>
<p>If you configured everything correctly you should now get a test message to the email specified.</p>
<p>Don&rsquo;t forget to save!</p>
<h2 id="sliding-window-limit">Sliding window limit</h2>
<p>This is very important to setup when email providers limit the amount of email to be sent per hour or per day. You can access the Sliding window limit in <code>Settings</code> under the performance tab. For ionos I have it set at 500 emails/hour</p>
<h2 id="exposing-via-cloudflare-tunnels">Exposing via cloudflare tunnels</h2>
<p>I will be making my instance publicly accessible using cloudflare tunnels.</p>
<p>To do this you will need a cloudflare account and a domain pointed to cloudflare.</p>
<p>First head to the <a href="https://one.dash.cloudflare.com/">Zero Trust Dashboard</a></p>
<p>Under <code>Networks</code> click on <code>Tunnels</code> and then <code>Create a tunnel</code></p>
<p>Once created you should <code>Install and run a connector</code>, follow the instructions on the page for your specific setup.</p>
<p>After the connector is running you should click on the <code>Public Hostname</code> tab and <code>Add a public hostname</code>.</p>
<p>Now you should see something like this:
<img loading="lazy" src="/../assets/listmonk5.png" type="" alt="Zero Trust Dashboard"  /></p>
<p>Fill in the info as I have.</p>
<p>The service type should be <code>HTTP</code> and the url should be <code>yourserverurl:9000</code>, in my case that&rsquo;s 127.0.0.1:9000</p>
<p>Now if you head to the domain that you specified you should see gitea up and running.</p>
<p>In my case you can access my newsletter page <a href="https://newsletter.4rkal.com/subscription/form">here</a></p>
<h2 id="listmonk-feature-overview-1">Listmonk feature overview</h2>
<p>These are all of the features that listmonk offers:</p>
<h3 id="templates">Templates</h3>
<p>Listmonk offers amazing built in template support.</p>
<p>All templates are written in HTML.</p>
<p>You can access the templates by going to <code>Campaigns &gt; Templates</code>.</p>
<p>Don&rsquo;t forget to always include <code>{{ template &quot;content&quot; . }}</code> (for the main content) and also an unsubscribe button in all of your templates</p>
<h3 id="campaigns">Campaigns</h3>
<p>You can create a new campaign (email) by going to <code>Campaigns &gt; All Campaigns</code></p>
<p>Here you can select a campaign name, subject the list&rsquo;s you want to target and the template</p>
<h3 id="email-lists">Email lists</h3>
<p>You can create new lists by going to <code>Lists &gt; All Lists</code>.</p>
<p>For example I have two lists:</p>
<ol>
<li>New posts - Receive an email every time I post something new on my blog</li>
<li>Weekly Roundup - Join my weekly roundup, where I share what I’ve been up to that week, including articles I’ve published, cool finds, tips and tricks and more!</li>
</ol>
<p>Not everyone wants to receive an email every time I post a new article, so I created two lists!</p>
<h3 id="html-forms">HTML Forms</h3>
<p>Listmonk also offers embeddable html forms, to subscribe to the email list. You can access the form builder by going to <code>Lists &gt; Forms</code></p>
<h3 id="public-subscription-page">Public subscription page</h3>
<p>Except for the HTML forms listmonk also has a public subscription page. For example <a href="https://newsletter.4rkal.com/subscription/form">here</a> is mine.</p>
<p>It can also be accessed under `Lists &gt; Forms</p>
<h3 id="campaign-analytics">Campaign analytics</h3>
<p>You can track the views, clicks and bounces of your email campaigns by going to <code>Campaigns &gt; Analytics</code>.</p>
<h3 id="import-subscribers">Import subscribers</h3>
<p>You can import subscribers from other platforms by going to <code>Subscribers &gt; Import</code>. It currently supports CSV or ZIP files.</p>
<p>These are the most important features that listmonk offers (I&rsquo;m sure I forgot some).</p>
<h2 id="thats-all-folks">That&rsquo;s all folks</h2>
<p>If this article helped you out, consider joining my (listmonk) <strong>newsletter bellow</strong>:</p>
<div style="text-align: left; margin: 0 auto;">
    <form method="post" action="https://newsletter.4rkal.com/subscription/form" style="background: #2c2c2c; color: #f0f0f0; border-radius: 8px; padding: 15px; max-width: 500px; box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2); font-family: Arial, sans-serif;">
        <div style="display: flex; flex-direction: column; gap: 10px;">
            <h3 style="margin: 0; color: #f0f0f0; font-size: 18px;">Subscribe</h3>
            <input type="hidden" name="nonce"/>
            <input type="email" name="email" required placeholder="E-mail" style="width: 100%; padding: 10px; border: 1px solid #666; border-radius: 4px; background: #333; color: #f0f0f0; box-sizing: border-box;"/>
            <div style="display: flex; flex-direction: column; gap: 8px;">
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="78a75" type="checkbox" name="l" checked value="78a75b30-472d-4790-a5d5-7f2ed49662a4" style="accent-color: #fff;"/>
                    Weekly Roundup
                </label>
                <span style="color: #d0d0d0; display: none;">Where I share what I’ve been up to that week, including articles I’ve published, cool finds, tips and tricks, and more!</span>
                <label style="margin: 0; color: #f0f0f0; display: none;">
                    <input id="b3964" type="checkbox" name="l" checked value="b3964560-37b0-43d3-9df9-26589fd6bf8d" style="accent-color: #fff;"/>
                    New Posts
                </label>
                <span style="color: #d0d0d0; display: none;">Receive an email every time I post something new on my blog</span>
            </div>
            <input type="submit" value="Subscribe" style="width: 100%; padding: 10px; border: none; border-radius: 4px; background: #fff; color: #007bff; font-size: 14px; cursor: pointer; transition: background-color 0.3s ease, box-shadow 0.3s ease; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);"/>
        </div>
        <p style="text-align: center; margin-top: 10px; color: #d0d0d0; font-size: 10px; margin-bottom:0px;">
            No spam, no ads. Unsubscribe at any time.
        </p>
    </form>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Automating your web browser with selenium</title>
      <link>https://4rkal.com/posts/selenium/</link>
      <pubDate>Wed, 22 Feb 2023 21:23:38 +0300</pubDate>
      
      <guid>https://4rkal.com/posts/selenium/</guid>
      <description>Selenium is a very good skill to have as you can automate almost everything that you can do with a web browser.
In this tutorial, we’ll learn how to use Python and Selenium to automate a web browser. This is an updated version of my previous article which unfortunately doesn&amp;rsquo;t work anymore. If you’re a complete beginner, read my python article to understand the basics. (https://4rkal.com/posts/python/)
What is selenium? Selenium is an open source umbrella project for a range of tools and libraries aimed at supporting browser automation.</description>
      <content:encoded><![CDATA[<p><strong>Selenium is a very good skill to have as you can automate almost everything that you can do with a web browser.</strong></p>
<p>In this tutorial, we’ll learn how to use Python and Selenium to automate a web browser. This is an updated version of my previous article which unfortunately doesn&rsquo;t work anymore. If you’re a complete beginner, read my python article to understand the basics. (<a href="https://4rkal.com/posts/python/">https://4rkal.com/posts/python/</a>)</p>
<h2 id="what-is-selenium">What is selenium?</h2>
<p>Selenium is an open source umbrella project for a range of tools and libraries aimed at supporting browser automation. You can use selenium in multiple programming languages including JavaScript (Node.js), C#, Groovy, Java, Perl, PHP, Python, Ruby and Scala and with multiple web browsers including firefox, internet explorer, safary, opera, chrome and edge. Selenium can be very useful for web scraping, automating boring and manual tasks and so much more.</p>
<h2 id="setup">Setup</h2>
<p>To install selenium you first have to install a browser driver. Here is the list of supported web browsers :</p>
<ul>
<li>Firefox</li>
<li>Internet Explorer?</li>
<li>Safari</li>
<li>Opera</li>
<li>Chrome</li>
<li>Edge
In this article we will be using firefox geckodriver. But you can use any of the browser drivers above.</li>
</ul>
<h2 id="downloading-geckodriver">Downloading geckodriver</h2>
<p>To get started go to github.com/mozilla/geckodriver/releases
Scroll down and select the package for your computer.
I’ll use geckodriver-v0.31.0-linux64.tar.gz because I’m using a linux 64-bit computer.</p>
<h2 id="installing-geckodriver">Installing geckodriver</h2>
<p>The setup varies depending on your operating system.</p>
<p>If you are using Arch Linux:
You can install geckodriver from the aur. Using your favourite aur helper</p>
<p>On linux:</p>
<ol>
<li>Unzip the file</li>
<li>Make the file executable
<code>chmod +x geckodriver</code></li>
<li>Add the driver to your PATH so other tools can find it:
<code>export PATH=$PATH:/path-to-extracted-file/</code>
On windows:</li>
<li>Unzip the file</li>
<li>Paste the file in the directory that your script will run</li>
</ol>
<h2 id="installing-selenium">Installing selenium</h2>
<p>To install selenium you have to have python and pip installed.Check out my article on python for <a href="https://4rkal.com/posts/python">more</a>
To install selenium open your cmd or terminal and type:<br>
<code>pip install selenium</code>
That should install it.\</p>
<h2 id="basics-of-selenium">Basics of selenium</h2>
<p>The first thing we have to do is to create a new file with the .py ending eg. main.py<br>
After you have created it open it in your ide or editor of choice.\</p>
<p>The first thing that we have to do is to import the selenium webdriver :
<code> from selenium import webdriver</code><br>
After that we have to specify what webdriver we are using. In our case its firefox
<code> browser = webdriver.Firefox()</code><br>
Now we need to specify the url that we want it to go to eg python.org</p>
<pre tabindex="0"><code>browser.get(&#39;https://python.org&#39;)
The full code so far is:\
import selenium
from selenium import webdriver
browser = webdriver.Firefox()
browser.get(&#39;https://python.org&#39;)
</code></pre><p>Now we might want it to click on the Downloads button</p>
<p>There are a few ways to do this</p>
<h2 id="method-1-of-clicking-a-button">Method 1 of clicking a button</h2>
<p>The first is with XPATH<br>
To find the xpath of a button / object on a website you have to open your web browser go to the desired website and hit F12 to get the development tools. Now you should click on the select tool (See below)
<img loading="lazy" src="/../assets/inspect.png" type="" alt="Inspect element"  />
Click on it and after that hover above the downloads button with your mouse and click it. After that you should see a bit of code getting highlighted. Right click on the bit of code and select Copy then select Xpath
<img loading="lazy" src="/../assets/copy.png" type="" alt="1"  />
Now go back to the python file and type:<br>
<code>driver.find_element(By.XPATH, 'XPATH_HERE')</code><br>
This will throw an error, to fix that error simply add this at the top of the file<br>
<code> from selenium.webdriver.common.by import By</code><br>
Your code so far should look like this</p>
<pre tabindex="0"><code>import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
browser = webdriver.Firefox()
browser.get(&#39;https://python.org&#39;)
browser.find_element(By.XPATH, &#39;/html/body/div/header/div/nav/ul/li[2]/a&#39;).click()
</code></pre><h2 id="method-2">Method 2</h2>
<p>XPATH with text
The second method is a bit simpler but not as reliable as the first as there might be many objects with the same name.<br>
To use this method type:
<code>browser.find_element(By.XPATH, &quot;//*[contains(text(), 'Downloads')]&quot;).click()</code>
Your code should look something like this</p>
<pre tabindex="0"><code>import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
browser = webdriver.Firefox()
browser.get(&#39;https://python.org&#39;)
browser.find_element(By.XPATH, &#34;//*[contains(text(), &#39;Downloads&#39;)]&#34;).click()
</code></pre><p>. . . . .</p>
<p>There many methods on how to locate elements but the above i believe are the easiest.
The methods are the following</p>
<ul>
<li>By.ID</li>
<li>By.NAME</li>
<li>By.XPATH</li>
<li>By.LINK-TEXT</li>
<li>By.TAG_NAME</li>
<li>By.CLASS_NAME</li>
<li>By.CSS_SELECTOR\</li>
</ul>
<p>Read more here: <a href="https://selenium-python.readthedocs.io/locating-elements.html">https://selenium-python.readthedocs.io/locating-elements.html</a></p>
<h2 id="typing-text-into-input-fields">Typing text into input fields.</h2>
<p>Typing text into input fields is pretty straight forward.<br>
For that we will use any of the above methods. I&rsquo;m going to use xpath.<br>
Find the xpath of any input field, I&rsquo;m going to use the google.com search field<br>
Copy the xpath and type:<br>
<code>a = browser.find_element(By.XPATH, &quot;XPATH_HERE&quot;)</code>
Paste the xpath in XPATH_HERE</p>
<p>To send keys we need to import the selenium.webdriver.common.keys library for that paste this line of code at the top of your file<br>
<code>from selenium.webdriver.common.keys import Keys</code><br>
Now type:<br>
<code>a.send_keys(&quot;python&quot;)</code><br>
After that we want to press the enter key for that type:<br>
<code>a.send_keys(Keys.RETURN)</code><br>
The full code should look something like this:</p>
<pre tabindex="0"><code>import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
browser = webdriver.Firefox()
browser.get(&#39;https://google.com&#39;)
a = browser.find_element(By.XPATH, &#34;/html/body/div[1]/div[3]/form/div[1]/div[1]/div[1]/div/div[2]/input&#34;)
a.send_keys(&#34;python&#34;)
a.send_keys(Keys.RETURN)
</code></pre><p>GG you just automated your first google search!
You might first need to accept cookies for that just follow the steps on how to click a button from above.<br>
Read more about selenium here: <a href="https://selenium-python.readthedocs.io/">https://selenium-python.readthedocs.io/</a>\</p>
<p>*<strong>If you enjoyed this article consider <a href="../../donate">supporting me</a></strong></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
